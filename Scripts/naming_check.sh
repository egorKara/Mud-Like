#!/bin/bash

# üéØ Mud-Like Naming Convention Checker
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–∞–≤–∏–ª–∞–º –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ Mud-Like

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –°—á–µ—Ç—á–∏–∫–∏
ERRORS=0
WARNINGS=0
TOTAL_FILES=0

echo -e "${BLUE}üéØ Mud-Like Naming Convention Checker${NC}"
echo "================================================"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—à–∏–±–æ–∫
error() {
    echo -e "${RED}‚ùå ERROR:${NC} $1"
    ((ERRORS++))
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  WARNING:${NC} $1"
    ((WARNINGS++))
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —É—Å–ø–µ—Ö–∞
success() {
    echo -e "${GREEN}‚úÖ OK:${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ ECS —Å–∏—Å—Ç–µ–º
check_ecs_systems() {
    echo -e "\n${BLUE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ ECS —Å–∏—Å—Ç–µ–º...${NC}"
    
    # –ü–æ–∏—Å–∫ ECS —Å–∏—Å—Ç–µ–º –±–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å—É—Ñ—Ñ–∏–∫—Å–∞
    local bad_systems=$(find Assets/Scripts -name "*.cs" -exec grep -l "class.*System.*SystemBase" {} \; 2>/dev/null | while read file; do
        if [[ ! "$file" =~ System\.cs$ ]]; then
            echo "$file"
        fi
    done)
    
    if [ -n "$bad_systems" ]; then
        while IFS= read -r file; do
            if [ -f "$file" ]; then
                error "ECS —Å–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ 'System.cs': $file"
            fi
        done <<< "$bad_systems"
    fi
    
    # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –∏–º–µ–Ω ECS —Å–∏—Å—Ç–µ–º
    local conflict_systems=$(find Assets/Scripts -name "*.cs" -exec grep -l "class.*\(ObjectPool\|Pool\|Manager\|System\|Data\|Info\|Work\|Job\).*SystemBase" {} \; 2>/dev/null || true)
    
    if [ -n "$conflict_systems" ]; then
        while IFS= read -r file; do
            if [ -f "$file" ]; then
                error "–ó–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ –∏–º—è ECS —Å–∏—Å—Ç–µ–º—ã (–∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å source generators): $file"
            fi
        done <<< "$conflict_systems"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ ECS –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
check_ecs_components() {
    echo -e "\n${BLUE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ ECS –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...${NC}"
    
    # –ü–æ–∏—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
    local bad_components=$(find Assets/Scripts -name "*.cs" -exec grep -l "struct.*\(Data\|Info\|Pool\|Work\|Job\).*IComponentData" {} \; 2>/dev/null || true)
    
    if [ -n "$bad_components" ]; then
        while IFS= read -r file; do
            if [ -f "$file" ]; then
                error "–ó–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ –∏–º—è ECS –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: $file"
            fi
        done <<< "$bad_components"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ –ø—É–ª–æ–≤
check_managers_pools() {
    echo -e "\n${BLUE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ –ø—É–ª–æ–≤...${NC}"
    
    # –ü–æ–∏—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –±–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å—É—Ñ—Ñ–∏–∫—Å–∞
    local bad_managers=$(find Assets/Scripts -name "*.cs" -exec grep -l "class.*Manager" {} \; 2>/dev/null | xargs grep -l "class.*Manager" 2>/dev/null | xargs grep -L "Manager\.cs$" 2>/dev/null || true)
    
    if [ -n "$bad_managers" ]; then
        while IFS= read -r file; do
            if [ -f "$file" ]; then
                warning "–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ 'Manager.cs': $file"
            fi
        done <<< "$bad_managers"
    fi
    
    # –ü–æ–∏—Å–∫ –ø—É–ª–æ–≤ –±–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å—É—Ñ—Ñ–∏–∫—Å–∞
    local bad_pools=$(find Assets/Scripts -name "*.cs" -exec grep -l "class.*Pool" {} \; 2>/dev/null | xargs grep -l "class.*Pool" 2>/dev/null | xargs grep -L "Pool\.cs$" 2>/dev/null || true)
    
    if [ -n "$bad_pools" ]; then
        while IFS= read -r file; do
            if [ -f "$file" ]; then
                warning "–ü—É–ª –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ 'Pool.cs': $file"
            fi
        done <<< "$bad_pools"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Jobs
check_jobs() {
    echo -e "\n${BLUE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Jobs...${NC}"
    
    # –ü–æ–∏—Å–∫ Jobs –±–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å—É—Ñ—Ñ–∏–∫—Å–∞
    local bad_jobs=$(find Assets/Scripts -name "*.cs" -exec grep -l "struct.*Job.*IJob" {} \; 2>/dev/null | xargs grep -l "struct.*Job.*IJob" 2>/dev/null | xargs grep -L "Job\.cs$" 2>/dev/null || true)
    
    if [ -n "$bad_jobs" ]; then
        while IFS= read -r file; do
            if [ -f "$file" ]; then
                warning "Job –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ 'Job.cs': $file"
            fi
        done <<< "$bad_jobs"
    fi
    
    # –ü–æ–∏—Å–∫ Jobs —Å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
    local conflict_jobs=$(find Assets/Scripts -name "*.cs" -exec grep -l "struct.*\(Job\|Work\).*IJob" {} \; 2>/dev/null || true)
    
    if [ -n "$conflict_jobs" ]; then
        while IFS= read -r file; do
            if [ -f "$file" ]; then
                error "–ó–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ –∏–º—è Job (—Å–ª–∏—à–∫–æ–º –æ–±—â–µ–µ): $file"
            fi
        done <<< "$conflict_jobs"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ namespace
check_namespaces() {
    echo -e "\n${BLUE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ namespace...${NC}"
    
    # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –±–µ–∑ namespace
    local no_namespace=$(find Assets/Scripts -name "*.cs" -exec grep -L "namespace" {} \; 2>/dev/null || true)
    
    if [ -n "$no_namespace" ]; then
        while IFS= read -r file; do
            if [ -f "$file" ]; then
                warning "–§–∞–π–ª –±–µ–∑ namespace: $file"
            fi
        done <<< "$no_namespace"
    fi
    
    # –ü–æ–∏—Å–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö namespace
    local bad_namespaces=$(find Assets/Scripts -name "*.cs" -exec grep -l "namespace.*MudLike" {} \; 2>/dev/null | xargs grep -L "namespace MudLike\." 2>/dev/null || true)
    
    if [ -n "$bad_namespaces" ]; then
        while IFS= read -r file; do
            if [ -f "$file" ]; then
                warning "Namespace –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'MudLike.Module.Submodule': $file"
            fi
        done <<< "$bad_namespaces"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Assembly Definitions
check_assembly_definitions() {
    echo -e "\n${BLUE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Assembly Definitions...${NC}"
    
    # –ü–æ–∏—Å–∫ –ø–∞–ø–æ–∫ –±–µ–∑ Assembly Definition
    local folders_without_asmdef=$(find Assets/Scripts -type d -name "ECS" -o -name "Performance" -o -name "Gameplay" | while read dir; do
        if [ ! -f "$dir"/*.asmdef ]; then
            echo "$dir"
        fi
    done)
    
    if [ -n "$folders_without_asmdef" ]; then
        while IFS= read -r folder; do
            if [ -n "$folder" ]; then
                warning "–ü–∞–ø–∫–∞ –±–µ–∑ Assembly Definition: $folder"
            fi
        done <<< "$folders_without_asmdef"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Unity API –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
check_unity_conflicts() {
    echo -e "\n${BLUE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å Unity API...${NC}"
    
    # –ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö Unity –∫–ª–∞—Å—Å–æ–≤
    local unity_conflicts=$(find Assets/Scripts -name "*.cs" -exec grep -l "class.*\(Transform\|GameObject\|MonoBehaviour\|Component\|Behaviour\)" {} \; 2>/dev/null || true)
    
    if [ -n "$unity_conflicts" ]; then
        while IFS= read -r file; do
            if [ -f "$file" ]; then
                error "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–≥–æ Unity –∫–ª–∞—Å—Å–∞: $file"
            fi
        done <<< "$unity_conflicts"
    fi
}

# –ü–æ–¥—Å—á–µ—Ç —Ñ–∞–π–ª–æ–≤
count_files() {
    TOTAL_FILES=$(find Assets/Scripts -name "*.cs" | wc -l)
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ Unity
    if [ ! -f "ProjectSettings/ProjectVersion.txt" ]; then
        error "–°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ Unity"
        exit 1
    fi
    
    count_files
    echo "–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: $TOTAL_FILES"
    
    check_ecs_systems
    check_ecs_components
    check_managers_pools
    check_jobs
    check_namespaces
    check_assembly_definitions
    check_unity_conflicts
    
    echo -e "\n${BLUE}üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:${NC}"
    echo "================================================"
    echo "–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: $TOTAL_FILES"
    echo -e "–û—à–∏–±–æ–∫: ${RED}$ERRORS${NC}"
    echo -e "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${YELLOW}$WARNINGS${NC}"
    
    if [ $ERRORS -eq 0 ] && [ $WARNINGS -eq 0 ]; then
        echo -e "\n${GREEN}üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!${NC}"
        exit 0
    elif [ $ERRORS -eq 0 ]; then
        echo -e "\n${YELLOW}‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –Ω–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ—Ç.${NC}"
        exit 0
    else
        echo -e "\n${RED}‚ùå –ù–∞–π–¥–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏!${NC}"
        exit 1
    fi
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
