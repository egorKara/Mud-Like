name: Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Запуск интеграционных тестов каждый день в 3:00 UTC
    - cron: '0 3 * * *'

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        unity-version: ['6000.2.2f1']
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Cache Unity Library
      uses: actions/cache@v3
      with:
        path: Library
        key: Library-${{ matrix.unity-version }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
        restore-keys: |
          Library-${{ matrix.unity-version }}-
          Library-
          
    - name: Setup Unity
      uses: game-ci/unity-setup@v2
      with:
        unity-version: ${{ matrix.unity-version }}
        unity-modules: linux-il2cpp
        unity-serial: ${{ secrets.UNITY_SERIAL }}
        
    - name: Run Integration Tests
      uses: game-ci/unity-test-runner@v2
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
        UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      with:
        unity-version: ${{ matrix.unity-version }}
        testMode: all
        testFilter: MudLike.Tests.Integration
        artifactsPath: artifacts
        githubToken: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload Integration Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: Integration test results
        path: artifacts
        
    - name: Comment Integration Test Results
      uses: game-ci/unity-test-results@v1
      if: always()
      with:
        artifactsPath: artifacts
        githubToken: ${{ secrets.GITHUB_TOKEN }}
        checkName: Integration Tests
        commentMode: create new
        commentTitle: 'Integration Test Results'
        
  performance-tests:
    runs-on: ubuntu-latest
    needs: integration-tests
    
    strategy:
      matrix:
        unity-version: ['6000.2.2f1']
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Cache Unity Library
      uses: actions/cache@v3
      with:
        path: Library
        key: Library-${{ matrix.unity-version }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
        restore-keys: |
          Library-${{ matrix.unity-version }}-
          Library-
          
    - name: Setup Unity
      uses: game-ci/unity-setup@v2
      with:
        unity-version: ${{ matrix.unity-version }}
        unity-modules: linux-il2cpp
        unity-serial: ${{ secrets.UNITY_SERIAL }}
        
    - name: Run Performance Tests
      uses: game-ci/unity-test-runner@v2
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
        UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      with:
        unity-version: ${{ matrix.unity-version }}
        testMode: all
        testFilter: MudLike.Tests.Performance
        artifactsPath: artifacts
        githubToken: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload Performance Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: Performance test results
        path: artifacts
        
    - name: Comment Performance Test Results
      uses: game-ci/unity-test-results@v1
      if: always()
      with:
        artifactsPath: artifacts
        githubToken: ${{ secrets.GITHUB_TOKEN }}
        checkName: Performance Tests
        commentMode: create new
        commentTitle: 'Performance Test Results'
