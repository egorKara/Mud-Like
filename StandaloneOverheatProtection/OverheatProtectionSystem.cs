using System;
using System.Diagnostics;
using System.Threading;
using System.Threading.Tasks;

namespace StandaloneOverheatProtection
{
    /// <summary>
    /// –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –ø–µ—Ä–µ–≥—Ä–µ–≤–∞
    /// –†–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç Unity
    /// </summary>
    public class OverheatProtectionSystem
    {
        private static readonly object _lock = new object();
        private static OverheatProtectionSystem _instance;
        
        public static OverheatProtectionSystem Instance
        {
            get
            {
                if (_instance == null)
                {
                    lock (_lock)
                    {
                        if (_instance == null)
                            _instance = new OverheatProtectionSystem();
                    }
                }
                return _instance;
            }
        }
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        private const float WARNING_TEMP = 70f;      // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        private const float CRITICAL_TEMP = 80f;     // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
        private const float EMERGENCY_TEMP = 90f;    // –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        private const int MONITOR_INTERVAL_MS = 2000;  // –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (2 —Å–µ–∫—É–Ω–¥—ã)
        private const int EMERGENCY_COOLDOWN_MS = 10000; // –í—Ä–µ–º—è –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è –≤ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ (10 —Å–µ–∫—É–Ω–¥)
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        private bool _isRunning = false;
        private bool _isEmergencyMode = false;
        private CancellationTokenSource _cancellationTokenSource;
        private Task _monitoringTask;
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        private int _warningCount = 0;
        private int _criticalCount = 0;
        private int _emergencyCount = 0;
        private DateTime _lastEmergencyTime = DateTime.MinValue;
        
        // –°–æ–±—ã—Ç–∏—è
        public event Action<float> OnTemperatureWarning;
        public event Action<float> OnTemperatureCritical;
        public event Action<float> OnTemperatureEmergency;
        public event Action<string> OnSystemAction;
        
        private OverheatProtectionSystem() { }
        
        /// <summary>
        /// –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –∑–∞—â–∏—Ç—ã –æ—Ç –ø–µ—Ä–µ–≥—Ä–µ–≤–∞
        /// </summary>
        public void Start()
        {
            if (_isRunning)
            {
                Console.WriteLine("[OverheatProtection] –°–∏—Å—Ç–µ–º–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞");
                return;
            }
            
            Console.WriteLine("[OverheatProtection] üö® –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∑–∞—â–∏—Ç—ã –æ—Ç –ø–µ—Ä–µ–≥—Ä–µ–≤–∞...");
            
            _isRunning = true;
            _cancellationTokenSource = new CancellationTokenSource();
            _monitoringTask = Task.Run(MonitorTemperature, _cancellationTokenSource.Token);
            
            Console.WriteLine("[OverheatProtection] ‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –ø–µ—Ä–µ–≥—Ä–µ–≤–∞ –∑–∞–ø—É—â–µ–Ω–∞");
        }
        
        /// <summary>
        /// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –∑–∞—â–∏—Ç—ã –æ—Ç –ø–µ—Ä–µ–≥—Ä–µ–≤–∞
        /// </summary>
        public void Stop()
        {
            if (!_isRunning)
            {
                Console.WriteLine("[OverheatProtection] –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞");
                return;
            }
            
            Console.WriteLine("[OverheatProtection] üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∑–∞—â–∏—Ç—ã –æ—Ç –ø–µ—Ä–µ–≥—Ä–µ–≤–∞...");
            
            _isRunning = false;
            _cancellationTokenSource?.Cancel();
            _monitoringTask?.Wait(5000); // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞–∫—Å–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥
            
            Console.WriteLine("[OverheatProtection] ‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –ø–µ—Ä–µ–≥—Ä–µ–≤–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
        }
        
        /// <summary>
        /// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        /// </summary>
        private async Task MonitorTemperature()
        {
            Console.WriteLine("[OverheatProtection] –ù–∞—á–∞–ª–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã...");
            
            while (_isRunning && !_cancellationTokenSource.Token.IsCancellationRequested)
            {
                try
                {
                    var systemInfo = SystemInfoReader.Instance.GetSystemInfo();
                    float temperature = systemInfo.CPUTemperature;
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º –º–µ—Ä—ã
                    CheckTemperature(temperature);
                    
                    // –ï—Å–ª–∏ –≤ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ, –∂–¥–µ–º –¥–æ–ª—å—à–µ
                    if (_isEmergencyMode)
                    {
                        await Task.Delay(EMERGENCY_COOLDOWN_MS, _cancellationTokenSource.Token);
                    }
                    else
                    {
                        await Task.Delay(MONITOR_INTERVAL_MS, _cancellationTokenSource.Token);
                    }
                }
                catch (OperationCanceledException)
                {
                    Console.WriteLine("[OverheatProtection] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–º–µ–Ω–µ–Ω");
                    break;
                }
                catch (Exception e)
                {
                    Console.WriteLine($"[OverheatProtection] –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e.Message}");
                    await Task.Delay(MONITOR_INTERVAL_MS, _cancellationTokenSource.Token);
                }
            }
        }
        
        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∏ –ø—Ä–∏–Ω—è—Ç—å –º–µ—Ä—ã
        /// </summary>
        private void CheckTemperature(float temperature)
        {
            if (temperature <= 0f)
            {
                Console.WriteLine("[OverheatProtection] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É CPU");
                return;
            }
            
            Console.WriteLine($"[OverheatProtection] –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU: {temperature:F1}¬∞C");
            
            if (temperature >= EMERGENCY_TEMP)
            {
                HandleEmergencyTemperature(temperature);
            }
            else if (temperature >= CRITICAL_TEMP)
            {
                HandleCriticalTemperature(temperature);
            }
            else if (temperature >= WARNING_TEMP)
            {
                HandleWarningTemperature(temperature);
            }
            else
            {
                // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –Ω–æ—Ä–º–µ
                if (_isEmergencyMode)
                {
                    Console.WriteLine("[OverheatProtection] üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–ª–∞—Å—å, –≤—ã—Ö–æ–¥ –∏–∑ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞");
                    _isEmergencyMode = false;
                }
            }
        }
        
        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        /// </summary>
        private void HandleWarningTemperature(float temperature)
        {
            _warningCount++;
            Console.WriteLine($"[OverheatProtection] ‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU {temperature:F1}¬∞C (—Å—á–µ—Ç—á–∏–∫: {_warningCount})");
            
            OnTemperatureWarning?.Invoke(temperature);
            
            // –ú—è–≥–∫–∏–µ –º–µ—Ä—ã
            TakeSoftMeasures();
        }
        
        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        /// </summary>
        private void HandleCriticalTemperature(float temperature)
        {
            _criticalCount++;
            Console.WriteLine($"[OverheatProtection] üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –¢–ï–ú–ü–ï–†–ê–¢–£–†–ê: {temperature:F1}¬∞C (—Å—á–µ—Ç—á–∏–∫: {_criticalCount})");
            
            OnTemperatureCritical?.Invoke(temperature);
            
            // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –º–µ—Ä—ã
            TakeAggressiveMeasures();
        }
        
        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        /// </summary>
        private void HandleEmergencyTemperature(float temperature)
        {
            _emergencyCount++;
            _lastEmergencyTime = DateTime.Now;
            _isEmergencyMode = true;
            
            Console.WriteLine($"[OverheatProtection] üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –¢–ï–ú–ü–ï–†–ê–¢–£–†–ê: {temperature:F1}¬∞C (—Å—á–µ—Ç—á–∏–∫: {_emergencyCount})");
            
            OnTemperatureEmergency?.Invoke(temperature);
            
            // –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –º–µ—Ä—ã
            TakeEmergencyMeasures();
        }
        
        /// <summary>
        /// –ú—è–≥–∫–∏–µ –º–µ—Ä—ã –∑–∞—â–∏—Ç—ã
        /// </summary>
        private void TakeSoftMeasures()
        {
            Console.WriteLine("[OverheatProtection] –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º—è–≥–∫–∏—Ö –º–µ—Ä –∑–∞—â–∏—Ç—ã...");
            
            // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            try
            {
                // –°–Ω–∏–∂–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç—è–∂–µ–ª—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                var processes = Process.GetProcesses();
                foreach (var process in processes)
                {
                    try
                    {
                        if (process.ProcessName.Contains("Unity") || 
                            process.ProcessName.Contains("Cursor") ||
                            process.ProcessName.Contains("code"))
                        {
                            if (process.PriorityClass != ProcessPriorityClass.BelowNormal)
                            {
                                process.PriorityClass = ProcessPriorityClass.BelowNormal;
                                Console.WriteLine($"[OverheatProtection] –°–Ω–∏–∂–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞: {process.ProcessName}");
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ü–µ—Å—Å–∞–º
                    }
                }
            }
            catch (Exception e)
            {
                Console.WriteLine($"[OverheatProtection] –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º—è–≥–∫–∏—Ö –º–µ—Ä: {e.Message}");
            }
            
            OnSystemAction?.Invoke("Soft measures applied");
        }
        
        /// <summary>
        /// –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –º–µ—Ä—ã –∑–∞—â–∏—Ç—ã
        /// </summary>
        private void TakeAggressiveMeasures()
        {
            Console.WriteLine("[OverheatProtection] –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö –º–µ—Ä –∑–∞—â–∏—Ç—ã...");
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
            GC.Collect();
            GC.WaitForPendingFinalizers();
            GC.Collect();
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            try
            {
                var currentProcess = Process.GetCurrentProcess();
                if (currentProcess.PriorityClass != ProcessPriorityClass.BelowNormal)
                {
                    currentProcess.PriorityClass = ProcessPriorityClass.BelowNormal;
                }
            }
            catch (Exception e)
            {
                Console.WriteLine($"[OverheatProtection] –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: {e.Message}");
            }
            
            OnSystemAction?.Invoke("Aggressive measures applied");
        }
        
        /// <summary>
        /// –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –º–µ—Ä—ã –∑–∞—â–∏—Ç—ã
        /// </summary>
        private void TakeEmergencyMeasures()
        {
            Console.WriteLine("[OverheatProtection] üö® –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –≠–ö–°–¢–†–ï–ù–ù–´–• –ú–ï–† –ó–ê–©–ò–¢–´!");
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞
            Console.WriteLine("[OverheatProtection] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –Ω–∞ 5 —Å–µ–∫—É–Ω–¥...");
            Thread.Sleep(5000);
            
            // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
            for (int i = 0; i < 3; i++)
            {
                GC.Collect();
                GC.WaitForPendingFinalizers();
            }
            
            // –°–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–æ –º–∏–Ω–∏–º—É–º–∞
            try
            {
                var currentProcess = Process.GetCurrentProcess();
                currentProcess.PriorityClass = ProcessPriorityClass.Idle;
            }
            catch (Exception e)
            {
                Console.WriteLine($"[OverheatProtection] –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: {e.Message}");
            }
            
            OnSystemAction?.Invoke("Emergency measures applied");
        }
        
        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
        /// </summary>
        public SystemStats GetStats()
        {
            return new SystemStats
            {
                IsRunning = _isRunning,
                IsEmergencyMode = _isEmergencyMode,
                WarningCount = _warningCount,
                CriticalCount = _criticalCount,
                EmergencyCount = _emergencyCount,
                LastEmergencyTime = _lastEmergencyTime
            };
        }
        
        /// <summary>
        /// –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        /// </summary>
        public void ResetStats()
        {
            _warningCount = 0;
            _criticalCount = 0;
            _emergencyCount = 0;
            _lastEmergencyTime = DateTime.MinValue;
            Console.WriteLine("[OverheatProtection] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞");
        }
    }
    
    /// <summary>
    /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∑–∞—â–∏—Ç—ã –æ—Ç –ø–µ—Ä–µ–≥—Ä–µ–≤–∞
    /// </summary>
    public struct SystemStats
    {
        public bool IsRunning;
        public bool IsEmergencyMode;
        public int WarningCount;
        public int CriticalCount;
        public int EmergencyCount;
        public DateTime LastEmergencyTime;
    }
}