using System;
using System.Threading;
using System.Threading.Tasks;

namespace StandaloneOverheatProtection
{
    /// <summary>
    /// –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞—â–∏—Ç—ã –æ—Ç –ø–µ—Ä–µ–≥—Ä–µ–≤–∞
    /// </summary>
    class Program
    {
        private static OverheatProtectionSystem _overheatSystem;
        private static bool _isRunning = true;
        
        static void Main(string[] args)
        {
            Console.WriteLine("üö® –ê–í–¢–û–ù–û–ú–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ó–ê–©–ò–¢–´ –û–¢ –ü–ï–†–ï–ì–†–ï–í–ê –ù–û–£–¢–ë–£–ö–ê üö®");
            Console.WriteLine("==================================================");
            Console.WriteLine();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
            _overheatSystem = OverheatProtectionSystem.Instance;
            
            // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
            _overheatSystem.OnTemperatureWarning += OnTemperatureWarning;
            _overheatSystem.OnTemperatureCritical += OnTemperatureCritical;
            _overheatSystem.OnTemperatureEmergency += OnTemperatureEmergency;
            _overheatSystem.OnSystemAction += OnSystemAction;
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç
            CheckSystemUtilities();
            
            // –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
            _overheatSystem.Start();
            
            // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            RunMainLoop();
            
            // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã
            _overheatSystem.Stop();
            
            Console.WriteLine("üëã –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –ø–µ—Ä–µ–≥—Ä–µ–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
        }
        
        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç
        /// </summary>
        private static void CheckSystemUtilities()
        {
            Console.WriteLine("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç...");
            
            var utilities = SystemInfoReader.Instance.GetAvailableUtilities();
            Console.WriteLine($"–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã: {utilities}");
            
            if (string.IsNullOrEmpty(utilities))
            {
                Console.WriteLine("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –°–∏—Å—Ç–µ–º–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.");
            }
            else
            {
                Console.WriteLine("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –Ω–∞–π–¥–µ–Ω—ã");
            }
            
            Console.WriteLine();
        }
        
        /// <summary>
        /// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        /// </summary>
        private static void RunMainLoop()
        {
            Console.WriteLine("üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π:");
            Console.WriteLine("  'q' - –í—ã—Ö–æ–¥");
            Console.WriteLine("  's' - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É");
            Console.WriteLine("  'r' - –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É");
            Console.WriteLine("  'i' - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ");
            Console.WriteLine("  'h' - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É");
            Console.WriteLine();
            
            while (_isRunning)
            {
                if (Console.KeyAvailable)
                {
                    var key = Console.ReadKey(true);
                    
                    switch (key.KeyChar)
                    {
                        case 'q':
                        case 'Q':
                            Console.WriteLine("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...");
                            _isRunning = false;
                            break;
                            
                        case 's':
                        case 'S':
                            ShowStats();
                            break;
                            
                        case 'r':
                        case 'R':
                            ResetStats();
                            break;
                            
                        case 'i':
                        case 'I':
                            ShowSystemInfo();
                            break;
                            
                        case 'h':
                        case 'H':
                            ShowHelp();
                            break;
                            
                        default:
                            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏
                            break;
                    }
                }
                
                Thread.Sleep(100); // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ CPU
            }
        }
        
        /// <summary>
        /// –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
        /// </summary>
        private static void ShowStats()
        {
            var stats = _overheatSystem.GetStats();
            
            Console.WriteLine();
            Console.WriteLine("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ –ó–ê–©–ò–¢–´ –û–¢ –ü–ï–†–ï–ì–†–ï–í–ê");
            Console.WriteLine("==========================================");
            Console.WriteLine($"–°—Ç–∞—Ç—É—Å: {(stats.IsRunning ? "üü¢ –ê–∫—Ç–∏–≤–Ω–∞" : "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")}");
            Console.WriteLine($"–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º: {(stats.IsEmergencyMode ? "üö® –î–ê" : "‚úÖ –ù–ï–¢")}");
            Console.WriteLine($"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {stats.WarningCount}");
            Console.WriteLine($"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã: {stats.CriticalCount}");
            Console.WriteLine($"–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã: {stats.EmergencyCount}");
            
            if (stats.LastEmergencyTime != DateTime.MinValue)
            {
                Console.WriteLine($"–ü–æ—Å–ª–µ–¥–Ω—è—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è: {stats.LastEmergencyTime:yyyy-MM-dd HH:mm:ss}");
            }
            else
            {
                Console.WriteLine("–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π –Ω–µ –±—ã–ª–æ");
            }
            
            Console.WriteLine();
        }
        
        /// <summary>
        /// –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        /// </summary>
        private static void ResetStats()
        {
            _overheatSystem.ResetStats();
            Console.WriteLine("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞");
        }
        
        /// <summary>
        /// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
        /// </summary>
        private static void ShowSystemInfo()
        {
            Console.WriteLine();
            Console.WriteLine("üíª –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï");
            Console.WriteLine("=======================");
            
            var systemInfo = SystemInfoReader.Instance.GetSystemInfo();
            
            Console.WriteLine($"CPU: {systemInfo.CPUModel}");
            Console.WriteLine($"–Ø–¥—Ä–∞: {systemInfo.CPUCores}");
            Console.WriteLine($"–ù–∞–≥—Ä—É–∑–∫–∞ CPU: {systemInfo.CPULoad:F1}%");
            Console.WriteLine($"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU: {systemInfo.CPUTemperature:F1}¬∞C");
            Console.WriteLine($"RAM: {systemInfo.UsedRAM / 1024 / 1024}MB / {systemInfo.TotalRAM / 1024 / 1024}MB ({systemInfo.RAMUsage:F1}%)");
            Console.WriteLine($"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã: {systemInfo.Uptime:F1} —á–∞—Å–æ–≤");
            Console.WriteLine($"–°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞: {systemInfo.LoadAverage:F2}");
            
            Console.WriteLine();
        }
        
        /// <summary>
        /// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
        /// </summary>
        private static void ShowHelp()
        {
            Console.WriteLine();
            Console.WriteLine("‚ùì –°–ü–†–ê–í–ö–ê –ü–û –°–ò–°–¢–ï–ú–ï –ó–ê–©–ò–¢–´ –û–¢ –ü–ï–†–ï–ì–†–ï–í–ê");
            Console.WriteLine("==========================================");
            Console.WriteLine("–≠—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É CPU –∏");
            Console.WriteLine("–ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–µ—Ä—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–≥—Ä–µ–≤–∞ –Ω–æ—É—Ç–±—É–∫–∞.");
            Console.WriteLine();
            Console.WriteLine("–£—Ä–æ–≤–Ω–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã:");
            Console.WriteLine("  ‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: 70¬∞C+ - –ú—è–≥–∫–∏–µ –º–µ—Ä—ã");
            Console.WriteLine("  üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è: 80¬∞C+ - –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –º–µ—Ä—ã");
            Console.WriteLine("  üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è: 90¬∞C+ - –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –º–µ—Ä—ã");
            Console.WriteLine();
            Console.WriteLine("–ú–µ—Ä—ã –∑–∞—â–∏—Ç—ã:");
            Console.WriteLine("  ‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤");
            Console.WriteLine("  ‚Ä¢ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞");
            Console.WriteLine("  ‚Ä¢ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—É–∑—ã –≤ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ");
            Console.WriteLine();
        }
        
        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ
        /// </summary>
        private static void OnTemperatureWarning(float temperature)
        {
            Console.WriteLine($"‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU {temperature:F1}¬∞C");
        }
        
        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        /// </summary>
        private static void OnTemperatureCritical(float temperature)
        {
            Console.WriteLine($"üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –¢–ï–ú–ü–ï–†–ê–¢–£–†–ê: {temperature:F1}¬∞C");
        }
        
        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        /// </summary>
        private static void OnTemperatureEmergency(float temperature)
        {
            Console.WriteLine($"üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –¢–ï–ú–ü–ï–†–ê–¢–£–†–ê: {temperature:F1}¬∞C");
        }
        
        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å–∏—Å—Ç–µ–º—ã
        /// </summary>
        private static void OnSystemAction(string action)
        {
            Console.WriteLine($"üîß –î–µ–π—Å—Ç–≤–∏–µ —Å–∏—Å—Ç–µ–º—ã: {action}");
        }
    }
}