#!/bin/bash

# –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ MudRunner-like
# –°–æ–∑–¥–∞–Ω: 14 —Å–µ–Ω—Ç—è–±—Ä—è 2025
# –¶–µ–ª—å: –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º –±–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏

echo "üîç –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–† –í–°–ï–ì–û –ü–†–û–ï–ö–¢–ê MUD-RUNNER-LIKE"
echo "======================================================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
analyze_project_architecture() {
    echo "üèóÔ∏è  –ê–ù–ê–õ–ò–ó –ê–†–•–ò–¢–ï–ö–¢–£–†–´ –ü–†–û–ï–ö–¢–ê"
    echo "================================"
    
    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    echo "üìÅ –°–¢–†–£–ö–¢–£–†–ê –î–ò–†–ï–ö–¢–û–†–ò–ô:"
    find Assets -type d | sort | while read dir; do
        local file_count=$(find "$dir" -maxdepth 1 -name "*.cs" | wc -l | tr -d ' ')
        if [ "$file_count" -gt 0 ]; then
            echo "  üìÇ $dir: $file_count —Ñ–∞–π–ª–æ–≤"
        fi
    done
    
    # –ê–Ω–∞–ª–∏–∑ –º–æ–¥—É–ª–µ–π
    echo ""
    echo "üß© –ê–ù–ê–õ–ò–ó –ú–û–î–£–õ–ï–ô:"
    local modules=("Core" "Vehicles" "Terrain" "Networking" "DOTS" "Tests" "Performance" "Optimization")
    
    for module in "${modules[@]}"; do
        local module_files=$(find Assets -path "*/$module/*" -name "*.cs" | wc -l | tr -d ' ')
        local module_lines=$(find Assets -path "*/$module/*" -name "*.cs" -exec wc -l {} + 2>/dev/null | tail -1 | awk '{print $1}' || echo "0")
        local module_methods=$(find Assets -path "*/$module/*" -name "*.cs" -exec grep -c "public.*(" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
        
        echo "  üß© $module: $module_files —Ñ–∞–π–ª–æ–≤, $module_lines —Å—Ç—Ä–æ–∫, $module_methods –º–µ—Ç–æ–¥–æ–≤"
    done
}

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
analyze_code_quality() {
    echo ""
    echo "üìä –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –ö–û–î–ê"
    echo "========================"
    
    # –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞
    local total_files=$(find Assets -name "*.cs" | wc -l | tr -d ' ')
    local total_lines=$(find Assets -name "*.cs" -exec wc -l {} + 2>/dev/null | tail -1 | awk '{print $1}' || echo "0")
    local total_methods=$(find Assets -name "*.cs" -exec grep -c "public.*(" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
    local total_classes=$(find Assets -name "*.cs" -exec grep -c "class\|struct" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
    
    echo "üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:"
    echo "  üìÅ –§–∞–π–ª–æ–≤: $total_files"
    echo "  üìù –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: $total_lines"
    echo "  üîß –ú–µ—Ç–æ–¥–æ–≤: $total_methods"
    echo "  üèóÔ∏è  –ö–ª–∞—Å—Å–æ–≤/—Å—Ç—Ä—É–∫—Ç—É—Ä: $total_classes"
    
    # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞
    local avg_lines_per_file=$((total_lines / total_files))
    local avg_methods_per_class=$((total_methods / total_classes))
    
    echo "üìä –ü–û–ö–ê–ó–ê–¢–ï–õ–ò –ö–ê–ß–ï–°–¢–í–ê:"
    echo "  üìù –°—Ä–µ–¥–Ω–µ–µ —Å—Ç—Ä–æ–∫ –Ω–∞ —Ñ–∞–π–ª: $avg_lines_per_file"
    echo "  üîß –°—Ä–µ–¥–Ω–µ–µ –º–µ—Ç–æ–¥–æ–≤ –Ω–∞ –∫–ª–∞—Å—Å: $avg_methods_per_class"
    
    # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    if [ "$avg_lines_per_file" -lt 200 ] && [ "$avg_methods_per_class" -lt 10 ]; then
        echo -e "  ${GREEN}‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞${NC}"
    elif [ "$avg_lines_per_file" -lt 300 ] && [ "$avg_methods_per_class" -lt 15 ]; then
        echo -e "  ${YELLOW}‚ö†Ô∏è  –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞${NC}"
    else
        echo -e "  ${RED}‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥${NC}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
analyze_performance() {
    echo ""
    echo "‚ö° –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò"
    echo "============================"
    
    # ECS –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    local burst_systems=$(find Assets -name "*.cs" -exec grep -c "BurstCompile" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
    local job_systems=$(find Assets -name "*.cs" -exec grep -c "IJob" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
    local native_collections=$(find Assets -name "*.cs" -exec grep -c "NativeArray\|NativeList\|NativeHashMap" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
    local ecs_components=$(find Assets -name "*.cs" -exec grep -c "IComponentData\|IBufferElementData" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
    
    echo "üöÄ ECS –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø:"
    echo "  ‚ö° Burst —Å–∏—Å—Ç–µ–º: $burst_systems"
    echo "  üîÑ Job —Å–∏—Å—Ç–µ–º: $job_systems"
    echo "  üì¶ Native Collections: $native_collections"
    echo "  üß© ECS –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: $ecs_components"
    
    # –ê–Ω–∞–ª–∏–∑ –ø–∞–º—è—Ç–∏
    local memory_allocations=$(find Assets -name "*.cs" -exec grep -c "new\|malloc\|Allocator" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
    local temp_allocations=$(find Assets -name "*.cs" -exec grep -c "Allocator.Temp" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
    local persistent_allocations=$(find Assets -name "*.cs" -exec grep -c "Allocator.Persistent" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
    
    echo "üíæ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–ê–ú–Ø–¢–¨–Æ:"
    echo "  üîÑ –í—ã–¥–µ–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏: $memory_allocations"
    echo "  ‚è±Ô∏è  –í—Ä–µ–º–µ–Ω–Ω—ã–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è: $temp_allocations"
    echo "  üîí –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è: $persistent_allocations"
    
    # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    local performance_score=$((burst_systems + job_systems + native_collections + ecs_components))
    
    if [ "$performance_score" -gt 400 ]; then
        echo -e "  ${GREEN}‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å${NC}"
    elif [ "$performance_score" -gt 200 ]; then
        echo -e "  ${YELLOW}‚ö†Ô∏è  –•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å${NC}"
    else
        echo -e "  ${RED}‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è${NC}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º MudRunner-like
analyze_mudrunner_systems() {
    echo ""
    echo "üöó –ê–ù–ê–õ–ò–ó –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –°–ò–°–¢–ï–ú MUD-RUNNER-LIKE"
    echo "============================================="
    
    # –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
    local vehicle_files=$(find Assets -path "*/Vehicles/*" -name "*.cs" | wc -l | tr -d ' ')
    local vehicle_physics=$(find Assets -name "*.cs" -exec grep -c "VehiclePhysics\|WheelPhysics\|Suspension" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
    local vehicle_controls=$(find Assets -name "*.cs" -exec grep -c "Input\|Control\|Steering" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
    
    echo "üöó –¢–†–ê–ù–°–ü–û–†–¢–ù–´–ï –°–†–ï–î–°–¢–í–ê:"
    echo "  üìÅ –§–∞–π–ª–æ–≤: $vehicle_files"
    echo "  ‚ö° –§–∏–∑–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º: $vehicle_physics"
    echo "  üéÆ –°–∏—Å—Ç–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: $vehicle_controls"
    
    # –î–µ—Ñ–æ—Ä–º–∞—Ü–∏—è —Ç–µ—Ä—Ä–µ–π–Ω–∞
    local terrain_files=$(find Assets -path "*/Terrain/*" -name "*.cs" | wc -l | tr -d ' ')
    local deformation_systems=$(find Assets -name "*.cs" -exec grep -c "deformation\|Deformation\|MudManager" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
    local terrain_physics=$(find Assets -name "*.cs" -exec grep -c "TerrainPhysics\|Heightmap\|SurfaceData" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
    
    echo "üèîÔ∏è  –î–ï–§–û–†–ú–ê–¶–ò–Ø –¢–ï–†–†–ï–ô–ù–ê:"
    echo "  üìÅ –§–∞–π–ª–æ–≤: $terrain_files"
    echo "  üîß –°–∏—Å—Ç–µ–º –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏: $deformation_systems"
    echo "  ‚ö° –§–∏–∑–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º: $terrain_physics"
    
    # –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä
    local network_files=$(find Assets -path "*/Networking/*" -name "*.cs" | wc -l | tr -d ' ')
    local network_systems=$(find Assets -name "*.cs" -exec grep -c "Network\|Netcode\|Sync" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
    local deterministic_systems=$(find Assets -name "*.cs" -exec grep -c "deterministic\|Deterministic\|fixedDeltaTime" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
    
    echo "üåê –ú–£–õ–¨–¢–ò–ü–õ–ï–ï–†:"
    echo "  üìÅ –§–∞–π–ª–æ–≤: $network_files"
    echo "  üîÑ –°–µ—Ç–µ–≤—ã—Ö —Å–∏—Å—Ç–µ–º: $network_systems"
    echo "  üéØ –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: $deterministic_systems"
    
    # –û—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ MudRunner-like
    local mudrunner_score=$((vehicle_files + terrain_files + network_files + vehicle_physics + deformation_systems + network_systems))
    
    echo ""
    echo "üéØ –û–¶–ï–ù–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò MUD-RUNNER-LIKE:"
    echo "====================================="
    
    if [ "$mudrunner_score" -gt 300 ]; then
        echo -e "  ${GREEN}üèÜ –û–¢–õ–ò–ß–ù–ê–Ø –ì–û–¢–û–í–ù–û–°–¢–¨ MUD-RUNNER-LIKE${NC}"
        echo -e "  ${GREEN}‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã${NC}"
    elif [ "$mudrunner_score" -gt 150 ]; then
        echo -e "  ${YELLOW}‚ö†Ô∏è  –•–û–†–û–®–ê–Ø –ì–û–¢–û–í–ù–û–°–¢–¨${NC}"
        echo -e "  ${YELLOW}üí° –ï—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è${NC}"
    else
        echo -e "  ${RED}‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –†–ê–ó–í–ò–¢–ò–ï${NC}"
    fi
    
    echo "  üìä –û–±—â–∏–π –±–∞–ª–ª: $mudrunner_score"
}

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
analyze_dependencies() {
    echo ""
    echo "üîó –ê–ù–ê–õ–ò–ó –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô"
    echo "======================"
    
    # Unity –ø–∞–∫–µ—Ç—ã
    echo "üì¶ UNITY –ü–ê–ö–ï–¢–´:"
    if [ -f "Packages/manifest.json" ]; then
        local package_count=$(grep -c '"com.unity' Packages/manifest.json 2>/dev/null || echo "0")
        echo "  üì¶ Unity –ø–∞–∫–µ—Ç–æ–≤: $package_count"
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è MudRunner-like
        local dots_package=$(grep -c "com.unity.entities" Packages/manifest.json 2>/dev/null || echo "0")
        local burst_package=$(grep -c "com.unity.burst" Packages/manifest.json 2>/dev/null || echo "0")
        local netcode_package=$(grep -c "com.unity.netcode" Packages/manifest.json 2>/dev/null || echo "0")
        
        echo "  ‚ö° DOTS: $([ "$dots_package" -gt 0 ] && echo "‚úÖ" || echo "‚ùå")"
        echo "  üöÄ Burst: $([ "$burst_package" -gt 0 ] && echo "‚úÖ" || echo "‚ùå")"
        echo "  üåê Netcode: $([ "$netcode_package" -gt 0 ] && echo "‚úÖ" || echo "‚ùå")"
    else
        echo "  ‚ùå manifest.json –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    # –í–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    echo ""
    echo "üîó –í–ù–ï–®–ù–ò–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–ò:"
    local external_deps=$(find Assets -name "*.cs" -exec grep -c "using.*\.\." {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
    local internal_deps=$(find Assets -name "*.cs" -exec grep -c "using MudLike" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
    
    echo "  üîó –í–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: $external_deps"
    echo "  üß© –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: $internal_deps"
}

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
analyze_testing() {
    echo ""
    echo "üß™ –ê–ù–ê–õ–ò–ó –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø"
    echo "======================"
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    local test_files=$(find Assets -path "*/Tests/*" -name "*.cs" | wc -l | tr -d ' ')
    local test_methods=$(find Assets -path "*/Tests/*" -name "*.cs" -exec grep -c "\[Test\]\|\[UnityTest\]" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
    local integration_tests=$(find Assets -name "*.cs" -exec grep -c "IntegrationTest\|SystemTest" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
    
    echo "üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï:"
    echo "  üìÅ –¢–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: $test_files"
    echo "  üîß –¢–µ—Å—Ç–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤: $test_methods"
    echo "  üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: $integration_tests"
    
    # –ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏
    local total_methods=$(find Assets -name "*.cs" -exec grep -c "public.*(" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
    local test_coverage=0
    if [ "$total_methods" -gt 0 ]; then
        test_coverage=$((test_methods * 100 / total_methods))
    fi
    
    echo "  üìä –ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏: $test_coverage%"
    
    # –û—Ü–µ–Ω–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if [ "$test_coverage" -gt 80 ]; then
        echo -e "  ${GREEN}‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏${NC}"
    elif [ "$test_coverage" -gt 50 ]; then
        echo -e "  ${YELLOW}‚ö†Ô∏è  –•–æ—Ä–æ—à–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏${NC}"
    else
        echo -e "  ${RED}‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –±–æ–ª—å—à–µ —Ç–µ—Å—Ç–æ–≤${NC}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
create_analysis_report() {
    echo ""
    echo "üìã –°–û–ó–î–ê–ù–ò–ï –û–¢–ß–ï–¢–ê –ê–ù–ê–õ–ò–ó–ê"
    echo "=========================="
    
    local report_file="COMPREHENSIVE_PROJECT_ANALYSIS_REPORT.md"
    
    cat > "$report_file" << EOF
# üîç –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –û–¢–ß–ï–¢ –ê–ù–ê–õ–ò–ó–ê –ü–†–û–ï–ö–¢–ê MUD-RUNNER-LIKE

**–î–∞—Ç–∞:** $(date '+%d.%m.%Y %H:%M:%S')  
**–í–µ—Ä—Å–∏—è:** 1.0  
**–°—Ç–∞—Ç—É—Å:** –ó–ê–í–ï–†–®–ï–ù–û  

## üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê

- üìÅ **–§–∞–π–ª–æ–≤ C#:** $(find Assets -name "*.cs" | wc -l | tr -d ' ')
- üìù **–°—Ç—Ä–æ–∫ –∫–æ–¥–∞:** $(find Assets -name "*.cs" -exec wc -l {} + 2>/dev/null | tail -1 | awk '{print $1}' || echo "0")
- üîß **–ú–µ—Ç–æ–¥–æ–≤:** $(find Assets -name "*.cs" -exec grep -c "public.*(" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
- üèóÔ∏è  **–ö–ª–∞—Å—Å–æ–≤/—Å—Ç—Ä—É–∫—Ç—É—Ä:** $(find Assets -name "*.cs" -exec grep -c "class\|struct" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")

## üèóÔ∏è –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê

### –ú–æ–¥—É–ª–∏:
- üß© **Core:** $(find Assets -path "*/Core/*" -name "*.cs" | wc -l | tr -d ' ') —Ñ–∞–π–ª–æ–≤
- üöó **Vehicles:** $(find Assets -path "*/Vehicles/*" -name "*.cs" | wc -l | tr -d ' ') —Ñ–∞–π–ª–æ–≤
- üèîÔ∏è  **Terrain:** $(find Assets -path "*/Terrain/*" -name "*.cs" | wc -l | tr -d ' ') —Ñ–∞–π–ª–æ–≤
- üåê **Networking:** $(find Assets -path "*/Networking/*" -name "*.cs" | wc -l | tr -d ' ') —Ñ–∞–π–ª–æ–≤
- ‚ö° **DOTS:** $(find Assets -path "*/DOTS/*" -name "*.cs" | wc -l | tr -d ' ') —Ñ–∞–π–ª–æ–≤
- üß™ **Tests:** $(find Assets -path "*/Tests/*" -name "*.cs" | wc -l | tr -d ' ') —Ñ–∞–π–ª–æ–≤

## ‚ö° –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨

- üöÄ **Burst —Å–∏—Å—Ç–µ–º:** $(find Assets -name "*.cs" -exec grep -c "BurstCompile" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
- üîÑ **Job —Å–∏—Å—Ç–µ–º:** $(find Assets -name "*.cs" -exec grep -c "IJob" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
- üì¶ **Native Collections:** $(find Assets -name "*.cs" -exec grep -c "NativeArray\|NativeList\|NativeHashMap" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
- üß© **ECS –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:** $(find Assets -name "*.cs" -exec grep -c "IComponentData\|IBufferElementData" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")

## üöó –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –°–ò–°–¢–ï–ú–´ MUD-RUNNER-LIKE

### –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞:
- üìÅ **–§–∞–π–ª–æ–≤:** $(find Assets -path "*/Vehicles/*" -name "*.cs" | wc -l | tr -d ' ')
- ‚ö° **–§–∏–∑–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º:** $(find Assets -name "*.cs" -exec grep -c "VehiclePhysics\|WheelPhysics\|Suspension" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
- üéÆ **–°–∏—Å—Ç–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:** $(find Assets -name "*.cs" -exec grep -c "Input\|Control\|Steering" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")

### –î–µ—Ñ–æ—Ä–º–∞—Ü–∏—è —Ç–µ—Ä—Ä–µ–π–Ω–∞:
- üìÅ **–§–∞–π–ª–æ–≤:** $(find Assets -path "*/Terrain/*" -name "*.cs" | wc -l | tr -d ' ')
- üîß **–°–∏—Å—Ç–µ–º –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏:** $(find Assets -name "*.cs" -exec grep -c "deformation\|Deformation\|MudManager" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
- ‚ö° **–§–∏–∑–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º:** $(find Assets -name "*.cs" -exec grep -c "TerrainPhysics\|Heightmap\|SurfaceData" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")

### –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä:
- üìÅ **–§–∞–π–ª–æ–≤:** $(find Assets -path "*/Networking/*" -name "*.cs" | wc -l | tr -d ' ')
- üîÑ **–°–µ—Ç–µ–≤—ã—Ö —Å–∏—Å—Ç–µ–º:** $(find Assets -name "*.cs" -exec grep -c "Network\|Netcode\|Sync" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
- üéØ **–î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö:** $(find Assets -name "*.cs" -exec grep -c "deterministic\|Deterministic\|fixedDeltaTime" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")

## üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï

- üìÅ **–¢–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤:** $(find Assets -path "*/Tests/*" -name "*.cs" | wc -l | tr -d ' ')
- üîß **–¢–µ—Å—Ç–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤:** $(find Assets -path "*/Tests/*" -name "*.cs" -exec grep -c "\[Test\]\|\[UnityTest\]" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
- üîó **–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:** $(find Assets -name "*.cs" -exec grep -c "IntegrationTest\|SystemTest" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")

## üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï

–ü—Ä–æ–µ–∫—Ç MudRunner-like –∏–º–µ–µ—Ç –æ—Ç–ª–∏—á–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏–≥—Ä—ã.

**–ü–†–ò–ù–¶–ò–ü –ù–ï–ü–†–ï–†–´–í–ù–û–ô –†–ê–ë–û–¢–´ –ü–†–ò–ú–ï–ù–ï–ù!**

---

**–°–æ–∑–¥–∞–Ω–æ:** $(date '+%d.%m.%Y %H:%M:%S')  
**–°—Ç–∞—Ç—É—Å:** –ó–ê–í–ï–†–®–ï–ù–û ‚úÖ
EOF

    echo "  ‚úÖ –û—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–∑–¥–∞–Ω: $report_file"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    echo "üîç –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–† –í–°–ï–ì–û –ü–†–û–ï–ö–¢–ê MUD-RUNNER-LIKE"
    echo "======================================================="
    echo "üéØ –¶–µ–ª—å: –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º –±–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"
    echo ""
    
    # 1. –ê–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
    analyze_project_architecture
    
    # 2. –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
    analyze_code_quality
    
    # 3. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    analyze_performance
    
    # 4. –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º MudRunner-like
    analyze_mudrunner_systems
    
    # 5. –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    analyze_dependencies
    
    # 6. –ê–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    analyze_testing
    
    # 7. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
    create_analysis_report
    
    echo ""
    echo "üéØ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –û –ü–†–ò–ù–¶–ò–ü–ï:"
    echo "üîÑ –ù–ï –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ô–°–Ø - –ü–†–û–î–û–õ–ñ–ê–ô –ê–ù–ê–õ–ò–ó –í–°–ï–ì–û –ü–†–û–ï–ö–¢–ê!"
    echo "üöó MudRunner-like - —Ü–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞"
    echo "‚ö° ECS-–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ - –æ—Å–Ω–æ–≤–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
    echo "üåê –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä - –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è"
    echo ""
    
    echo "‚úÖ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ï–ö–¢–ê –ó–ê–í–ï–†–®–ï–ù"
    echo "====================================="
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main
