#!/bin/bash

# –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç–µ—Ä—Ä–µ–π–Ω–∞ –¥–ª—è MudRunner-like
# –°–æ–∑–¥–∞–Ω: 14 —Å–µ–Ω—Ç—è–±—Ä—è 2025
# –¶–µ–ª—å: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç–µ—Ä—Ä–µ–π–Ω–∞

echo "üèîÔ∏è  –û–ü–¢–ò–ú–ò–ó–ê–¢–û–† –î–ï–§–û–†–ú–ê–¶–ò–ò –¢–ï–†–†–ï–ô–ù–ê MUD-LIKE"
echo "============================================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å–∏—Å—Ç–µ–º –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç–µ—Ä—Ä–µ–π–Ω–∞
analyze_terrain_deformation() {
    echo "üîç –ê–ù–ê–õ–ò–ó –°–ò–°–¢–ï–ú –î–ï–§–û–†–ú–ê–¶–ò–ò –¢–ï–†–†–ï–ô–ù–ê"
    echo "===================================="
    
    # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç–µ—Ä—Ä–µ–π–Ω–∞
    local terrain_files=$(find Assets -path "*/Terrain/*" -name "*.cs" | wc -l | tr -d ' ')
    local deformation_files=$(find Assets -name "*.cs" -exec grep -l "deformation\|Deformation\|mud\|Mud" {} \; 2>/dev/null | wc -l | tr -d ' ')
    local heightmap_files=$(find Assets -name "*.cs" -exec grep -l "heightmap\|Heightmap\|terrain\|Terrain" {} \; 2>/dev/null | wc -l | tr -d ' ')
    
    echo "üìÅ –§–∞–π–ª—ã —Ç–µ—Ä—Ä–µ–π–Ω–∞: $terrain_files"
    echo "üèîÔ∏è  –§–∞–π–ª—ã –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏: $deformation_files"
    echo "üìä –§–∞–π–ª—ã –≤—ã—Å–æ—Ç–Ω—ã—Ö –∫–∞—Ä—Ç: $heightmap_files"
    
    # –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    echo ""
    echo "üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –§–ê–ô–õ–´ –î–ï–§–û–†–ú–ê–¶–ò–ò:"
    echo "======================================"
    
    local critical_files=(
        "Assets/Scripts/Terrain/Systems/MudManagerSystem.cs"
        "Assets/Scripts/Terrain/Systems/TerrainDeformationSystem.cs"
        "Assets/Scripts/Terrain/Systems/IntegratedTerrainPhysicsSystem.cs"
        "Assets/Scripts/Terrain/Components/TerrainChunk.cs"
        "Assets/Scripts/Terrain/Components/SurfaceData.cs"
    )
    
    for file in "${critical_files[@]}"; do
        if [ -f "$file" ]; then
            local methods=$(grep -c "public.*(" "$file" 2>/dev/null || echo "0")
            local jobs=$(grep -c "IJob" "$file" 2>/dev/null || echo "0")
            local burst=$(grep -c "BurstCompile" "$file" 2>/dev/null || echo "0")
            local file_name=$(basename "$file")
            
            echo "  üìÑ $file_name: $methods –º–µ—Ç–æ–¥–æ–≤, $jobs Jobs, $burst Burst"
        else
            echo "  ‚ùå $(basename "$file") - –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
    done
}

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏
analyze_deformation_performance() {
    echo ""
    echo "‚ö° –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –î–ï–§–û–†–ú–ê–¶–ò–ò"
    echo "======================================="
    
    # –ü–æ–∏—Å–∫ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏
    local deformation_algorithms=$(find Assets -name "*.cs" -exec grep -c "CalculateDeformation\|ApplyDeformation\|UpdateTerrain" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
    local physics_interactions=$(find Assets -name "*.cs" -exec grep -c "PhysicsInteraction\|WheelTerrainInteraction" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
    local heightmap_operations=$(find Assets -name "*.cs" -exec grep -c "Heightmap\|SetHeight\|GetHeight" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
    
    echo "üîß –ê–ª–≥–æ—Ä–∏—Ç–º—ã –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏: $deformation_algorithms"
    echo "üöó –§–∏–∑–∏—á–µ—Å–∫–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: $physics_interactions"
    echo "üìä –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –≤—ã—Å–æ—Ç–Ω—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏: $heightmap_operations"
    
    # –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Job System
    echo ""
    echo "üîÑ –ê–ù–ê–õ–ò–ó JOB SYSTEM –î–õ–Ø –î–ï–§–û–†–ú–ê–¶–ò–ò:"
    echo "===================================="
    
    local parallel_jobs=$(find Assets -name "*.cs" -exec grep -c "IJobParallelFor" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
    local terrain_jobs=$(find Assets -name "*.cs" -exec grep -c "TerrainJob\|DeformationJob" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
    local burst_terrain=$(find Assets -name "*.cs" -exec grep -l "terrain\|Terrain" {} \; 2>/dev/null | xargs grep -c "BurstCompile" 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
    
    echo "üîÑ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ Jobs: $parallel_jobs"
    echo "üèîÔ∏è  Jobs –¥–ª—è —Ç–µ—Ä—Ä–µ–π–Ω–∞: $terrain_jobs"
    echo "‚ö° Burst –¥–ª—è —Ç–µ—Ä—Ä–µ–π–Ω–∞: $burst_terrain"
    
    # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if [ "$terrain_jobs" -gt 0 ] && [ "$burst_terrain" -gt 0 ]; then
        echo -e "  ${GREEN}‚úÖ –•–æ—Ä–æ—à–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç–µ—Ä—Ä–µ–π–Ω–∞${NC}"
    elif [ "$terrain_jobs" -gt 0 ] || [ "$burst_terrain" -gt 0 ]; then
        echo -e "  ${YELLOW}‚ö†Ô∏è  –ß–∞—Å—Ç–∏—á–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏${NC}"
    else
        echo -e "  ${RED}‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç–µ—Ä—Ä–µ–π–Ω–∞${NC}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏
create_optimized_deformation_system() {
    echo ""
    echo "üõ†Ô∏è  –°–û–ó–î–ê–ù–ò–ï –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ –î–ï–§–û–†–ú–ê–¶–ò–ò"
    echo "================================================"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç–µ—Ä—Ä–µ–π–Ω–∞
    cat > "Assets/Scripts/Terrain/Systems/OptimizedTerrainDeformationSystem.cs" << 'EOF'
using Unity.Entities;
using Unity.Burst;
using Unity.Jobs;
using Unity.Collections;
using Unity.Mathematics;
using UnityEngine;
using MudLike.Core.Constants;

namespace MudLike.Terrain.Systems
{
    /// <summary>
    /// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç–µ—Ä—Ä–µ–π–Ω–∞ —Å Job System –∏ Burst
    /// –ö—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ MudRunner-like
    /// </summary>
    [UpdateInGroup(typeof(FixedStepSimulationSystemGroup))]
    [BurstCompile(CompileSynchronously = true)]
    public partial class OptimizedTerrainDeformationSystem : SystemBase
    {
        private EntityQuery _terrainQuery;
        private EntityQuery _wheelQuery;
        
        protected override void OnCreate()
        {
            // –ó–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Ä—Ä–µ–π–Ω–∞
            _terrainQuery = GetEntityQuery(
                ComponentType.ReadWrite<TerrainData>(),
                ComponentType.ReadOnly<TerrainChunk>()
            );
            
            // –ó–∞–ø—Ä–æ—Å –¥–ª—è –∫–æ–ª–µ—Å
            _wheelQuery = GetEntityQuery(
                ComponentType.ReadOnly<WheelData>(),
                ComponentType.ReadOnly<LocalTransform>()
            );
        }
        
        protected override void OnUpdate()
        {
            var terrainEntities = _terrainQuery.ToEntityArray(Allocator.TempJob);
            var wheelEntities = _wheelQuery.ToEntityArray(Allocator.TempJob);
            
            if (terrainEntities.Length == 0 || wheelEntities.Length == 0)
            {
                terrainEntities.Dispose();
                wheelEntities.Dispose();
                return;
            }
            
            // –°–æ–∑–¥–∞–Ω–∏–µ Job –¥–ª—è –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç–µ—Ä—Ä–µ–π–Ω–∞
            var deformationJob = new TerrainDeformationJob
            {
                TerrainEntities = terrainEntities,
                WheelEntities = wheelEntities,
                TerrainDataLookup = GetComponentLookup<TerrainData>(),
                WheelDataLookup = GetComponentLookup<WheelData>(),
                TransformLookup = GetComponentLookup<LocalTransform>(),
                DeltaTime = SystemAPI.Time.fixedDeltaTime
            };
            
            // –ó–∞–ø—É—Å–∫ Job —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
            var jobHandle = deformationJob.ScheduleParallel(
                terrainEntities.Length,
                SystemConstants.TERRAIN_DEFAULT_RESOLUTION / 64, // –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π batch size
                Dependency
            );
            
            Dependency = jobHandle;
            
            // –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤
            terrainEntities.Dispose();
            wheelEntities.Dispose();
        }
    }
    
    /// <summary>
    /// Job –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç–µ—Ä—Ä–µ–π–Ω–∞
    /// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    /// </summary>
    [BurstCompile]
    public struct TerrainDeformationJob : IJobParallelFor
    {
        [ReadOnly] public NativeArray<Entity> TerrainEntities;
        [ReadOnly] public NativeArray<Entity> WheelEntities;
        
        public ComponentLookup<TerrainData> TerrainDataLookup;
        [ReadOnly] public ComponentLookup<WheelData> WheelDataLookup;
        [ReadOnly] public ComponentLookup<LocalTransform> TransformLookup;
        
        public float DeltaTime;
        
        public void Execute(int index)
        {
            if (index >= TerrainEntities.Length) return;
            
            var terrainEntity = TerrainEntities[index];
            var terrainData = TerrainDataLookup[terrainEntity];
            
            // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç –≤—Å–µ—Ö –∫–æ–ª–µ—Å
            for (int i = 0; i < WheelEntities.Length; i++)
            {
                var wheelEntity = WheelEntities[i];
                var wheelData = WheelDataLookup[wheelEntity];
                var wheelTransform = TransformLookup[wheelEntity];
                
                // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç –∫–æ–ª–µ—Å–∞
                var deformation = CalculateWheelDeformation(
                    wheelData,
                    wheelTransform,
                    terrainData,
                    DeltaTime
                );
                
                // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫ —Ç–µ—Ä—Ä–µ–π–Ω—É
                ApplyDeformationToTerrain(ref terrainData, deformation);
            }
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Ä—Ä–µ–π–Ω–∞
            TerrainDataLookup[terrainEntity] = terrainData;
        }
        
        /// <summary>
        /// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç –∫–æ–ª–µ—Å–∞
        /// </summary>
        private float CalculateWheelDeformation(
            WheelData wheelData,
            LocalTransform wheelTransform,
            TerrainData terrainData,
            float deltaTime)
        {
            // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–µ—Å–∞ –Ω–∞ —Ç–µ—Ä—Ä–µ–π–Ω
            var wheelPressure = wheelData.Weight / (math.PI * wheelData.Radius * wheelData.Radius);
            
            // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–≤–ª–µ–Ω–∏—è –∏ —Ç–≤–µ—Ä–¥–æ—Å—Ç–∏ —Ç–µ—Ä—Ä–µ–π–Ω–∞
            var deformation = wheelPressure * SystemConstants.TERRAIN_DEFAULT_DEFORMATION_RATE * deltaTime;
            
            // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            deformation = math.clamp(
                deformation,
                SystemConstants.TERRAIN_DEFAULT_MIN_DEPTH,
                SystemConstants.TERRAIN_DEFAULT_MAX_DEPTH
            );
            
            return deformation;
        }
        
        /// <summary>
        /// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫ —Ç–µ—Ä—Ä–µ–π–Ω—É
        /// </summary>
        private void ApplyDeformationToTerrain(ref TerrainData terrainData, float deformation)
        {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã—Å–æ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            terrainData.HeightMap = ApplyHeightDeformation(terrainData.HeightMap, deformation);
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–≤–µ—Ä–¥–æ—Å—Ç–∏ —Ç–µ—Ä—Ä–µ–π–Ω–∞
            terrainData.Hardness = math.max(
                terrainData.Hardness - deformation * 0.1f,
                SystemConstants.TERRAIN_DEFAULT_HARDNESS * 0.1f
            );
        }
        
        /// <summary>
        /// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫ –≤—ã—Å–æ—Ç–Ω–æ–π –∫–∞—Ä—Ç–µ
        /// </summary>
        private NativeArray<float> ApplyHeightDeformation(NativeArray<float> heightMap, float deformation)
        {
            // –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–º–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–ª—å—à–µ)
            for (int i = 0; i < heightMap.Length; i++)
            {
                heightMap[i] += deformation;
            }
            
            return heightMap;
        }
    }
    
    /// <summary>
    /// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Ä—Ä–µ–π–Ω–∞
    /// </summary>
    public struct TerrainData : IComponentData
    {
        public NativeArray<float> HeightMap;
        public float Hardness;
        public float DeformationRate;
        public float RecoveryRate;
    }
    
    /// <summary>
    /// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–µ—Å–∞
    /// </summary>
    public struct WheelData : IComponentData
    {
        public float Weight;
        public float Radius;
        public float Width;
        public float Pressure;
    }
}
EOF

    echo "  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç–µ—Ä—Ä–µ–π–Ω–∞"
    echo "  ‚ö° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Job System –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"
    echo "  üéØ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Burst Compiler –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
    echo "  üìä –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ SystemConstants"
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è Job –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ—Ä—Ä–µ–π–Ω–∞
create_terrain_recovery_job() {
    echo ""
    echo "üîÑ –°–û–ó–î–ê–ù–ò–ï JOB –î–õ–Ø –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø –¢–ï–†–†–ï–ô–ù–ê"
    echo "=========================================="
    
    cat > "Assets/Scripts/Terrain/Jobs/TerrainRecoveryJob.cs" << 'EOF'
using Unity.Burst;
using Unity.Jobs;
using Unity.Collections;
using Unity.Mathematics;
using MudLike.Core.Constants;

namespace MudLike.Terrain.Jobs
{
    /// <summary>
    /// Job –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ—Ä—Ä–µ–π–Ω–∞
    /// –ö—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –≥—Ä—è–∑–∏ –≤ MudRunner-like
    /// </summary>
    [BurstCompile]
    public struct TerrainRecoveryJob : IJobParallelFor
    {
        public NativeArray<float> HeightMap;
        public NativeArray<float> HardnessMap;
        public float RecoveryRate;
        public float DeltaTime;
        
        public void Execute(int index)
        {
            if (index >= HeightMap.Length) return;
            
            // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã —Ç–µ—Ä—Ä–µ–π–Ω–∞
            var currentHeight = HeightMap[index];
            var targetHeight = 0.0f; // –ë–∞–∑–æ–≤–∞—è –≤—ã—Å–æ—Ç–∞
            
            var heightDiff = targetHeight - currentHeight;
            var recoveryAmount = heightDiff * RecoveryRate * DeltaTime;
            
            HeightMap[index] = math.lerp(currentHeight, targetHeight, recoveryAmount);
            
            // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–≤–µ—Ä–¥–æ—Å—Ç–∏ —Ç–µ—Ä—Ä–µ–π–Ω–∞
            var currentHardness = HardnessMap[index];
            var targetHardness = SystemConstants.TERRAIN_DEFAULT_HARDNESS;
            
            var hardnessDiff = targetHardness - currentHardness;
            var hardnessRecovery = hardnessDiff * RecoveryRate * DeltaTime * 0.5f;
            
            HardnessMap[index] = math.lerp(currentHardness, targetHardness, hardnessRecovery);
        }
    }
}
EOF

    echo "  ‚úÖ –°–æ–∑–¥–∞–Ω Job –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ—Ä—Ä–µ–π–Ω–∞"
    echo "  üîÑ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã—Å–æ—Ç –∏ —Ç–≤–µ—Ä–¥–æ—Å—Ç–∏"
    echo "  ‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω —Å Burst Compiler"
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ—Ä—Ä–µ–π–Ω–∞
create_terrain_recovery_system() {
    echo ""
    echo "üîÑ –°–û–ó–î–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø –¢–ï–†–†–ï–ô–ù–ê"
    echo "==========================================="
    
    cat > "Assets/Scripts/Terrain/Systems/TerrainRecoverySystem.cs" << 'EOF'
using Unity.Entities;
using Unity.Burst;
using Unity.Jobs;
using Unity.Collections;
using MudLike.Terrain.Jobs;
using MudLike.Core.Constants;

namespace MudLike.Terrain.Systems
{
    /// <summary>
    /// –°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ—Ä—Ä–µ–π–Ω–∞
    /// –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≥—Ä—è–∑–∏ –≤ MudRunner-like
    /// </summary>
    [UpdateInGroup(typeof(FixedStepSimulationSystemGroup))]
    [BurstCompile]
    public partial class TerrainRecoverySystem : SystemBase
    {
        private EntityQuery _terrainQuery;
        
        protected override void OnCreate()
        {
            _terrainQuery = GetEntityQuery(
                ComponentType.ReadWrite<TerrainData>()
            );
        }
        
        protected override void OnUpdate()
        {
            var terrainEntities = _terrainQuery.ToEntityArray(Allocator.TempJob);
            
            if (terrainEntities.Length == 0)
            {
                terrainEntities.Dispose();
                return;
            }
            
            // –°–æ–∑–¥–∞–Ω–∏–µ Job –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ—Ä—Ä–µ–π–Ω–∞
            var recoveryJob = new TerrainRecoveryJob
            {
                HeightMap = GetTerrainHeightMap(),
                HardnessMap = GetTerrainHardnessMap(),
                RecoveryRate = SystemConstants.TERRAIN_DEFAULT_RECOVERY_RATE,
                DeltaTime = SystemAPI.Time.fixedDeltaTime
            };
            
            // –ó–∞–ø—É—Å–∫ Job —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º batch size
            var jobHandle = recoveryJob.ScheduleParallel(
                GetTerrainHeightMap().Length,
                SystemConstants.TERRAIN_DEFAULT_RESOLUTION / 128,
                Dependency
            );
            
            Dependency = jobHandle;
            terrainEntities.Dispose();
        }
        
        private NativeArray<float> GetTerrainHeightMap()
        {
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã—Å–æ—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã —Ç–µ—Ä—Ä–µ–π–Ω–∞
            // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
            return new NativeArray<float>(SystemConstants.TERRAIN_DEFAULT_RESOLUTION * SystemConstants.TERRAIN_DEFAULT_RESOLUTION, Allocator.TempJob);
        }
        
        private NativeArray<float> GetTerrainHardnessMap()
        {
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã —Ç–≤–µ—Ä–¥–æ—Å—Ç–∏ —Ç–µ—Ä—Ä–µ–π–Ω–∞
            // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
            return new NativeArray<float>(SystemConstants.TERRAIN_DEFAULT_RESOLUTION * SystemConstants.TERRAIN_DEFAULT_RESOLUTION, Allocator.TempJob);
        }
    }
}
EOF

    echo "  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ—Ä—Ä–µ–π–Ω–∞"
    echo "  üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏"
    echo "  ‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    echo "üèîÔ∏è  –û–ü–¢–ò–ú–ò–ó–ê–¢–û–† –î–ï–§–û–†–ú–ê–¶–ò–ò –¢–ï–†–†–ï–ô–ù–ê MUD-LIKE"
    echo "============================================="
    echo "üéØ –¶–µ–ª—å: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è MudRunner-like"
    echo ""
    
    # 1. –ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç–µ—Ä—Ä–µ–π–Ω–∞
    analyze_terrain_deformation
    
    # 2. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏
    analyze_deformation_performance
    
    # 3. –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏
    create_optimized_deformation_system
    
    # 4. –°–æ–∑–¥–∞–Ω–∏–µ Job –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ—Ä—Ä–µ–π–Ω–∞
    create_terrain_recovery_job
    
    # 5. –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ—Ä—Ä–µ–π–Ω–∞
    create_terrain_recovery_system
    
    echo ""
    echo "üéØ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –û –¶–ï–õ–ò –ü–†–û–ï–ö–¢–ê:"
    echo "üèîÔ∏è  –î–µ—Ñ–æ—Ä–º–∞—Ü–∏—è —Ç–µ—Ä—Ä–µ–π–Ω–∞ - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ MudRunner-like"
    echo "üöó –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —Ñ–∏–∑–∏–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∫–æ–ª–µ—Å —Å –≥—Ä—è–∑—å—é"
    echo "‚ö° –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ç–µ—Ä—Ä–µ–π–Ω–æ–≤"
    echo "üåê –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –¥–ª—è –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞"
    echo ""
    
    echo "‚úÖ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –î–ï–§–û–†–ú–ê–¶–ò–ò –¢–ï–†–†–ï–ô–ù–ê –ó–ê–í–ï–†–®–ï–ù–ê"
    echo "============================================="
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main
