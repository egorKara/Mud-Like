#!/bin/bash

# –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ Unity

echo "üéØ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê –ö–û–î–ê"
echo "====================================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

echo ""
echo "üîç –ü–†–û–í–ï–†–ö–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ê–°–ü–ï–ö–¢–û–í"
echo "================================"

# –°—á–µ—Ç—á–∏–∫–∏
total_checks=0
passed_checks=0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
check_item() {
    local description="$1"
    local command="$2"
    local critical="$3"
    
    total_checks=$((total_checks + 1))
    echo -n "üîç $description... "
    
    if eval "$command" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ –ü–†–û–ô–î–ï–ù–ê${NC}"
        passed_checks=$((passed_checks + 1))
        return 0
    else
        if [ "$critical" = "true" ]; then
            echo -e "${RED}‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê${NC}"
            return 1
        else
            echo -e "${YELLOW}‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï${NC}"
            return 2
        fi
    fi
}

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
check_item "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏" "tail -100 /home/egor/.config/unity3d/Editor.log | grep -E 'CS[0-9]+' | wc -l | grep -q '^0$'" "true"

# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–Ω—Ç–µ—Ä–∞
check_item "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–Ω—Ç–µ—Ä–∞" "[ -f 'Assets/Scripts/Vehicles/Systems/OptimizedVehicleMovementSystem.cs' ]" "true"

# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∏–º–µ–Ω
check_item "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∏–º–µ–Ω" "./check_duplicate_class_names.sh | grep -q '–í–°–ï –ò–ú–ï–ù–ê –ö–õ–ê–°–°–û–í –£–ù–ò–ö–ê–õ–¨–ù–´'" "true"

# 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–ª–æ–∫–∞—Ç–æ—Ä–æ–≤
check_item "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–ª–æ–∫–∞—Ç–æ—Ä–æ–≤ –ø–∞–º—è—Ç–∏" "grep -r '= new.*Allocator\.TempJob' Assets/Scripts --include='*.cs' | wc -l | grep -q '^0$'" "true"

# 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
critical_performance_issues=0

# –ü—Ä–æ–≤–µ—Ä—è–µ–º foreach –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö
if [ $(grep -r "foreach" Assets/Scripts/Vehicles/Systems --include="*.cs" | grep -v "OnDestroy" | wc -l) -gt 0 ]; then
    critical_performance_issues=$((critical_performance_issues + 1))
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º LINQ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö
if [ $(grep -r "\.Where(\|\.Select(\|\.First(\|\.Last(\|\.Any(\|\.All(" Assets/Scripts/Vehicles/Systems --include="*.cs" | wc -l) -gt 0 ]; then
    critical_performance_issues=$((critical_performance_issues + 1))
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º string concatenation –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö
if [ $(grep -r "string.*+" Assets/Scripts/Vehicles/Systems --include="*.cs" | wc -l) -gt 0 ]; then
    critical_performance_issues=$((critical_performance_issues + 1))
fi

check_item "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º" "[ $critical_performance_issues -eq 0 ]" "true"

echo ""
echo "üîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–†–û–í–ï–†–ö–ò"
echo "=========================="

# 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ API
check_item "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö API" "grep -r 'ComponentSystemBase\|JobComponentSystem' Assets/Scripts --include='*.cs' | wc -l | grep -q '^0$'" "false"

# 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ using
check_item "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö using" "[ $(grep -r 'using.*;' Assets/Scripts --include='*.cs' | wc -l) -gt 0 ]" "false"

# 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
todo_count=$(grep -r "TODO\|FIXME\|HACK" Assets/Scripts --include="*.cs" | wc -l)
check_item "–ü—Ä–æ–≤–µ—Ä–∫–∞ TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ ($todo_count –Ω–∞–π–¥–µ–Ω–æ)" "[ $todo_count -lt 50 ]" "false"

# 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–ª–∏–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
long_methods=$(find Assets/Scripts -name "*.cs" -exec awk 'BEGIN{count=0} /^[[:space:]]*[a-zA-Z_][a-zA-Z0-9_]*[[:space:]]*\([^)]*\)[[:space:]]*{[[:space:]]*$/{count=1; lines=0} count==1{lines++} /^[[:space:]]*}[[:space:]]*$/{if(count==1 && lines>50){print FILENAME":"NR":"lines" lines"}; count=0}' {} \; | wc -l)
check_item "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ ($long_methods –Ω–∞–π–¥–µ–Ω–æ)" "[ $long_methods -eq 0 ]" "false"

# 10. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–æ–∂–Ω—ã–µ —Ü–∏–∫–ª—ã
complex_loops=$(grep -r "for.*for\|while.*while" Assets/Scripts --include="*.cs" | wc -l)
check_item "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–∂–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤ ($complex_loops –Ω–∞–π–¥–µ–Ω–æ)" "[ $complex_loops -eq 0 ]" "false"

# 11. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞–≥–∏—á–µ—Å–∫–∏–µ —á–∏—Å–ª–∞
magic_numbers=$(grep -r "[^a-zA-Z_][0-9]\{3,\}[^a-zA-Z_0-9\.]" Assets/Scripts --include="*.cs" | grep -v "//" | wc -l)
check_item "–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–≥–∏—á–µ—Å–∫–∏—Ö —á–∏—Å–µ–ª ($magic_numbers –Ω–∞–π–¥–µ–Ω–æ)" "[ $magic_numbers -lt 20 ]" "false"

# 12. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –∫–æ–¥
duplicate_code=$(find Assets/Scripts -name "*.cs" -exec grep -l "void.*Update\|void.*Start\|void.*OnDestroy" {} \; | wc -l)
check_item "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ—Å—è –∫–æ–¥–∞" "[ $duplicate_code -gt 0 ]" "false"

# 13. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
undocumented_methods=$(grep -r "public.*(" Assets/Scripts --include="*.cs" | grep -v "///" | wc -l)
check_item "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –º–µ—Ç–æ–¥–æ–≤ ($undocumented_methods –±–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)" "[ $undocumented_methods -lt 100 ]" "false"

# 14. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ async/await
async_issues=$(grep -r "async.*void\|Task.*Result" Assets/Scripts --include="*.cs" | wc -l)
check_item "–ü—Ä–æ–≤–µ—Ä–∫–∞ async/await ($async_issues –ø—Ä–æ–±–ª–µ–º)" "[ $async_issues -eq 0 ]" "false"

# 15. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ IDisposable
disposable_issues=$(grep -r "IDisposable" Assets/Scripts --include="*.cs" | grep -v "Dispose()" | wc -l)
check_item "–ü—Ä–æ–≤–µ—Ä–∫–∞ IDisposable ($disposable_issues –ø—Ä–æ–±–ª–µ–º)" "[ $disposable_issues -lt 10 ]" "false"

echo ""
echo "üîç –ü–†–û–í–ï–†–ö–ê –ê–†–•–ò–¢–ï–ö–¢–£–†–´"
echo "======================="

# 16. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ECS
ecs_usage=$(grep -r "IComponentData\|ISystem\|IJobEntity" Assets/Scripts --include="*.cs" | wc -l)
check_item "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ECS ($ecs_usage –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤/—Å–∏—Å—Ç–µ–º)" "[ $ecs_usage -gt 50 ]" "false"

# 17. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Burst
burst_usage=$(grep -r "\[BurstCompile\]" Assets/Scripts --include="*.cs" | wc -l)
check_item "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Burst ($burst_usage –∞—Ç—Ä–∏–±—É—Ç–æ–≤)" "[ $burst_usage -gt 30 ]" "false"

# 18. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Job System
job_usage=$(grep -r "IJob\|IJobEntity\|IJobParallelFor" Assets/Scripts --include="*.cs" | wc -l)
check_item "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Job System ($job_usage jobs)" "[ $job_usage -gt 20 ]" "false"

echo ""
echo "üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´"
echo "====================="

echo -e "–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${BLUE}$total_checks${NC}"
echo -e "–ü—Ä–æ–π–¥–µ–Ω–æ: ${GREEN}$passed_checks${NC}"
echo -e "–ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: ${RED}$((total_checks - passed_checks))${NC}"

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
echo ""
echo "üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ï–ö–¢–ê"
echo "===================="

total_files=$(find Assets/Scripts -name "*.cs" | wc -l)
total_lines=$(find Assets/Scripts -name "*.cs" -exec wc -l {} + | tail -1 | awk '{print $1}')
total_components=$(grep -r "IComponentData" Assets/Scripts --include="*.cs" | wc -l)
total_systems=$(grep -r "SystemBase\|ISystem" Assets/Scripts --include="*.cs" | wc -l)
total_jobs=$(grep -r "IJob\|IJobEntity" Assets/Scripts --include="*.cs" | wc -l)

echo -e "–§–∞–π–ª–æ–≤ C#: ${CYAN}$total_files${NC}"
echo -e "–°—Ç—Ä–æ–∫ –∫–æ–¥–∞: ${CYAN}$total_lines${NC}"
echo -e "ECS –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${CYAN}$total_components${NC}"
echo -e "ECS —Å–∏—Å—Ç–µ–º: ${CYAN}$total_systems${NC}"
echo -e "Job —Å–∏—Å—Ç–µ–º: ${CYAN}$total_jobs${NC}"

echo ""
echo "üéØ –°–¢–ê–¢–£–° –ö–ê–ß–ï–°–¢–í–ê –ü–†–û–ï–ö–¢–ê"
echo "=========================="

if [ $passed_checks -eq $total_checks ]; then
    echo -e "${GREEN}üèÜ –ü–†–ï–í–û–°–•–û–î–ù–û–ï –ö–ê–ß–ï–°–¢–í–û –ö–û–î–ê${NC}"
    echo -e "${GREEN}‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã${NC}"
    echo -e "${GREEN}‚úÖ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É${NC}"
    echo -e "${GREEN}‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª—É—á—à–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º${NC}"
    echo -e "${GREEN}‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞${NC}"
    echo -e "${GREEN}‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ${NC}"
    echo -e "${GREEN}‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –≤ –ø–æ—Ä—è–¥–∫–µ${NC}"
    exit 0
elif [ $passed_checks -ge $((total_checks * 80 / 100)) ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  –•–û–†–û–®–ï–ï –ö–ê–ß–ï–°–¢–í–û –ö–û–î–ê${NC}"
    echo -e "${GREEN}‚úÖ –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ (${passed_checks}/$total_checks)${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  –ï—Å—Ç—å $((total_checks - passed_checks)) –ø—Ä–æ–±–ª–µ–º –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è${NC}"
    echo -e "${BLUE}üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ–±–ª–µ–º—ã${NC}"
    exit 0
else
    echo -e "${RED}‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –û–ë–ù–ê–†–£–ñ–ï–ù–´${NC}"
    echo -e "${RED}‚ùå $((total_checks - passed_checks)) –ø—Ä–æ–±–ª–µ–º —Ç—Ä–µ–±—É—é—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è${NC}"
    echo -e "${RED}‚ùå –ü—Ä–æ–µ–∫—Ç –ù–ï –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É${NC}"
    echo -e "${BLUE}üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º${NC}"
    exit 1
fi

