#!/bin/bash

# –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ MudRunner-like
# –°–æ–∑–¥–∞–Ω: 14 —Å–µ–Ω—Ç—è–±—Ä—è 2025
# –¶–µ–ª—å: –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏

echo "‚ö° –ü–†–û–î–í–ò–ù–£–¢–´–ô –û–ü–¢–ò–ú–ò–ó–ê–¢–û–† –í–°–ï–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í MUD-RUNNER-LIKE"
echo "==========================================================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ ECS –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
analyze_ecs_components() {
    echo "üß© –ê–ù–ê–õ–ò–ó ECS –ö–û–ú–ü–û–ù–ï–ù–¢–û–í"
    echo "========================="
    
    # –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    local component_data=$(find Assets -name "*.cs" -exec grep -c "IComponentData" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
    local buffer_elements=$(find Assets -name "*.cs" -exec grep -c "IBufferElementData" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
    local shared_components=$(find Assets -name "*.cs" -exec grep -c "ISharedComponentData" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
    
    echo "üì¶ –¢–ò–ü–´ –ö–û–ú–ü–û–ù–ï–ù–¢–û–í:"
    echo "  üß© ComponentData: $component_data"
    echo "  üìä BufferElementData: $buffer_elements"
    echo "  üîó SharedComponentData: $shared_components"
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –º–æ–¥—É–ª—è–º
    echo ""
    echo "üìÅ –ö–û–ú–ü–û–ù–ï–ù–¢–´ –ü–û –ú–û–î–£–õ–Ø–ú:"
    local modules=("Vehicles" "Terrain" "Networking" "Core" "Audio" "UI" "Effects")
    
    for module in "${modules[@]}"; do
        local module_components=$(find Assets -path "*/$module/*" -name "*.cs" -exec grep -c "IComponentData\|IBufferElementData" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
        if [ "$module_components" -gt 0 ]; then
            echo "  üß© $module: $module_components –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"
        fi
    done
    
    # –ê–Ω–∞–ª–∏–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    local optimized_components=$(find Assets -name "*.cs" -exec grep -c "BurstCompile\|[ReadOnly]\|[WriteOnly]" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
    local native_components=$(find Assets -name "*.cs" -exec grep -c "NativeArray\|NativeList" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
    
    echo ""
    echo "‚ö° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–û–í:"
    echo "  üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: $optimized_components"
    echo "  üì¶ Native Collections: $native_components"
    
    # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    local total_components=$((component_data + buffer_elements + shared_components))
    
    if [ "$total_components" -gt 50 ] && [ "$optimized_components" -gt 100 ]; then
        echo -e "  ${GREEN}‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ ECS –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤${NC}"
    elif [ "$total_components" -gt 30 ]; then
        echo -e "  ${YELLOW}‚ö†Ô∏è  –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ ECS –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤${NC}"
    else
        echo -e "  ${RED}‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ ECS –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤${NC}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
create_optimized_components() {
    echo ""
    echo "üõ†Ô∏è  –°–û–ó–î–ê–ù–ò–ï –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í"
    echo "========================================"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Ñ–∏–∑–∏–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞
    cat > "Assets/Scripts/Vehicles/Components/OptimizedVehiclePhysicsComponent.cs" << 'EOF'
using Unity.Entities;
using Unity.Mathematics;
using Unity.Burst;
using MudLike.Core.Constants;

namespace MudLike.Vehicles.Components
{
    /// <summary>
    /// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ñ–∏–∑–∏–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞
    /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Burst Compiler –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    /// </summary>
    [BurstCompile]
    public struct OptimizedVehiclePhysicsComponent : IComponentData
    {
        /// <summary>
        /// –ü–æ–∑–∏—Ü–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞
        /// </summary>
        public float3 Position;
        
        /// <summary>
        /// –°–∫–æ—Ä–æ—Å—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞
        /// </summary>
        public float3 Velocity;
        
        /// <summary>
        /// –£—Å–∫–æ—Ä–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞
        /// </summary>
        public float3 Acceleration;
        
        /// <summary>
        /// –ú–∞—Å—Å–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞
        /// </summary>
        public float Mass;
        
        /// <summary>
        /// –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç—Ä–µ–Ω–∏—è
        /// </summary>
        public float Friction;
        
        /// <summary>
        /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
        /// </summary>
        public float MaxSpeed;
        
        /// <summary>
        /// –°–∏–ª–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è
        /// </summary>
        public float EngineForce;
        
        /// <summary>
        /// –¢–æ—Ä–º–æ–∑–Ω–∞—è —Å–∏–ª–∞
        /// </summary>
        public float BrakeForce;
        
        /// <summary>
        /// –£–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –∫–æ–ª–µ—Å
        /// </summary>
        public float SteeringAngle;
        
        /// <summary>
        /// –†–∞–¥–∏—É—Å –ø–æ–≤–æ—Ä–æ—Ç–∞
        /// </summary>
        public float TurnRadius;
        
        /// <summary>
        /// –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        /// </summary>
        public float LastUpdateTime;
        
        /// <summary>
        /// –§–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        /// </summary>
        public bool IsActive;
        
        /// <summary>
        /// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        /// </summary>
        public OptimizedVehiclePhysicsComponent(float mass = SystemConstants.VEHICLE_DEFAULT_MASS)
        {
            Position = float3.zero;
            Velocity = float3.zero;
            Acceleration = float3.zero;
            Mass = mass;
            Friction = SystemConstants.VEHICLE_DEFAULT_FRICTION;
            MaxSpeed = SystemConstants.VEHICLE_DEFAULT_MAX_SPEED;
            EngineForce = 0.0f;
            BrakeForce = 0.0f;
            SteeringAngle = 0.0f;
            TurnRadius = SystemConstants.VEHICLE_DEFAULT_TURN_RADIUS;
            LastUpdateTime = 0.0f;
            IsActive = true;
        }
        
        /// <summary>
        /// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–∏–ª—ã –∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–º—É —Å—Ä–µ–¥—Å—Ç–≤—É
        /// </summary>
        [BurstCompile]
        public void ApplyForce(float3 force, float deltaTime)
        {
            if (!IsActive) return;
            
            // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —É—Å–∫–æ—Ä–µ–Ω–∏—è
            Acceleration = force / Mass;
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
            Velocity += Acceleration * deltaTime;
            
            // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
            Velocity = math.clamp(Velocity, -MaxSpeed, MaxSpeed);
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            Position += Velocity * deltaTime;
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            LastUpdateTime += deltaTime;
        }
        
        /// <summary>
        /// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–æ—Ä–º–æ–∂–µ–Ω–∏—è
        /// </summary>
        [BurstCompile]
        public void ApplyBraking(float deltaTime)
        {
            if (!IsActive) return;
            
            // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–æ—Ä–º–æ–∑–Ω–æ–π —Å–∏–ª—ã
            var brakeForce = -Velocity * BrakeForce;
            ApplyForce(brakeForce, deltaTime);
        }
        
        /// <summary>
        /// –ü–æ–≤–æ—Ä–æ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞
        /// </summary>
        [BurstCompile]
        public void ApplySteering(float steeringInput, float deltaTime)
        {
            if (!IsActive) return;
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–≥–ª–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞
            SteeringAngle = steeringInput * SystemConstants.VEHICLE_DEFAULT_MAX_STEERING_ANGLE;
            
            // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞–¥–∏—É—Å–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞
            TurnRadius = SystemConstants.VEHICLE_DEFAULT_WHEELBASE / math.tan(math.radians(SteeringAngle));
            
            // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ–≤–æ—Ä–æ—Ç–∞ –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏
            if (math.abs(Velocity.x) > SystemConstants.DETERMINISTIC_EPSILON)
            {
                var angularVelocity = Velocity.x / TurnRadius;
                Velocity.z += angularVelocity * deltaTime;
            }
        }
        
        /// <summary>
        /// –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞
        /// </summary>
        [BurstCompile]
        public void Reset()
        {
            Position = float3.zero;
            Velocity = float3.zero;
            Acceleration = float3.zero;
            EngineForce = 0.0f;
            BrakeForce = 0.0f;
            SteeringAngle = 0.0f;
            LastUpdateTime = 0.0f;
            IsActive = true;
        }
        
        /// <summary>
        /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–π —ç–Ω–µ—Ä–≥–∏–∏
        /// </summary>
        [BurstCompile]
        public float GetKineticEnergy()
        {
            return 0.5f * Mass * math.lengthsq(Velocity);
        }
        
        /// <summary>
        /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–ø—É–ª—å—Å–∞
        /// </summary>
        [BurstCompile]
        public float3 GetMomentum()
        {
            return Mass * Velocity;
        }
    }
}
EOF

    echo "  ‚úÖ –°–æ–∑–¥–∞–Ω –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ñ–∏–∑–∏–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç–µ—Ä—Ä–µ–π–Ω–∞
    cat > "Assets/Scripts/Terrain/Components/OptimizedTerrainDeformationComponent.cs" << 'EOF'
using Unity.Entities;
using Unity.Mathematics;
using Unity.Burst;
using Unity.Collections;
using MudLike.Core.Constants;

namespace MudLike.Terrain.Components
{
    /// <summary>
    /// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç–µ—Ä—Ä–µ–π–Ω–∞
    /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Burst Compiler –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    /// </summary>
    [BurstCompile]
    public struct OptimizedTerrainDeformationComponent : IComponentData
    {
        /// <summary>
        /// –ü–æ–∑–∏—Ü–∏—è —Ç–µ—Ä—Ä–µ–π–Ω–∞
        /// </summary>
        public float3 Position;
        
        /// <summary>
        /// –†–∞–∑–º–µ—Ä —Ç–µ—Ä—Ä–µ–π–Ω–∞
        /// </summary>
        public float3 Size;
        
        /// <summary>
        /// –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤—ã—Å–æ—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã
        /// </summary>
        public int Resolution;
        
        /// <summary>
        /// –í—ã—Å–æ—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞
        /// </summary>
        public NativeArray<float> HeightMap;
        
        /// <summary>
        /// –ö–∞—Ä—Ç–∞ —Ç–≤–µ—Ä–¥–æ—Å—Ç–∏
        /// </summary>
        public NativeArray<float> HardnessMap;
        
        /// <summary>
        /// –ö–∞—Ä—Ç–∞ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏
        /// </summary>
        public NativeArray<float> DeformationMap;
        
        /// <summary>
        /// –ë–∞–∑–æ–≤–∞—è –≤—ã—Å–æ—Ç–∞
        /// </summary>
        public float BaseHeight;
        
        /// <summary>
        /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏—è
        /// </summary>
        public float MaxDeformation;
        
        /// <summary>
        /// –°–∫–æ—Ä–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        /// </summary>
        public float RecoveryRate;
        
        /// <summary>
        /// –¢–≤–µ—Ä–¥–æ—Å—Ç—å —Ç–µ—Ä—Ä–µ–π–Ω–∞
        /// </summary>
        public float Hardness;
        
        /// <summary>
        /// –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        /// </summary>
        public float LastUpdateTime;
        
        /// <summary>
        /// –§–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        /// </summary>
        public bool IsActive;
        
        /// <summary>
        /// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        /// </summary>
        public OptimizedTerrainDeformationComponent(int resolution = SystemConstants.TERRAIN_DEFAULT_RESOLUTION)
        {
            Position = float3.zero;
            Size = new float3(100.0f, 10.0f, 100.0f);
            Resolution = resolution;
            HeightMap = new NativeArray<float>(resolution * resolution, Allocator.Persistent);
            HardnessMap = new NativeArray<float>(resolution * resolution, Allocator.Persistent);
            DeformationMap = new NativeArray<float>(resolution * resolution, Allocator.Persistent);
            BaseHeight = 0.0f;
            MaxDeformation = SystemConstants.TERRAIN_DEFAULT_MAX_DEPTH;
            RecoveryRate = SystemConstants.TERRAIN_DEFAULT_RECOVERY_RATE;
            Hardness = SystemConstants.TERRAIN_DEFAULT_HARDNESS;
            LastUpdateTime = 0.0f;
            IsActive = true;
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç
            InitializeMaps();
        }
        
        /// <summary>
        /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç —Ç–µ—Ä—Ä–µ–π–Ω–∞
        /// </summary>
        [BurstCompile]
        private void InitializeMaps()
        {
            for (int i = 0; i < HeightMap.Length; i++)
            {
                HeightMap[i] = BaseHeight;
                HardnessMap[i] = Hardness;
                DeformationMap[i] = 0.0f;
            }
        }
        
        /// <summary>
        /// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫ —Ç–µ—Ä—Ä–µ–π–Ω—É
        /// </summary>
        [BurstCompile]
        public void ApplyDeformation(float3 worldPosition, float pressure, float radius, float deltaTime)
        {
            if (!IsActive) return;
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–∏—Ä–æ–≤—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –ª–æ–∫–∞–ª—å–Ω—ã–µ
            var localPos = worldPosition - Position;
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü —Ç–µ—Ä—Ä–µ–π–Ω–∞
            if (localPos.x < -Size.x * 0.5f || localPos.x > Size.x * 0.5f ||
                localPos.z < -Size.z * 0.5f || localPos.z > Size.z * 0.5f)
            {
                return;
            }
            
            // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –≤ –∫–∞—Ä—Ç–µ
            var x = (int)((localPos.x + Size.x * 0.5f) / Size.x * Resolution);
            var z = (int)((localPos.z + Size.z * 0.5f) / Size.z * Resolution);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∏–Ω–¥–µ–∫—Å–æ–≤
            if (x < 0 || x >= Resolution || z < 0 || z >= Resolution)
            {
                return;
            }
            
            var index = z * Resolution + x;
            
            // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏
            var deformation = CalculateDeformation(pressure, radius, deltaTime);
            
            // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏
            HeightMap[index] += deformation;
            DeformationMap[index] += deformation;
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–≤–µ—Ä–¥–æ—Å—Ç–∏
            HardnessMap[index] = math.max(HardnessMap[index] - deformation * 0.1f, Hardness * 0.1f);
            
            // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏
            HeightMap[index] = math.clamp(HeightMap[index], BaseHeight - MaxDeformation, BaseHeight + MaxDeformation);
            DeformationMap[index] = math.clamp(DeformationMap[index], -MaxDeformation, MaxDeformation);
            
            LastUpdateTime += deltaTime;
        }
        
        /// <summary>
        /// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–≤–ª–µ–Ω–∏—è –∏ —Ä–∞–¥–∏—É—Å–∞
        /// </summary>
        [BurstCompile]
        private float CalculateDeformation(float pressure, float radius, float deltaTime)
        {
            // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–≤–ª–µ–Ω–∏—è
            var deformation = pressure * SystemConstants.TERRAIN_DEFAULT_DEFORMATION_RATE * deltaTime;
            
            // –£—á–µ—Ç —Ä–∞–¥–∏—É—Å–∞ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è
            deformation *= math.clamp(radius / SystemConstants.TERRAIN_DEFAULT_WHEEL_RADIUS, 0.1f, 1.0f);
            
            // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏
            return math.clamp(deformation, -MaxDeformation, MaxDeformation);
        }
        
        /// <summary>
        /// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç–µ—Ä—Ä–µ–π–Ω–∞
        /// </summary>
        [BurstCompile]
        public void RecoverDeformation(float deltaTime)
        {
            if (!IsActive) return;
            
            for (int i = 0; i < HeightMap.Length; i++)
            {
                // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã
                var heightDiff = BaseHeight - HeightMap[i];
                var heightRecovery = heightDiff * RecoveryRate * deltaTime;
                HeightMap[i] += heightRecovery;
                
                // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏
                var deformationRecovery = -DeformationMap[i] * RecoveryRate * deltaTime;
                DeformationMap[i] += deformationRecovery;
                
                // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–≤–µ—Ä–¥–æ—Å—Ç–∏
                var hardnessDiff = Hardness - HardnessMap[i];
                var hardnessRecovery = hardnessDiff * RecoveryRate * deltaTime * 0.5f;
                HardnessMap[i] += hardnessRecovery;
            }
            
            LastUpdateTime += deltaTime;
        }
        
        /// <summary>
        /// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã –≤ —Ç–æ—á–∫–µ
        /// </summary>
        [BurstCompile]
        public float GetHeightAt(float3 worldPosition)
        {
            if (!IsActive) return BaseHeight;
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–∏—Ä–æ–≤—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –ª–æ–∫–∞–ª—å–Ω—ã–µ
            var localPos = worldPosition - Position;
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü —Ç–µ—Ä—Ä–µ–π–Ω–∞
            if (localPos.x < -Size.x * 0.5f || localPos.x > Size.x * 0.5f ||
                localPos.z < -Size.z * 0.5f || localPos.z > Size.z * 0.5f)
            {
                return BaseHeight;
            }
            
            // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –≤ –∫–∞—Ä—Ç–µ
            var x = (int)((localPos.x + Size.x * 0.5f) / Size.x * Resolution);
            var z = (int)((localPos.z + Size.z * 0.5f) / Size.z * Resolution);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∏–Ω–¥–µ–∫—Å–æ–≤
            if (x < 0 || x >= Resolution || z < 0 || z >= Resolution)
            {
                return BaseHeight;
            }
            
            var index = z * Resolution + x;
            return HeightMap[index];
        }
        
        /// <summary>
        /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–≤–µ—Ä–¥–æ—Å—Ç–∏ –≤ —Ç–æ—á–∫–µ
        /// </summary>
        [BurstCompile]
        public float GetHardnessAt(float3 worldPosition)
        {
            if (!IsActive) return Hardness;
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–∏—Ä–æ–≤—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –ª–æ–∫–∞–ª—å–Ω—ã–µ
            var localPos = worldPosition - Position;
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü —Ç–µ—Ä—Ä–µ–π–Ω–∞
            if (localPos.x < -Size.x * 0.5f || localPos.x > Size.x * 0.5f ||
                localPos.z < -Size.z * 0.5f || localPos.z > Size.z * 0.5f)
            {
                return Hardness;
            }
            
            // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –≤ –∫–∞—Ä—Ç–µ
            var x = (int)((localPos.x + Size.x * 0.5f) / Size.x * Resolution);
            var z = (int)((localPos.z + Size.z * 0.5f) / Size.z * Resolution);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∏–Ω–¥–µ–∫—Å–æ–≤
            if (x < 0 || x >= Resolution || z < 0 || z >= Resolution)
            {
                return Hardness;
            }
            
            var index = z * Resolution + x;
            return HardnessMap[index];
        }
        
        /// <summary>
        /// –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ—Ä—Ä–µ–π–Ω–∞
        /// </summary>
        [BurstCompile]
        public void Reset()
        {
            InitializeMaps();
            LastUpdateTime = 0.0f;
            IsActive = true;
        }
        
        /// <summary>
        /// –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
        /// </summary>
        public void Dispose()
        {
            if (HeightMap.IsCreated) HeightMap.Dispose();
            if (HardnessMap.IsCreated) HardnessMap.Dispose();
            if (DeformationMap.IsCreated) DeformationMap.Dispose();
        }
    }
}
EOF

    echo "  ‚úÖ –°–æ–∑–¥–∞–Ω –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç–µ—Ä—Ä–µ–π–Ω–∞"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞
    cat > "Assets/Scripts/Networking/Components/OptimizedNetworkSyncComponent.cs" << 'EOF'
using Unity.Entities;
using Unity.Mathematics;
using Unity.Burst;
using Unity.NetCode;
using MudLike.Core.Constants;

namespace MudLike.Networking.Components
{
    /// <summary>
    /// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–µ—Ç–∏
    /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Burst Compiler –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    /// </summary>
    [BurstCompile]
    public struct OptimizedNetworkSyncComponent : IComponentData
    {
        /// <summary>
        /// ID —Å–µ—Ç–∏
        /// </summary>
        public int NetworkId;
        
        /// <summary>
        /// –ü–æ–∑–∏—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        /// </summary>
        public float3 Position;
        
        /// <summary>
        /// –°–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        /// </summary>
        public float3 Velocity;
        
        /// <summary>
        /// –í—Ä–∞—â–µ–Ω–∏–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        /// </summary>
        public quaternion Rotation;
        
        /// <summary>
        /// –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        /// </summary>
        public float LastSyncTime;
        
        /// <summary>
        /// –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        /// </summary>
        public float SyncInterval;
        
        /// <summary>
        /// –ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        /// </summary>
        public float SyncThreshold;
        
        /// <summary>
        /// –§–ª–∞–≥ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        /// </summary>
        public bool NeedsSync;
        
        /// <summary>
        /// –§–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        /// </summary>
        public bool IsActive;
        
        /// <summary>
        /// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        /// </summary>
        public OptimizedNetworkSyncComponent(int networkId = 0)
        {
            NetworkId = networkId;
            Position = float3.zero;
            Velocity = float3.zero;
            Rotation = quaternion.identity;
            LastSyncTime = 0.0f;
            SyncInterval = SystemConstants.NETWORK_DEFAULT_SEND_RATE;
            SyncThreshold = SystemConstants.DETERMINISTIC_EPSILON;
            NeedsSync = false;
            IsActive = true;
        }
        
        /// <summary>
        /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        /// </summary>
        [BurstCompile]
        public void UpdateState(float3 newPosition, float3 newVelocity, quaternion newRotation, float currentTime)
        {
            if (!IsActive) return;
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            var positionChanged = math.distance(Position, newPosition) > SyncThreshold;
            var velocityChanged = math.distance(Velocity, newVelocity) > SyncThreshold;
            var rotationChanged = math.distance(Rotation.value, newRotation.value) > SyncThreshold;
            var timeElapsed = currentTime - LastSyncTime > SyncInterval;
            
            if (positionChanged || velocityChanged || rotationChanged || timeElapsed)
            {
                Position = newPosition;
                Velocity = newVelocity;
                Rotation = newRotation;
                LastSyncTime = currentTime;
                NeedsSync = true;
            }
        }
        
        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        /// </summary>
        [BurstCompile]
        public bool ShouldSync(float currentTime)
        {
            if (!IsActive) return false;
            
            return NeedsSync || (currentTime - LastSyncTime) > SyncInterval;
        }
        
        /// <summary>
        /// –û—Ç–º–µ—Ç–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
        /// </summary>
        [BurstCompile]
        public void MarkSynced()
        {
            NeedsSync = false;
        }
        
        /// <summary>
        /// –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –∫ —Ü–µ–ª–µ–≤–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        /// </summary>
        [BurstCompile]
        public void InterpolateTo(OptimizedNetworkSyncComponent target, float factor)
        {
            if (!IsActive) return;
            
            Position = math.lerp(Position, target.Position, factor);
            Velocity = math.lerp(Velocity, target.Velocity, factor);
            Rotation = math.slerp(Rotation, target.Rotation, factor);
        }
        
        /// <summary>
        /// –≠–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        /// </summary>
        [BurstCompile]
        public void Extrapolate(float deltaTime)
        {
            if (!IsActive) return;
            
            Position += Velocity * deltaTime;
        }
        
        /// <summary>
        /// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        /// </summary>
        [BurstCompile]
        public NetworkSyncData GetSyncData()
        {
            return new NetworkSyncData
            {
                NetworkId = NetworkId,
                Position = Position,
                Velocity = Velocity,
                Rotation = Rotation,
                Timestamp = LastSyncTime
            };
        }
        
        /// <summary>
        /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–µ—Ç–∏
        /// </summary>
        [BurstCompile]
        public void SetSyncData(NetworkSyncData data, float currentTime)
        {
            if (!IsActive) return;
            
            Position = data.Position;
            Velocity = data.Velocity;
            Rotation = data.Rotation;
            LastSyncTime = currentTime;
            NeedsSync = false;
        }
        
        /// <summary>
        /// –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        /// </summary>
        [BurstCompile]
        public void Reset()
        {
            Position = float3.zero;
            Velocity = float3.zero;
            Rotation = quaternion.identity;
            LastSyncTime = 0.0f;
            NeedsSync = false;
            IsActive = true;
        }
    }
    
    /// <summary>
    /// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–µ—Ç–∏
    /// </summary>
    [BurstCompile]
    public struct NetworkSyncData
    {
        public int NetworkId;
        public float3 Position;
        public float3 Velocity;
        public quaternion Rotation;
        public float Timestamp;
    }
}
EOF

    echo "  ‚úÖ –°–æ–∑–¥–∞–Ω –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–µ—Ç–∏"
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
create_optimized_systems() {
    echo ""
    echo "üöÄ –°–û–ó–î–ê–ù–ò–ï –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–• –°–ò–°–¢–ï–ú"
    echo "=================================="
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    cat > "Assets/Scripts/Core/Systems/OptimizedComponentUpdateSystem.cs" << 'EOF'
using Unity.Entities;
using Unity.Burst;
using Unity.Jobs;
using Unity.Collections;
using Unity.Mathematics;
using MudLike.Core.Constants;

namespace MudLike.Core.Systems
{
    /// <summary>
    /// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Job System –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    /// </summary>
    [UpdateInGroup(typeof(FixedStepSimulationSystemGroup))]
    [BurstCompile(CompileSynchronously = true)]
    public partial class OptimizedComponentUpdateSystem : SystemBase
    {
        private EntityQuery _vehicleQuery;
        private EntityQuery _terrainQuery;
        private EntityQuery _networkQuery;
        
        protected override void OnCreate()
        {
            // –ó–∞–ø—Ä–æ—Å—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            _vehicleQuery = GetEntityQuery(
                ComponentType.ReadWrite<OptimizedVehiclePhysicsComponent>()
            );
            
            _terrainQuery = GetEntityQuery(
                ComponentType.ReadWrite<OptimizedTerrainDeformationComponent>()
            );
            
            _networkQuery = GetEntityQuery(
                ComponentType.ReadWrite<OptimizedNetworkSyncComponent>()
            );
        }
        
        protected override void OnUpdate()
        {
            var deltaTime = SystemAPI.Time.fixedDeltaTime;
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
            UpdateVehicles(deltaTime);
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ—Ä—Ä–µ–π–Ω–∞
            UpdateTerrain(deltaTime);
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            UpdateNetworkSync(deltaTime);
        }
        
        /// <summary>
        /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
        /// </summary>
        private void UpdateVehicles(float deltaTime)
        {
            var vehicleEntities = _vehicleQuery.ToEntityArray(Allocator.TempJob);
            
            if (vehicleEntities.Length == 0)
            {
                vehicleEntities.Dispose();
                return;
            }
            
            // –°–æ–∑–¥–∞–Ω–∏–µ Job –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
            var updateJob = new VehicleUpdateJob
            {
                VehicleEntities = vehicleEntities,
                VehiclePhysicsLookup = GetComponentLookup<OptimizedVehiclePhysicsComponent>(),
                DeltaTime = deltaTime
            };
            
            // –ó–∞–ø—É—Å–∫ Job —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
            var jobHandle = updateJob.ScheduleParallel(
                vehicleEntities.Length,
                SystemConstants.DETERMINISTIC_MAX_ITERATIONS / 8,
                Dependency
            );
            
            Dependency = jobHandle;
            vehicleEntities.Dispose();
        }
        
        /// <summary>
        /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ—Ä—Ä–µ–π–Ω–∞
        /// </summary>
        private void UpdateTerrain(float deltaTime)
        {
            var terrainEntities = _terrainQuery.ToEntityArray(Allocator.TempJob);
            
            if (terrainEntities.Length == 0)
            {
                terrainEntities.Dispose();
                return;
            }
            
            // –°–æ–∑–¥–∞–Ω–∏–µ Job –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ—Ä—Ä–µ–π–Ω–∞
            var updateJob = new TerrainUpdateJob
            {
                TerrainEntities = terrainEntities,
                TerrainDeformationLookup = GetComponentLookup<OptimizedTerrainDeformationComponent>(),
                DeltaTime = deltaTime
            };
            
            // –ó–∞–ø—É—Å–∫ Job —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
            var jobHandle = updateJob.ScheduleParallel(
                terrainEntities.Length,
                SystemConstants.DETERMINISTIC_MAX_ITERATIONS / 16,
                Dependency
            );
            
            Dependency = jobHandle;
            terrainEntities.Dispose();
        }
        
        /// <summary>
        /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        /// </summary>
        private void UpdateNetworkSync(float deltaTime)
        {
            var networkEntities = _networkQuery.ToEntityArray(Allocator.TempJob);
            
            if (networkEntities.Length == 0)
            {
                networkEntities.Dispose();
                return;
            }
            
            // –°–æ–∑–¥–∞–Ω–∏–µ Job –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ç–µ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            var updateJob = new NetworkSyncUpdateJob
            {
                NetworkEntities = networkEntities,
                NetworkSyncLookup = GetComponentLookup<OptimizedNetworkSyncComponent>(),
                DeltaTime = deltaTime,
                CurrentTime = SystemAPI.Time.ElapsedTime
            };
            
            // –ó–∞–ø—É—Å–∫ Job —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
            var jobHandle = updateJob.ScheduleParallel(
                networkEntities.Length,
                SystemConstants.DETERMINISTIC_MAX_ITERATIONS / 4,
                Dependency
            );
            
            Dependency = jobHandle;
            networkEntities.Dispose();
        }
    }
    
    /// <summary>
    /// Job –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
    /// </summary>
    [BurstCompile]
    public struct VehicleUpdateJob : IJobParallelFor
    {
        [ReadOnly] public NativeArray<Entity> VehicleEntities;
        
        public ComponentLookup<OptimizedVehiclePhysicsComponent> VehiclePhysicsLookup;
        
        public float DeltaTime;
        
        public void Execute(int index)
        {
            if (index >= VehicleEntities.Length) return;
            
            var vehicleEntity = VehicleEntities[index];
            var vehiclePhysics = VehiclePhysicsLookup[vehicleEntity];
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–∑–∏–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞
            if (vehiclePhysics.IsActive)
            {
                // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—è
                var frictionForce = -vehiclePhysics.Velocity * vehiclePhysics.Friction;
                vehiclePhysics.ApplyForce(frictionForce, DeltaTime);
                
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                VehiclePhysicsLookup[vehicleEntity] = vehiclePhysics;
            }
        }
    }
    
    /// <summary>
    /// Job –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ—Ä—Ä–µ–π–Ω–∞
    /// </summary>
    [BurstCompile]
    public struct TerrainUpdateJob : IJobParallelFor
    {
        [ReadOnly] public NativeArray<Entity> TerrainEntities;
        
        public ComponentLookup<OptimizedTerrainDeformationComponent> TerrainDeformationLookup;
        
        public float DeltaTime;
        
        public void Execute(int index)
        {
            if (index >= TerrainEntities.Length) return;
            
            var terrainEntity = TerrainEntities[index];
            var terrainDeformation = TerrainDeformationLookup[terrainEntity];
            
            // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç–µ—Ä—Ä–µ–π–Ω–∞
            if (terrainDeformation.IsActive)
            {
                terrainDeformation.RecoverDeformation(DeltaTime);
                TerrainDeformationLookup[terrainEntity] = terrainDeformation;
            }
        }
    }
    
    /// <summary>
    /// Job –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ç–µ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    /// </summary>
    [BurstCompile]
    public struct NetworkSyncUpdateJob : IJobParallelFor
    {
        [ReadOnly] public NativeArray<Entity> NetworkEntities;
        
        public ComponentLookup<OptimizedNetworkSyncComponent> NetworkSyncLookup;
        
        public float DeltaTime;
        public float CurrentTime;
        
        public void Execute(int index)
        {
            if (index >= NetworkEntities.Length) return;
            
            var networkEntity = NetworkEntities[index];
            var networkSync = NetworkSyncLookup[networkEntity];
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            if (networkSync.IsActive)
            {
                // –≠–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
                networkSync.Extrapolate(DeltaTime);
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                if (networkSync.ShouldSync(CurrentTime))
                {
                    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–µ—Ç–∏
                    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Ç–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
                }
                
                NetworkSyncLookup[networkEntity] = networkSync;
            }
        }
    }
}
EOF

    echo "  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    echo "‚ö° –ü–†–û–î–í–ò–ù–£–¢–´–ô –û–ü–¢–ò–ú–ò–ó–ê–¢–û–† –í–°–ï–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í MUD-RUNNER-LIKE"
    echo "==========================================================="
    echo "üéØ –¶–µ–ª—å: –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"
    echo ""
    
    # 1. –ê–Ω–∞–ª–∏–∑ ECS –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    analyze_ecs_components
    
    # 2. –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    create_optimized_components
    
    # 3. –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
    create_optimized_systems
    
    echo ""
    echo "üéØ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –û –ü–†–ò–ù–¶–ò–ü–ï:"
    echo "üîÑ –ù–ï –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ô–°–Ø - –ü–†–û–î–û–õ–ñ–ê–ô –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Æ –í–°–ï–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í!"
    echo "üß© ECS –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã - –æ—Å–Ω–æ–≤–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"
    echo "‚ö° Burst Compiler - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
    echo "üöÄ Job System - –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞"
    echo ""
    
    echo "‚úÖ –ü–†–û–î–í–ò–ù–£–¢–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–û–í –ó–ê–í–ï–†–®–ï–ù–ê"
    echo "==============================================="
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main
