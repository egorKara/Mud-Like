#!/bin/bash

# –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –¥–µ—Ç–µ—Ä–º–∏–Ω–∏–∑–º–∞ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞ –¥–ª—è MudRunner-like
# –°–æ–∑–¥–∞–Ω: 14 —Å–µ–Ω—Ç—è–±—Ä—è 2025
# –¶–µ–ª—å: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –¥–ª—è –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞

echo "üåê –û–ü–¢–ò–ú–ò–ó–ê–¢–û–† –î–ï–¢–ï–†–ú–ò–ù–ò–ó–ú–ê –ú–£–õ–¨–¢–ò–ü–õ–ï–ï–†–ê MUD-LIKE"
echo "================================================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
analyze_network_systems() {
    echo "üîç –ê–ù–ê–õ–ò–ó –ú–£–õ–¨–¢–ò–ü–õ–ï–ï–†–ù–´–• –°–ò–°–¢–ï–ú"
    echo "==============================="
    
    # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞
    local network_files=$(find Assets -path "*/Networking/*" -name "*.cs" | wc -l | tr -d ' ')
    local sync_files=$(find Assets -name "*.cs" -exec grep -l "sync\|Sync\|network\|Network" {} \; 2>/dev/null | wc -l | tr -d ' ')
    local deterministic_files=$(find Assets -name "*.cs" -exec grep -l "deterministic\|Deterministic" {} \; 2>/dev/null | wc -l | tr -d ' ')
    
    echo "üìÅ –§–∞–π–ª—ã –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞: $network_files"
    echo "üîÑ –§–∞–π–ª—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $sync_files"
    echo "üéØ –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: $deterministic_files"
    
    # –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞
    echo ""
    echo "üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –§–ê–ô–õ–´ –ú–£–õ–¨–¢–ò–ü–õ–ï–ï–†–ê:"
    echo "======================================="
    
    local critical_files=(
        "Assets/Scripts/Networking/NetworkManagerSystem.cs"
        "Assets/Scripts/Networking/LagCompensationSystem.cs"
        "Assets/Scripts/Networking/InputValidationSystem.cs"
        "Assets/Scripts/Networking/NetworkId.cs"
        "Assets/Scripts/Networking/NetworkManagerData.cs"
    )
    
    for file in "${critical_files[@]}"; do
        if [ -f "$file" ]; then
            local methods=$(grep -c "public.*(" "$file" 2>/dev/null || echo "0")
            local deterministic=$(grep -c "deterministic\|Deterministic\|fixedDeltaTime" "$file" 2>/dev/null || echo "0")
            local network=$(grep -c "Network\|network\|Netcode" "$file" 2>/dev/null || echo "0")
            local file_name=$(basename "$file")
            
            echo "  üìÑ $file_name: $methods –º–µ—Ç–æ–¥–æ–≤, $deterministic –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö, $network —Å–µ—Ç–µ–≤—ã—Ö"
        else
            echo "  ‚ùå $(basename "$file") - –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
    done
}

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏–∑–º–∞
analyze_determinism() {
    echo ""
    echo "üéØ –ê–ù–ê–õ–ò–ó –î–ï–¢–ï–†–ú–ò–ù–ò–ó–ú–ê"
    echo "======================"
    
    # –ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    local fixed_time=$(find Assets -name "*.cs" -exec grep -c "fixedDeltaTime\|Time.fixedDeltaTime" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
    local delta_time=$(find Assets -name "*.cs" -exec grep -c "Time.deltaTime" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
    local system_api_time=$(find Assets -name "*.cs" -exec grep -c "SystemAPI.Time" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
    
    echo "‚è∞ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã:"
    echo "  üéØ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: $fixed_time"
    echo "  ‚ö†Ô∏è  –û–±—ã—á–Ω–æ–µ –≤—Ä–µ–º—è: $delta_time"
    echo "  ‚úÖ SystemAPI.Time: $system_api_time"
    
    # –ü–æ–∏—Å–∫ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
    local math_operations=$(find Assets -name "*.cs" -exec grep -c "Unity.Mathematics\|math\." {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
    local deterministic_math=$(find Assets -name "*.cs" -exec grep -c "deterministic\|Deterministic" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
    
    echo "üßÆ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:"
    echo "  üìä Unity.Mathematics: $math_operations"
    echo "  üéØ –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: $deterministic_math"
    
    # –û—Ü–µ–Ω–∫–∞ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏–∑–º–∞
    if [ "$fixed_time" -gt "$delta_time" ] && [ "$system_api_time" -gt 0 ]; then
        echo -e "  ${GREEN}‚úÖ –•–æ—Ä–æ—à–∏–π –¥–µ—Ç–µ—Ä–º–∏–Ω–∏–∑–º${NC}"
    else
        echo -e "  ${RED}‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏–∑–º–∞${NC}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞
create_deterministic_network_system() {
    echo ""
    echo "üåê –°–û–ó–î–ê–ù–ò–ï –î–ï–¢–ï–†–ú–ò–ù–ò–†–û–í–ê–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ –ú–£–õ–¨–¢–ò–ü–õ–ï–ï–†–ê"
    echo "================================================="
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞
    cat > "Assets/Scripts/Networking/DeterministicNetworkSystem.cs" << 'EOF'
using Unity.Entities;
using Unity.Burst;
using Unity.Jobs;
using Unity.Collections;
using Unity.Mathematics;
using Unity.NetCode;
using MudLike.Core.Constants;

namespace MudLike.Networking.Systems
{
    /// <summary>
    /// –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞ –¥–ª—è MudRunner-like
    /// –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–∞–º–∏
    /// </summary>
    [UpdateInGroup(typeof(FixedStepSimulationSystemGroup))]
    [BurstCompile(CompileSynchronously = true)]
    public partial class DeterministicNetworkSystem : SystemBase
    {
        private EntityQuery _vehicleQuery;
        private EntityQuery _terrainQuery;
        
        protected override void OnCreate()
        {
            // –ó–∞–ø—Ä–æ—Å –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
            _vehicleQuery = GetEntityQuery(
                ComponentType.ReadWrite<VehicleState>(),
                ComponentType.ReadOnly<NetworkId>()
            );
            
            // –ó–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Ä—Ä–µ–π–Ω–∞
            _terrainQuery = GetEntityQuery(
                ComponentType.ReadWrite<TerrainState>(),
                ComponentType.ReadOnly<NetworkId>()
            );
        }
        
        protected override void OnUpdate()
        {
            var deltaTime = SystemAPI.Time.fixedDeltaTime; // –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
            SyncVehicleStates(deltaTime);
            
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–µ—Ä—Ä–µ–π–Ω–∞
            SyncTerrainStates(deltaTime);
        }
        
        /// <summary>
        /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
        /// </summary>
        private void SyncVehicleStates(float deltaTime)
        {
            var vehicleEntities = _vehicleQuery.ToEntityArray(Allocator.TempJob);
            
            if (vehicleEntities.Length == 0)
            {
                vehicleEntities.Dispose();
                return;
            }
            
            // –°–æ–∑–¥–∞–Ω–∏–µ Job –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
            var syncJob = new VehicleSyncJob
            {
                VehicleEntities = vehicleEntities,
                VehicleStateLookup = GetComponentLookup<VehicleState>(),
                NetworkIdLookup = GetComponentLookup<NetworkId>(),
                DeltaTime = deltaTime,
                NetworkSendRate = SystemConstants.NETWORK_DEFAULT_SEND_RATE
            };
            
            // –ó–∞–ø—É—Å–∫ Job —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
            var jobHandle = syncJob.ScheduleParallel(
                vehicleEntities.Length,
                SystemConstants.DETERMINISTIC_MAX_ITERATIONS / 8,
                Dependency
            );
            
            Dependency = jobHandle;
            vehicleEntities.Dispose();
        }
        
        /// <summary>
        /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ—Ä—Ä–µ–π–Ω–∞
        /// </summary>
        private void SyncTerrainStates(float deltaTime)
        {
            var terrainEntities = _terrainQuery.ToEntityArray(Allocator.TempJob);
            
            if (terrainEntities.Length == 0)
            {
                terrainEntities.Dispose();
                return;
            }
            
            // –°–æ–∑–¥–∞–Ω–∏–µ Job –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–µ—Ä—Ä–µ–π–Ω–∞
            var syncJob = new TerrainSyncJob
            {
                TerrainEntities = terrainEntities,
                TerrainStateLookup = GetComponentLookup<TerrainState>(),
                NetworkIdLookup = GetComponentLookup<NetworkId>(),
                DeltaTime = deltaTime,
                NetworkSendRate = SystemConstants.NETWORK_DEFAULT_SEND_RATE
            };
            
            // –ó–∞–ø—É—Å–∫ Job —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
            var jobHandle = syncJob.ScheduleParallel(
                terrainEntities.Length,
                SystemConstants.DETERMINISTIC_MAX_ITERATIONS / 16,
                Dependency
            );
            
            Dependency = jobHandle;
            terrainEntities.Dispose();
        }
    }
    
    /// <summary>
    /// Job –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
    /// </summary>
    [BurstCompile]
    public struct VehicleSyncJob : IJobParallelFor
    {
        [ReadOnly] public NativeArray<Entity> VehicleEntities;
        
        public ComponentLookup<VehicleState> VehicleStateLookup;
        [ReadOnly] public ComponentLookup<NetworkId> NetworkIdLookup;
        
        public float DeltaTime;
        public float NetworkSendRate;
        
        public void Execute(int index)
        {
            if (index >= VehicleEntities.Length) return;
            
            var vehicleEntity = VehicleEntities[index];
            var vehicleState = VehicleStateLookup[vehicleEntity];
            
            // –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            vehicleState = UpdateVehicleStateDeterministic(vehicleState, DeltaTime);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            if (ShouldSync(vehicleState, NetworkSendRate))
            {
                // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ —Å–µ—Ç–∏
                SendVehicleState(vehicleEntity, vehicleState);
            }
            
            VehicleStateLookup[vehicleEntity] = vehicleState;
        }
        
        /// <summary>
        /// –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞
        /// </summary>
        private VehicleState UpdateVehicleStateDeterministic(VehicleState state, float deltaTime)
        {
            // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏
            var acceleration = state.Force / SystemConstants.VEHICLE_DEFAULT_MASS;
            state.Velocity += acceleration * deltaTime;
            state.Position += state.Velocity * deltaTime;
            
            // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
            var maxSpeed = SystemConstants.VEHICLE_DEFAULT_MAX_SPEED;
            state.Velocity = math.clamp(state.Velocity, -maxSpeed, maxSpeed);
            
            return state;
        }
        
        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        /// </summary>
        private bool ShouldSync(VehicleState state, float sendRate)
        {
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
            var threshold = SystemConstants.DETERMINISTIC_EPSILON;
            return math.abs(state.Velocity.x) > threshold || 
                   math.abs(state.Velocity.y) > threshold || 
                   math.abs(state.Velocity.z) > threshold;
        }
        
        /// <summary>
        /// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞
        /// </summary>
        private void SendVehicleState(Entity entity, VehicleState state)
        {
            // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ —Å–µ—Ç–∏
            // –ó–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ Netcode for Entities
        }
    }
    
    /// <summary>
    /// Job –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–µ—Ä—Ä–µ–π–Ω–∞
    /// </summary>
    [BurstCompile]
    public struct TerrainSyncJob : IJobParallelFor
    {
        [ReadOnly] public NativeArray<Entity> TerrainEntities;
        
        public ComponentLookup<TerrainState> TerrainStateLookup;
        [ReadOnly] public ComponentLookup<NetworkId> NetworkIdLookup;
        
        public float DeltaTime;
        public float NetworkSendRate;
        
        public void Execute(int index)
        {
            if (index >= TerrainEntities.Length) return;
            
            var terrainEntity = TerrainEntities[index];
            var terrainState = TerrainStateLookup[terrainEntity];
            
            // –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ—Ä—Ä–µ–π–Ω–∞
            terrainState = UpdateTerrainStateDeterministic(terrainState, DeltaTime);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            if (ShouldSync(terrainState, NetworkSendRate))
            {
                // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ —Å–µ—Ç–∏
                SendTerrainState(terrainEntity, terrainState);
            }
            
            TerrainStateLookup[terrainEntity] = terrainState;
        }
        
        /// <summary>
        /// –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ—Ä—Ä–µ–π–Ω–∞
        /// </summary>
        private TerrainState UpdateTerrainStateDeterministic(TerrainState state, float deltaTime)
        {
            // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏
            var recoveryRate = SystemConstants.TERRAIN_DEFAULT_RECOVERY_RATE;
            state.Deformation = math.lerp(state.Deformation, 0.0f, recoveryRate * deltaTime);
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–≤–µ—Ä–¥–æ—Å—Ç–∏
            state.Hardness = math.lerp(state.Hardness, SystemConstants.TERRAIN_DEFAULT_HARDNESS, recoveryRate * deltaTime * 0.5f);
            
            return state;
        }
        
        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–µ—Ä—Ä–µ–π–Ω–∞
        /// </summary>
        private bool ShouldSync(TerrainState state, float sendRate)
        {
            var threshold = SystemConstants.DETERMINISTIC_EPSILON;
            return math.abs(state.Deformation) > threshold || 
                   math.abs(state.Hardness - SystemConstants.TERRAIN_DEFAULT_HARDNESS) > threshold;
        }
        
        /// <summary>
        /// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ—Ä—Ä–µ–π–Ω–∞
        /// </summary>
        private void SendTerrainState(Entity entity, TerrainState state)
        {
            // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ —Å–µ—Ç–∏
            // –ó–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ Netcode for Entities
        }
    }
    
    /// <summary>
    /// –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    /// </summary>
    public struct VehicleState : IComponentData
    {
        public float3 Position;
        public float3 Velocity;
        public float3 Force;
        public quaternion Rotation;
        public float LastSyncTime;
    }
    
    /// <summary>
    /// –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Ä—Ä–µ–π–Ω–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    /// </summary>
    public struct TerrainState : IComponentData
    {
        public float Deformation;
        public float Hardness;
        public float3 Position;
        public float LastSyncTime;
    }
}
EOF

    echo "  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞"
    echo "  üéØ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏–∑–º–∞"
    echo "  ‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å Burst Compiler"
    echo "  üåê –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –∏ —Ç–µ—Ä—Ä–µ–π–Ω–∞"
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –∑–∞–¥–µ—Ä–∂–µ–∫
create_lag_compensation_system() {
    echo ""
    echo "‚è±Ô∏è  –°–û–ó–î–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ö–û–ú–ü–ï–ù–°–ê–¶–ò–ò –ó–ê–î–ï–†–ñ–ï–ö"
    echo "========================================"
    
    cat > "Assets/Scripts/Networking/LagCompensationSystem.cs" << 'EOF'
using Unity.Entities;
using Unity.Burst;
using Unity.Jobs;
using Unity.Collections;
using Unity.Mathematics;
using MudLike.Core.Constants;

namespace MudLike.Networking.Systems
{
    /// <summary>
    /// –°–∏—Å—Ç–µ–º–∞ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –∑–∞–¥–µ—Ä–∂–µ–∫ –¥–ª—è MudRunner-like
    /// –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—É—é –∏–≥—Ä—É –≤ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–µ
    /// </summary>
    [UpdateInGroup(typeof(FixedStepSimulationSystemGroup))]
    [BurstCompile(CompileSynchronously = true)]
    public partial class LagCompensationSystem : SystemBase
    {
        private EntityQuery _playerQuery;
        private NativeHashMap<int, float> _clientLatencies;
        
        protected override void OnCreate()
        {
            _playerQuery = GetEntityQuery(
                ComponentType.ReadWrite<PlayerState>(),
                ComponentType.ReadOnly<NetworkId>()
            );
            
            _clientLatencies = new NativeHashMap<int, float>(
                SystemConstants.MAX_NETWORK_CONNECTIONS,
                Allocator.Persistent
            );
        }
        
        protected override void OnDestroy()
        {
            if (_clientLatencies.IsCreated)
            {
                _clientLatencies.Dispose();
            }
        }
        
        protected override void OnUpdate()
        {
            var deltaTime = SystemAPI.Time.fixedDeltaTime; // –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–µ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
            UpdateClientLatencies(deltaTime);
            
            // –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–µ–∫
            CompensateForLag(deltaTime);
        }
        
        /// <summary>
        /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–µ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
        /// </summary>
        private void UpdateClientLatencies(float deltaTime)
        {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–µ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∏–Ω–≥–∞
            // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–µ–∫
        }
        
        /// <summary>
        /// –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–µ–∫
        /// </summary>
        private void CompensateForLag(float deltaTime)
        {
            var playerEntities = _playerQuery.ToEntityArray(Allocator.TempJob);
            
            if (playerEntities.Length == 0)
            {
                playerEntities.Dispose();
                return;
            }
            
            // –°–æ–∑–¥–∞–Ω–∏–µ Job –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –∑–∞–¥–µ—Ä–∂–µ–∫
            var compensationJob = new LagCompensationJob
            {
                PlayerEntities = playerEntities,
                PlayerStateLookup = GetComponentLookup<PlayerState>(),
                NetworkIdLookup = GetComponentLookup<NetworkId>(),
                ClientLatencies = _clientLatencies,
                DeltaTime = deltaTime,
                CompensationTime = SystemConstants.NETWORK_DEFAULT_LAG_COMPENSATION
            };
            
            // –ó–∞–ø—É—Å–∫ Job —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
            var jobHandle = compensationJob.ScheduleParallel(
                playerEntities.Length,
                SystemConstants.DETERMINISTIC_MAX_ITERATIONS / 4,
                Dependency
            );
            
            Dependency = jobHandle;
            playerEntities.Dispose();
        }
    }
    
    /// <summary>
    /// Job –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –∑–∞–¥–µ—Ä–∂–µ–∫
    /// </summary>
    [BurstCompile]
    public struct LagCompensationJob : IJobParallelFor
    {
        [ReadOnly] public NativeArray<Entity> PlayerEntities;
        
        public ComponentLookup<PlayerState> PlayerStateLookup;
        [ReadOnly] public ComponentLookup<NetworkId> NetworkIdLookup;
        [ReadOnly] public NativeHashMap<int, float> ClientLatencies;
        
        public float DeltaTime;
        public float CompensationTime;
        
        public void Execute(int index)
        {
            if (index >= PlayerEntities.Length) return;
            
            var playerEntity = PlayerEntities[index];
            var playerState = PlayerStateLookup[playerEntity];
            var networkId = NetworkIdLookup[playerEntity];
            
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
            if (ClientLatencies.TryGetValue(networkId.Value, out float latency))
            {
                // –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
                playerState = CompensatePlayerState(playerState, latency);
            }
            
            PlayerStateLookup[playerEntity] = playerState;
        }
        
        /// <summary>
        /// –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–∞
        /// </summary>
        private PlayerState CompensatePlayerState(PlayerState state, float latency)
        {
            // –û—Ç–∫–∞—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ –≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏
            var compensationFactor = math.clamp(latency / CompensationTime, 0.0f, 1.0f);
            
            // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –∫ –ø–æ–∑–∏—Ü–∏–∏ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
            state.Position -= state.Velocity * latency * compensationFactor;
            
            return state;
        }
    }
    
    /// <summary>
    /// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –∑–∞–¥–µ—Ä–∂–µ–∫
    /// </summary>
    public struct PlayerState : IComponentData
    {
        public float3 Position;
        public float3 Velocity;
        public quaternion Rotation;
        public float LastUpdateTime;
        public int ClientId;
    }
}
EOF

    echo "  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –∑–∞–¥–µ—Ä–∂–µ–∫"
    echo "  ‚è±Ô∏è  –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–µ–∫"
    echo "  üéØ –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–∞—è –∏–≥—Ä–∞ –≤ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–µ"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    echo "üåê –û–ü–¢–ò–ú–ò–ó–ê–¢–û–† –î–ï–¢–ï–†–ú–ò–ù–ò–ó–ú–ê –ú–£–õ–¨–¢–ò–ü–õ–ï–ï–†–ê MUD-LIKE"
    echo "================================================="
    echo "üéØ –¶–µ–ª—å: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –¥–ª—è –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞"
    echo ""
    
    # 1. –ê–Ω–∞–ª–∏–∑ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
    analyze_network_systems
    
    # 2. –ê–Ω–∞–ª–∏–∑ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏–∑–º–∞
    analyze_determinism
    
    # 3. –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞
    create_deterministic_network_system
    
    # 4. –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –∑–∞–¥–µ—Ä–∂–µ–∫
    create_lag_compensation_system
    
    echo ""
    echo "üéØ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –û –¶–ï–õ–ò –ü–†–û–ï–ö–¢–ê:"
    echo "üåê –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ MudRunner-like"
    echo "üéØ –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è - –æ—Å–Ω–æ–≤–∞ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–π –∏–≥—Ä—ã"
    echo "‚ö° –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"
    echo "üöó –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–∏–∑–∏–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤"
    echo ""
    
    echo "‚úÖ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –î–ï–¢–ï–†–ú–ò–ù–ò–ó–ú–ê –ú–£–õ–¨–¢–ò–ü–õ–ï–ï–†–ê –ó–ê–í–ï–†–®–ï–ù–ê"
    echo "=================================================="
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main
