using Unity.Entities;
using Unity.Mathematics;
using Unity.Transforms;
using UnityEngine;
using MudLike.Vehicles.Components;
using MudLike.Core.Components;
#if UNITY_EDITOR
using UnityEditor;
#endif

namespace MudLike.Examples
{
    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—É—é —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ü–µ–Ω—É —Å –ö–†–ê–ó–æ–º –¥–ª—è –µ–∑–¥—ã –ø–æ –ø—Ä–æ—Å—Ç–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏
    /// </summary>
    public class KrazTestScene : MonoBehaviour
    {
        [Header("üöó –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ö–†–ê–ó–∞")]
        [Tooltip("–ü—Ä–µ—Ñ–∞–± –ö–†–ê–ó–∞")]
        public GameObject krazPrefab;
        
        [Tooltip("–ü–æ–∑–∏—Ü–∏—è —Å–ø–∞–≤–Ω–∞ –ö–†–ê–ó–∞")]
        public Vector3 spawnPosition = new Vector3(0, 2, 0);
        
        [Tooltip("–ü–æ–≤–æ—Ä–æ—Ç –ö–†–ê–ó–∞ –ø—Ä–∏ —Å–ø–∞–≤–Ω–µ")]
        public Vector3 spawnRotation = Vector3.zero;
        
        [Header("üåç –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Ä—Ä–µ–π–Ω–∞")]
        [Tooltip("–†–∞–∑–º–µ—Ä —Ç–µ—Ä—Ä–µ–π–Ω–∞")]
        public Vector2 terrainSize = new Vector2(100, 100);
        
        [Tooltip("–í—ã—Å–æ—Ç–∞ —Ç–µ—Ä—Ä–µ–π–Ω–∞")]
        public float terrainHeight = 1f;
        
        [Tooltip("–ú–∞—Ç–µ—Ä–∏–∞–ª —Ç–µ—Ä—Ä–µ–π–Ω–∞")]
        public Material terrainMaterial;
        
        [Header("üì∑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã")]
        [Tooltip("–°–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ –ö–†–ê–ó–æ–º")]
        public bool followKraz = true;
        
        [Tooltip("–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∫–∞–º–µ—Ä—ã –æ—Ç –ö–†–ê–ó–∞")]
        public float cameraDistance = 15f;
        
        [Tooltip("–í—ã—Å–æ—Ç–∞ –∫–∞–º–µ—Ä—ã")]
        public float cameraHeight = 8f;
        
        [Tooltip("–°–∫–æ—Ä–æ—Å—Ç—å —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∫–∞–º–µ—Ä—ã")]
        public float cameraSpeed = 5f;
        
        private GameObject _krazInstance;
        private Camera _camera;
        private Transform _cameraTarget;
        
        /// <summary>
        /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ü–µ–Ω—ã
        /// </summary>
        void Start()
        {
            CreateTestScene();
        }
        
        /// <summary>
        /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
        /// </summary>
        void Update()
        {
            if (followKraz && _krazInstance != null && _camera != null)
            {
                UpdateCamera();
            }
        }
        
        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ü–µ–Ω—É
        /// </summary>
        private void CreateTestScene()
        {
            Debug.Log("üöó –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ü–µ–Ω—ã —Å –ö–†–ê–ó–æ–º...");
            
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Ä—Ä–µ–π–Ω
            CreateTerrain();
            
            // –°–æ–∑–¥–∞–µ–º –ö–†–ê–ó
            CreateKraz();
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—É
            SetupCamera();
            
            // –°–æ–∑–¥–∞–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–µ
            SetupLighting();
            
            Debug.Log("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ü–µ–Ω–∞ —Å –ö–†–ê–ó–æ–º —Å–æ–∑–¥–∞–Ω–∞!");
        }
        
        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Ä—Ä–µ–π–Ω
        /// </summary>
        private void CreateTerrain()
        {
            // –°–æ–∑–¥–∞–µ–º GameObject –¥–ª—è —Ç–µ—Ä—Ä–µ–π–Ω–∞
            GameObject terrainGO = new GameObject("Test Terrain");
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Terrain
            Terrain terrain = terrainGO.AddComponent<Terrain>();
            TerrainCollider terrainCollider = terrainGO.AddComponent<TerrainCollider>();
            
            // –°–æ–∑–¥–∞–µ–º TerrainData
            TerrainData terrainData = new TerrainData();
            terrainData.heightmapResolution = 513;
            terrainData.size = new Vector3(terrainSize.x, terrainHeight, terrainSize.y);
            
            // –°–æ–∑–¥–∞–µ–º –ø–ª–æ—Å–∫—É—é –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å
            float[,] heights = new float[terrainData.heightmapResolution, terrainData.heightmapResolution];
            for (int x = 0; x < terrainData.heightmapResolution; x++)
            {
                for (int y = 0; y < terrainData.heightmapResolution; y++)
                {
                    heights[x, y] = 0.1f; // –ù–µ–±–æ–ª—å—à–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                }
            }
            terrainData.SetHeights(0, 0, heights);
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º TerrainData
            terrain.terrainData = terrainData;
            terrainCollider.terrainData = terrainData;
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
            if (terrainMaterial != null)
            {
                terrain.materialTemplate = terrainMaterial;
            }
            
            // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Ç–µ—Ä—Ä–µ–π–Ω
            terrainGO.transform.position = new Vector3(-terrainSize.x/2, 0, -terrainSize.y/2);
            
            Debug.Log("üåç –¢–µ—Ä—Ä–µ–π–Ω —Å–æ–∑–¥–∞–Ω");
        }
        
        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç –ö–†–ê–ó
        /// </summary>
        private void CreateKraz()
        {
            if (krazPrefab == null)
            {
                // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –ö–†–ê–ó –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ—Ñ–∞–±–∞
                _krazInstance = CreateSimpleKraz();
            }
            else
            {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–µ—Ñ–∞–±
                _krazInstance = Instantiate(krazPrefab, spawnPosition, Quaternion.Euler(spawnRotation));
            }
            
            _krazInstance.name = "–ö–†–ê–ó-255";
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä ECS –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if (_krazInstance.GetComponent<KrazVehicleConverter>() == null)
            {
                var converter = _krazInstance.AddComponent<KrazVehicleConverter>();
                converter.enablePlayerControl = true;
                converter.enableEngineSound = true;
                converter.enableMudEffects = true;
            }
            
            _cameraTarget = _krazInstance.transform;
            
            Debug.Log("üöó –ö–†–ê–ó —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é!");
        }
        
        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –ö–†–ê–ó –∏–∑ –ø—Ä–∏–º–∏—Ç–∏–≤–æ–≤
        /// </summary>
        private GameObject CreateSimpleKraz()
        {
            GameObject kraz = new GameObject("–ö–†–ê–ó-255");
            
            // –ö–∞–±–∏–Ω–∞
            GameObject cabin = GameObject.CreatePrimitive(PrimitiveType.Cube);
            cabin.name = "Cabin";
            cabin.transform.SetParent(kraz.transform);
            cabin.transform.localPosition = new Vector3(0, 1.2f, 0.5f);
            cabin.transform.localScale = new Vector3(2.5f, 1.5f, 2f);
            cabin.GetComponent<Renderer>().material.color = Color.red;
            
            // –ö—É–∑–æ–≤
            GameObject body = GameObject.CreatePrimitive(PrimitiveType.Cube);
            body.name = "Body";
            body.transform.SetParent(kraz.transform);
            body.transform.localPosition = new Vector3(0, 0.8f, -0.8f);
            body.transform.localScale = new Vector3(2.5f, 1.2f, 3.5f);
            body.GetComponent<Renderer>().material.color = Color.red;
            
            // –ö–æ–ª–µ—Å–∞ (6 —à—Ç—É–∫)
            CreateWheel(kraz, "FrontLeft", new Vector3(-1.2f, -0.3f, 1.8f));
            CreateWheel(kraz, "FrontRight", new Vector3(1.2f, -0.3f, 1.8f));
            CreateWheel(kraz, "MiddleLeft", new Vector3(-1.2f, -0.3f, 0f));
            CreateWheel(kraz, "MiddleRight", new Vector3(1.2f, -0.3f, 0f));
            CreateWheel(kraz, "RearLeft", new Vector3(-1.2f, -0.3f, -1.8f));
            CreateWheel(kraz, "RearRight", new Vector3(1.2f, -0.3f, -1.8f));
            
            // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –ö–†–ê–ó
            kraz.transform.position = spawnPosition;
            kraz.transform.rotation = Quaternion.Euler(spawnRotation);
            
            return kraz;
        }
        
        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç –∫–æ–ª–µ—Å–æ
        /// </summary>
        private void CreateWheel(GameObject parent, string name, Vector3 position)
        {
            GameObject wheel = GameObject.CreatePrimitive(PrimitiveType.Cylinder);
            wheel.name = name;
            wheel.transform.SetParent(parent.transform);
            wheel.transform.localPosition = position;
            wheel.transform.localScale = new Vector3(1.2f, 0.2f, 1.2f);
            wheel.transform.localRotation = Quaternion.Euler(0, 0, 90);
            wheel.GetComponent<Renderer>().material.color = Color.black;
        }
        
        /// <summary>
        /// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–∞–º–µ—Ä—É
        /// </summary>
        private void SetupCamera()
        {
            _camera = Camera.main;
            if (_camera == null)
            {
                GameObject cameraGO = new GameObject("Main Camera");
                _camera = cameraGO.AddComponent<Camera>();
                cameraGO.tag = "MainCamera";
            }
            
            if (followKraz)
            {
                UpdateCamera();
            }
            
            Debug.Log("üì∑ –ö–∞–º–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞");
        }
        
        /// <summary>
        /// –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –∫–∞–º–µ—Ä—ã
        /// </summary>
        private void UpdateCamera()
        {
            if (_cameraTarget == null) return;
            
            Vector3 targetPosition = _cameraTarget.position + 
                                   _cameraTarget.right * -cameraDistance + 
                                   Vector3.up * cameraHeight;
            
            Vector3 lookDirection = (_cameraTarget.position - targetPosition).normalized;
            
            _camera.transform.position = Vector3.Lerp(_camera.transform.position, targetPosition, 
                                                    cameraSpeed * Time.deltaTime);
            _camera.transform.rotation = Quaternion.LookRotation(lookDirection);
        }
        
        /// <summary>
        /// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ—Å–≤–µ—â–µ–Ω–∏–µ
        /// </summary>
        private void SetupLighting()
        {
            // –°–æ–∑–¥–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–≤–µ—Ç (—Å–æ–ª–Ω—Ü–µ)
            GameObject lightGO = new GameObject("Sun");
            Light sunLight = lightGO.AddComponent<Light>();
            sunLight.type = LightType.Directional;
            sunLight.color = Color.white;
            sunLight.intensity = 1.5f;
            sunLight.shadows = LightShadows.Soft;
            
            // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Å–æ–ª–Ω—Ü–µ
            lightGO.transform.rotation = Quaternion.Euler(45f, 45f, 0f);
            
            Debug.Log("‚òÄÔ∏è –û—Å–≤–µ—â–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ");
        }
        
        #if UNITY_EDITOR
        
        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ü–µ–Ω—É –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
        /// </summary>
        [MenuItem("Mud-Like/üöó –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ü–µ–Ω—É —Å –ö–†–ê–ó–æ–º")]
        public static void CreateKrazTestSceneInEditor()
        {
            // –°–æ–∑–¥–∞–µ–º GameObject —Å –Ω–∞—à–∏–º —Å–∫—Ä–∏–ø—Ç–æ–º
            GameObject sceneCreator = new GameObject("KrazTestScene");
            sceneCreator.AddComponent<KrazTestScene>();
            
            Debug.Log("üöó –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ü–µ–Ω–∞ —Å –ö–†–ê–ó–æ–º —Å–æ–∑–¥–∞–Ω–∞ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ!");
        }
        
        #endif
    }
}
