using Unity.Entities;
using Unity.Mathematics;
using Unity.Transforms;
using UnityEngine;
using MudLike.Vehicles.Components;
using MudLike.Core.Components;
#if UNITY_EDITOR
using UnityEditor;
using UnityEditor.SceneManagement;
#endif

namespace MudLike.Examples
{
    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ü–µ–Ω—É —Å –ö–†–ê–ó–æ–º –≤ Unity Editor
    /// </summary>
    public static class KrazTestSceneCreator
    {
        #if UNITY_EDITOR
        
        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ü–µ–Ω—É —Å –ö–†–ê–ó–æ–º
        /// </summary>
        [MenuItem("Mud-Like/üöó –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ü–µ–Ω—É —Å –ö–†–ê–ó–æ–º")]
        public static void CreateKrazTestScene()
        {
            Debug.Log("üöó –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ü–µ–Ω—ã —Å –ö–†–ê–ó–æ–º...");
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ü–µ–Ω—É
            var newScene = EditorSceneManager.NewScene(NewSceneSetup.EmptyScene, NewSceneMode.Single);
            
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Ä—Ä–µ–π–Ω
            CreateTerrain();
            
            // –°–æ–∑–¥–∞–µ–º –ö–†–ê–ó
            CreateKraz();
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—É
            SetupCamera();
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–µ
            SetupLighting();
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ü–µ–Ω—É
            string scenePath = "Assets/Scenes/KrazTestScene.unity";
            EditorSceneManager.SaveScene(newScene, scenePath);
            
            Debug.Log($"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ü–µ–Ω–∞ —Å –ö–†–ê–ó–æ–º —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {scenePath}");
            Debug.Log("üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ö–†–ê–ó–æ–º: E - –¥–≤–∏–≥–∞—Ç–µ–ª—å, WASD - –¥–≤–∏–∂–µ–Ω–∏–µ, –ü—Ä–æ–±–µ–ª - —Ç–æ—Ä–º–æ–∑");
        }
        
        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Ä—Ä–µ–π–Ω
        /// </summary>
        private static void CreateTerrain()
        {
            Debug.Log("üåç –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Ä—Ä–µ–π–Ω–∞...");
            
            // –°–æ–∑–¥–∞–µ–º GameObject –¥–ª—è —Ç–µ—Ä—Ä–µ–π–Ω–∞
            GameObject terrainGO = new GameObject("Test Terrain");
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Terrain
            Terrain terrain = terrainGO.AddComponent<Terrain>();
            TerrainCollider terrainCollider = terrainGO.AddComponent<TerrainCollider>();
            
            // –°–æ–∑–¥–∞–µ–º TerrainData
            TerrainData terrainData = new TerrainData();
            terrainData.heightmapResolution = 513;
            terrainData.size = new Vector3(100, 2, 100); // 100x100 –º–µ—Ç—Ä–æ–≤, –≤—ã—Å–æ—Ç–∞ 2–º
            
            // –°–æ–∑–¥–∞–µ–º —Å–ª–µ–≥–∫–∞ –Ω–µ—Ä–æ–≤–Ω—É—é –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å
            float[,] heights = new float[terrainData.heightmapResolution, terrainData.heightmapResolution];
            for (int x = 0; x < terrainData.heightmapResolution; x++)
            {
                for (int y = 0; y < terrainData.heightmapResolution; y++)
                {
                    // –°–æ–∑–¥–∞–µ–º –Ω–µ–±–æ–ª—å—à–∏–µ –Ω–µ—Ä–æ–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
                    float noise = Mathf.PerlinNoise(x * 0.01f, y * 0.01f) * 0.1f;
                    heights[x, y] = 0.1f + noise;
                }
            }
            terrainData.SetHeights(0, 0, heights);
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º TerrainData
            terrain.terrainData = terrainData;
            terrainCollider.terrainData = terrainData;
            
            // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Ç–µ—Ä—Ä–µ–π–Ω
            terrainGO.transform.position = new Vector3(-50, 0, -50);
            
            Debug.Log("‚úÖ –¢–µ—Ä—Ä–µ–π–Ω —Å–æ–∑–¥–∞–Ω");
        }
        
        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç –ö–†–ê–ó
        /// </summary>
        private static void CreateKraz()
        {
            Debug.Log("üöó –°–æ–∑–¥–∞–Ω–∏–µ –ö–†–ê–ó–∞...");
            
            // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç –ö–†–ê–ó–∞
            GameObject kraz = new GameObject("–ö–†–ê–ó-255");
            kraz.transform.position = new Vector3(0, 2, 0);
            
            // –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ö–†–ê–ó–∞
            CreateKrazVisual(kraz);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä ECS
            var converter = kraz.AddComponent<KrazVehicleConverter>();
            converter.enablePlayerControl = true;
            converter.enableEngineSound = true;
            converter.enableMudEffects = true;
            
            Debug.Log("‚úÖ –ö–†–ê–ó —Å–æ–∑–¥–∞–Ω");
        }
        
        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ö–†–ê–ó–∞
        /// </summary>
        private static void CreateKrazVisual(GameObject parent)
        {
            // –ö–∞–±–∏–Ω–∞
            GameObject cabin = GameObject.CreatePrimitive(PrimitiveType.Cube);
            cabin.name = "Cabin";
            cabin.transform.SetParent(parent.transform);
            cabin.transform.localPosition = new Vector3(0, 1.2f, 0.5f);
            cabin.transform.localScale = new Vector3(2.5f, 1.5f, 2f);
            
            // –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –∫–∞–±–∏–Ω—ã
            var cabinRenderer = cabin.GetComponent<Renderer>();
            cabinRenderer.material = new Material(Shader.Find("Standard"));
            cabinRenderer.material.color = new Color(0.8f, 0.1f, 0.1f); // –ö—Ä–∞—Å–Ω—ã–π
            
            // –ö—É–∑–æ–≤
            GameObject body = GameObject.CreatePrimitive(PrimitiveType.Cube);
            body.name = "Body";
            body.transform.SetParent(parent.transform);
            body.transform.localPosition = new Vector3(0, 0.8f, -0.8f);
            body.transform.localScale = new Vector3(2.5f, 1.2f, 3.5f);
            
            // –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –∫—É–∑–æ–≤–∞
            var bodyRenderer = body.GetComponent<Renderer>();
            bodyRenderer.material = new Material(Shader.Find("Standard"));
            bodyRenderer.material.color = new Color(0.8f, 0.1f, 0.1f); // –ö—Ä–∞—Å–Ω—ã–π
            
            // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–µ—Å–∞
            CreateWheel(parent, "FrontLeft", new Vector3(-1.2f, -0.3f, 1.8f));
            CreateWheel(parent, "FrontRight", new Vector3(1.2f, -0.3f, 1.8f));
            CreateWheel(parent, "MiddleLeft", new Vector3(-1.2f, -0.3f, 0f));
            CreateWheel(parent, "MiddleRight", new Vector3(1.2f, -0.3f, 0f));
            CreateWheel(parent, "RearLeft", new Vector3(-1.2f, -0.3f, -1.8f));
            CreateWheel(parent, "RearRight", new Vector3(1.2f, -0.3f, -1.8f));
        }
        
        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç –∫–æ–ª–µ—Å–æ
        /// </summary>
        private static void CreateWheel(GameObject parent, string name, Vector3 position)
        {
            GameObject wheel = GameObject.CreatePrimitive(PrimitiveType.Cylinder);
            wheel.name = name;
            wheel.transform.SetParent(parent.transform);
            wheel.transform.localPosition = position;
            wheel.transform.localScale = new Vector3(1.2f, 0.2f, 1.2f);
            wheel.transform.localRotation = Quaternion.Euler(0, 0, 90);
            
            // –ß–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –∫–æ–ª–µ—Å
            var wheelRenderer = wheel.GetComponent<Renderer>();
            wheelRenderer.material = new Material(Shader.Find("Standard"));
            wheelRenderer.material.color = Color.black;
        }
        
        /// <summary>
        /// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–∞–º–µ—Ä—É
        /// </summary>
        private static void SetupCamera()
        {
            Debug.Log("üì∑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–º–µ—Ä—ã...");
            
            // –°–æ–∑–¥–∞–µ–º –∫–∞–º–µ—Ä—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            Camera camera = Camera.main;
            if (camera == null)
            {
                GameObject cameraGO = new GameObject("Main Camera");
                camera = cameraGO.AddComponent<Camera>();
                cameraGO.tag = "MainCamera";
            }
            
            // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –∫–∞–º–µ—Ä—É –¥–ª—è –æ–±–∑–æ—Ä–∞ –ö–†–ê–ó–∞
            camera.transform.position = new Vector3(-15, 8, 0);
            camera.transform.rotation = Quaternion.Euler(20, 90, 0);
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∑–∞ –ö–†–ê–ó–æ–º
            var followScript = camera.gameObject.GetComponent<KrazCameraFollow>();
            if (followScript == null)
            {
                followScript = camera.gameObject.AddComponent<KrazCameraFollow>();
            }
            
            Debug.Log("‚úÖ –ö–∞–º–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞");
        }
        
        /// <summary>
        /// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ—Å–≤–µ—â–µ–Ω–∏–µ
        /// </summary>
        private static void SetupLighting()
        {
            Debug.Log("‚òÄÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–≤–µ—â–µ–Ω–∏—è...");
            
            // –°–æ–∑–¥–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–≤–µ—Ç (—Å–æ–ª–Ω—Ü–µ)
            GameObject lightGO = new GameObject("Sun");
            Light sunLight = lightGO.AddComponent<Light>();
            sunLight.type = LightType.Directional;
            sunLight.color = new Color(1f, 0.95f, 0.8f); // –¢–µ–ø–ª—ã–π —Å–≤–µ—Ç
            sunLight.intensity = 1.5f;
            sunLight.shadows = LightShadows.Soft;
            
            // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Å–æ–ª–Ω—Ü–µ
            lightGO.transform.rotation = Quaternion.Euler(45f, 45f, 0f);
            
            // –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–≤–µ—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Å–≤–µ—â–µ–Ω–∏—è
            GameObject fillLight = new GameObject("Fill Light");
            Light fill = fillLight.AddComponent<Light>();
            fill.type = LightType.Directional;
            fill.color = new Color(0.6f, 0.7f, 1f); // –•–æ–ª–æ–¥–Ω—ã–π —Å–≤–µ—Ç
            fill.intensity = 0.3f;
            fillLight.transform.rotation = Quaternion.Euler(-30f, -45f, 0f);
            
            Debug.Log("‚úÖ –û—Å–≤–µ—â–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ");
        }
        
        #endif
    }
    
    /// <summary>
    /// –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∫–∞–º–µ—Ä—ã –∑–∞ –ö–†–ê–ó–æ–º
    /// </summary>
    public class KrazCameraFollow : MonoBehaviour
    {
        [Header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã")]
        public float distance = 15f;
        public float height = 8f;
        public float followSpeed = 5f;
        
        private Transform krazTarget;
        
        void Start()
        {
            // –ù–∞—Ö–æ–¥–∏–º –ö–†–ê–ó –≤ —Å—Ü–µ–Ω–µ
            GameObject kraz = GameObject.Find("–ö–†–ê–ó-255");
            if (kraz != null)
            {
                krazTarget = kraz.transform;
            }
        }
        
        void LateUpdate()
        {
            if (krazTarget == null) return;
            
            // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–∞–º–µ—Ä—ã
            Vector3 targetPosition = krazTarget.position + 
                                   krazTarget.right * -distance + 
                                   Vector3.up * height;
            
            // –ü–ª–∞–≤–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –∫–∞–º–µ—Ä—É
            transform.position = Vector3.Lerp(transform.position, targetPosition, 
                                            followSpeed * Time.deltaTime);
            
            // –ù–∞–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–º–µ—Ä—É –Ω–∞ –ö–†–ê–ó
            Vector3 lookDirection = (krazTarget.position - transform.position).normalized;
            transform.rotation = Quaternion.LookRotation(lookDirection);
        }
    }
}
