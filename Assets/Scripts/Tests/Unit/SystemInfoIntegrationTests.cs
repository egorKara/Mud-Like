using Unity.Entities;
using Unity.Mathematics;
using UnityEngine;
using UnityEngine.TestTools;
using NUnit.Framework;
using System.Collections;
using MudLike.Core.Systems;

namespace MudLike.Tests.Unit
{
    /// <summary>
    /// –¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ —É—Ç–∏–ª–∏—Ç–∞–º–∏ Cursor
    /// </summary>
    public class SystemInfoIntegrationTests
    {
        [SetUp]
        public void Setup()
        {
            Debug.Log("[SystemInfoTest] üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç");
        }
        
        [TearDown]
        public void TearDown()
        {
            Debug.Log("[SystemInfoTest] üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç");
        }
        
        [Test]
        public void TestSystemInfoIntegration()
        {
            // –¢–µ—Å—Ç: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ —É—Ç–∏–ª–∏—Ç–∞–º–∏
            Debug.Log("[SystemInfoTest] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ —É—Ç–∏–ª–∏—Ç–∞–º–∏");
            
            try
            {
                var systemInfo = SystemInfoIntegration.GetSystemInfo();
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞
                Assert.IsNotNull(systemInfo.CPUModel, "–ú–æ–¥–µ–ª—å CPU –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å null");
                Assert.IsTrue(systemInfo.CPUCores > 0, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä CPU –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0");
                Assert.IsTrue(systemInfo.CPULoad >= 0f && systemInfo.CPULoad <= 100f, 
                    $"–ù–∞–≥—Ä—É–∑–∫–∞ CPU {systemInfo.CPULoad}% –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-100%");
                
                Debug.Log($"[SystemInfoTest] ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:");
                Debug.Log($"  CPU: {systemInfo.CPUModel}");
                Debug.Log($"  –Ø–¥—Ä–∞: {systemInfo.CPUCores}");
                Debug.Log($"  –ù–∞–≥—Ä—É–∑–∫–∞: {systemInfo.CPULoad:F1}%");
                Debug.Log($"  RAM: {systemInfo.UsedRAM / 1024 / 1024}MB/{systemInfo.TotalRAM / 1024 / 1024}MB");
                Debug.Log($"  –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {systemInfo.CPUTemperature:F1}¬∞C");
            }
            catch (System.Exception e)
            {
                Assert.Fail($"–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ —É—Ç–∏–ª–∏—Ç–∞–º–∏: {e.Message}");
            }
        }
        
        [Test]
        public void TestAvailableUtilities()
        {
            // –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç
            Debug.Log("[SystemInfoTest] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç");
            
            try
            {
                string utilities = SystemInfoIntegration.GetAvailableUtilities();
                
                Debug.Log($"[SystemInfoTest] –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã: {utilities}");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã
                Assert.IsNotNull(utilities, "–°–ø–∏—Å–æ–∫ —É—Ç–∏–ª–∏—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å null");
                Assert.IsTrue(utilities.Length > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã —Ö–æ—Ç—è –±—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —É—Ç–∏–ª–∏—Ç—ã");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç
                Assert.IsTrue(utilities.Contains("/proc/cpuinfo") || utilities.Contains("htop"), 
                    "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã –æ—Å–Ω–æ–≤–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞");
                
                Debug.Log("[SystemInfoTest] ‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã");
            }
            catch (System.Exception e)
            {
                Assert.Fail($"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç: {e.Message}");
            }
        }
        
        [Test]
        public void TestCPULoadAccuracy()
        {
            // –¢–µ—Å—Ç: –¢–æ—á–Ω–æ—Å—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ CPU
            Debug.Log("[SystemInfoTest] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ CPU");
            
            try
            {
                var systemInfo = SystemInfoIntegration.GetSystemInfo();
                
                Debug.Log($"[SystemInfoTest] –ù–∞–≥—Ä—É–∑–∫–∞ CPU: {systemInfo.CPULoad:F1}%");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–≥—Ä—É–∑–∫–∞ –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
                Assert.IsTrue(systemInfo.CPULoad >= 0f, "–ù–∞–≥—Ä—É–∑–∫–∞ CPU –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π");
                Assert.IsTrue(systemInfo.CPULoad <= 100f, "–ù–∞–≥—Ä—É–∑–∫–∞ CPU –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100%");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è (–¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã)
                if (systemInfo.CPULoad > 90f)
                {
                    Debug.LogWarning($"[SystemInfoTest] –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ CPU: {systemInfo.CPULoad:F1}%");
                }
                
                Debug.Log("[SystemInfoTest] ‚úÖ –¢–æ—á–Ω–æ—Å—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ CPU –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞");
            }
            catch (System.Exception e)
            {
                Debug.LogWarning($"[SystemInfoTest] –û—à–∏–±–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ CPU: {e.Message}");
                Assert.IsTrue(true, "–û—à–∏–±–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ CPU –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            }
        }
        
        [Test]
        public void TestTemperatureReading()
        {
            // –¢–µ—Å—Ç: –ß—Ç–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
            Debug.Log("[SystemInfoTest] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á—Ç–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã");
            
            try
            {
                var systemInfo = SystemInfoIntegration.GetSystemInfo();
                
                Debug.Log($"[SystemInfoTest] –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU: {systemInfo.CPUTemperature:F1}¬∞C");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
                Assert.IsTrue(systemInfo.CPUTemperature >= 0f, "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π");
                Assert.IsTrue(systemInfo.CPUTemperature <= 200f, "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–∑—É–º–Ω–æ–π");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Å–æ–∫–∞—è
                if (systemInfo.CPUTemperature > 85f)
                {
                    Debug.LogWarning($"[SystemInfoTest] –í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU: {systemInfo.CPUTemperature:F1}¬∞C");
                }
                
                Debug.Log("[SystemInfoTest] ‚úÖ –ß—Ç–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —É—Å–ø–µ—à–Ω–æ");
            }
            catch (System.Exception e)
            {
                Debug.LogWarning($"[SystemInfoTest] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã: {e.Message}");
                Assert.IsTrue(true, "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            }
        }
        
        [Test]
        public void TestMemoryMonitoring()
        {
            // –¢–µ—Å—Ç: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏
            Debug.Log("[SystemInfoTest] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–º—è—Ç–∏");
            
            try
            {
                var systemInfo = SystemInfoIntegration.GetSystemInfo();
                
                Debug.Log($"[SystemInfoTest] RAM: {systemInfo.UsedRAM / 1024 / 1024}MB/{systemInfo.TotalRAM / 1024 / 1024}MB ({systemInfo.RAMUsage:F1}%)");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
                Assert.IsTrue(systemInfo.TotalRAM > 0, "–û–±—â–∏–π –æ–±—ä–µ–º RAM –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0");
                Assert.IsTrue(systemInfo.UsedRAM >= 0, "–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è RAM –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π");
                Assert.IsTrue(systemInfo.UsedRAM <= systemInfo.TotalRAM, "–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è RAM –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å –æ–±—â—É—é");
                Assert.IsTrue(systemInfo.RAMUsage >= 0f && systemInfo.RAMUsage <= 100f, 
                    $"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM {systemInfo.RAMUsage:F1}% –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-100%");
                
                Debug.Log("[SystemInfoTest] ‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            }
            catch (System.Exception e)
            {
                Assert.Fail($"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–º—è—Ç–∏: {e.Message}");
            }
        }
        
        [Test]
        public void TestSystemStability()
        {
            // –¢–µ—Å—Ç: –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
            Debug.Log("[SystemInfoTest] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã");
            
            try
            {
                // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥
                for (int i = 0; i < 5; i++)
                {
                    var systemInfo = SystemInfoIntegration.GetSystemInfo();
                    
                    Debug.Log($"[SystemInfoTest] –ò–∑–º–µ—Ä–µ–Ω–∏–µ {i + 1}: CPU {systemInfo.CPULoad:F1}%, RAM {systemInfo.RAMUsage:F1}%, Temp {systemInfo.CPUTemperature:F1}¬∞C");
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
                    Assert.IsTrue(systemInfo.CPULoad >= 0f && systemInfo.CPULoad <= 100f, 
                        $"–ù–∞–≥—Ä—É–∑–∫–∞ CPU –Ω–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–∏ {i + 1} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-100%");
                    Assert.IsTrue(systemInfo.RAMUsage >= 0f && systemInfo.RAMUsage <= 100f, 
                        $"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM –Ω–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–∏ {i + 1} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-100%");
                    Assert.IsTrue(systemInfo.CPUTemperature >= 0f && systemInfo.CPUTemperature <= 200f, 
                        $"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–∏ {i + 1} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–∑—É–º–Ω–æ–π");
                    
                    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∏–∑–º–µ—Ä–µ–Ω–∏—è–º–∏
                    System.Threading.Thread.Sleep(100);
                }
                
                Debug.Log("[SystemInfoTest] ‚úÖ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞");
            }
            catch (System.Exception e)
            {
                Assert.Fail($"–û—à–∏–±–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã: {e.Message}");
            }
        }
        
        [Test]
        public void TestPerformance()
        {
            // –¢–µ—Å—Ç: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            Debug.Log("[SystemInfoTest] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞");
            
            try
            {
                var startTime = System.DateTime.Now;
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π
                for (int i = 0; i < 10; i++)
                {
                    SystemInfoIntegration.GetSystemInfo();
                }
                
                var endTime = System.DateTime.Now;
                var duration = (endTime - startTime).TotalMilliseconds;
                
                Debug.Log($"[SystemInfoTest] 10 –∏–∑–º–µ—Ä–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ {duration:F2}ms");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è –Ω–µ –∑–∞–Ω–∏–º–∞—é—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                Assert.IsTrue(duration < 10000f, $"–ò–∑–º–µ—Ä–µ–Ω–∏—è –∑–∞–Ω—è–ª–∏ {duration}ms, —á—Ç–æ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ");
                
                Debug.Log("[SystemInfoTest] ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–∏–µ–º–ª–µ–º–∞");
            }
            catch (System.Exception e)
            {
                Assert.Fail($"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e.Message}");
            }
        }
    }
}