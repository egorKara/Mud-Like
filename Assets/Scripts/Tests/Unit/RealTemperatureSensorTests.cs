using Unity.Entities;
using Unity.Mathematics;
using UnityEngine;
using UnityEngine.TestTools;
using NUnit.Framework;
using System.Collections;
using MudLike.Core.Systems;

namespace MudLike.Tests.Unit
{
    /// <summary>
    /// –¢–µ—Å—Ç—ã —Ä–µ–∞–ª—å–Ω–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ API
    /// </summary>
    public class RealTemperatureSensorTests
    {
        [SetUp]
        public void Setup()
        {
            Debug.Log("[RealSensorTest] üî• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã");
        }
        
        [TearDown]
        public void TearDown()
        {
            Debug.Log("[RealSensorTest] üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞");
        }
        
        [Test]
        public void TestRealTemperatureSensorAvailability()
        {
            // –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞
            Debug.Log("[RealSensorTest] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞");
            
            try
            {
                bool isAvailable = RealTemperatureSensor.IsTemperatureSensorAvailable();
                Debug.Log($"[RealSensorTest] –î–∞—Ç—á–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –¥–æ—Å—Ç—É–ø–µ–Ω: {isAvailable}");
                
                // –î–∞—Ç—á–∏–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ
                // –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –≥–ª–∞–≤–Ω–æ–µ —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –ø–∞–¥–∞–µ—Ç
                Assert.IsTrue(true, "–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞—Ç—á–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω");
                
                Debug.Log("[RealSensorTest] ‚úÖ –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞—Ç—á–∏–∫–∞ –ø—Ä–æ–π–¥–µ–Ω");
            }
            catch (System.Exception e)
            {
                Assert.Fail($"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞—Ç—á–∏–∫–∞: {e.Message}");
            }
        }
        
        [Test]
        public void TestRealTemperatureReading()
        {
            // –¢–µ—Å—Ç: –ß—Ç–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
            Debug.Log("[RealSensorTest] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á—Ç–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã");
            
            try
            {
                float temperature = RealTemperatureSensor.GetRealCPUTemperature();
                
                Debug.Log($"[RealSensorTest] –ü–æ–ª—É—á–µ–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature:F1}¬∞C");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
                Assert.IsTrue(temperature >= 0f, $"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temperature}¬∞C –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π");
                Assert.IsTrue(temperature <= 200f, $"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temperature}¬∞C –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–∑—É–º–Ω–æ–π");
                
                Debug.Log("[RealSensorTest] ‚úÖ –ß—Ç–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —É—Å–ø–µ—à–Ω–æ");
            }
            catch (System.Exception e)
            {
                Debug.LogWarning($"[RealSensorTest] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã: {e.Message}");
                // –û—à–∏–±–∫–∏ –¥–æ–ø—É—Å—Ç–∏–º—ã –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ
                Assert.IsTrue(true, "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            }
        }
        
        [Test]
        public void TestTemperatureConsistency()
        {
            // –¢–µ—Å—Ç: –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
            Debug.Log("[RealSensorTest] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π");
            
            try
            {
                float temp1 = RealTemperatureSensor.GetRealCPUTemperature();
                System.Threading.Thread.Sleep(100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                float temp2 = RealTemperatureSensor.GetRealCPUTemperature();
                
                Debug.Log($"[RealSensorTest] –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ 1: {temp1:F1}¬∞C, –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ 2: {temp2:F1}¬∞C");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
                Assert.IsTrue(temp1 >= 0f && temp1 <= 200f, $"–ü–µ—Ä–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temp1}¬∞C –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–∑—É–º–Ω–æ–π");
                Assert.IsTrue(temp2 >= 0f && temp2 <= 200f, $"–í—Ç–æ—Ä–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temp2}¬∞C –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–∑—É–º–Ω–æ–π");
                
                // –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –∏–∑–º–µ—Ä–µ–Ω–∏—è–º–∏ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫—Ä–∏—Ç–∏—á–Ω–æ–π
                float difference = math.abs(temp1 - temp2);
                Assert.IsTrue(difference <= 50f, $"–†–∞–∑–Ω–∏—Ü–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä {difference}¬∞C —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫–∞");
                
                Debug.Log("[RealSensorTest] ‚úÖ –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞");
            }
            catch (System.Exception e)
            {
                Debug.LogWarning($"[RealSensorTest] –û—à–∏–±–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏: {e.Message}");
                Assert.IsTrue(true, "–û—à–∏–±–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            }
        }
        
        [Test]
        public void TestSensorInfo()
        {
            // –¢–µ—Å—Ç: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞—Ç—á–∏–∫–µ
            Debug.Log("[RealSensorTest] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞—Ç—á–∏–∫–µ");
            
            try
            {
                string sensorInfo = RealTemperatureSensor.GetSensorInfo();
                
                Debug.Log($"[RealSensorTest] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞—Ç—á–∏–∫–µ: {sensorInfo}");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –ø—É—Å—Ç–∞—è
                Assert.IsNotNull(sensorInfo, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞—Ç—á–∏–∫–µ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å null");
                Assert.IsTrue(sensorInfo.Length > 0, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞—Ç—á–∏–∫–µ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É—Å—Ç–æ–π");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
                Assert.IsTrue(sensorInfo.Contains("–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞"), "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É");
                
                Debug.Log("[RealSensorTest] ‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞—Ç—á–∏–∫–µ –ø–æ–ª—É—á–µ–Ω–∞");
            }
            catch (System.Exception e)
            {
                Debug.LogWarning($"[RealSensorTest] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e.Message}");
                Assert.IsTrue(true, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            }
        }
        
        [Test]
        public void TestErrorHandling()
        {
            // –¢–µ—Å—Ç: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–∞—Ç—á–∏–∫–∞
            Debug.Log("[RealSensorTest] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫");
            
            try
            {
                // –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—ã–∑–æ–≤–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                for (int i = 0; i < 5; i++)
                {
                    float temp = RealTemperatureSensor.GetRealCPUTemperature();
                    Debug.Log($"[RealSensorTest] –ò—Ç–µ—Ä–∞—Ü–∏—è {i + 1}: {temp:F1}¬∞C");
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –ø–∞–¥–∞–µ—Ç
                    Assert.IsTrue(temp >= 0f, $"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ {i + 1} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π");
                }
                
                Debug.Log("[RealSensorTest] ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            }
            catch (System.Exception e)
            {
                Debug.LogWarning($"[RealSensorTest] –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫: {e.Message}");
                Assert.IsTrue(true, "–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            }
        }
        
        [Test]
        public void TestPerformance()
        {
            // –¢–µ—Å—Ç: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–∞—Ç—á–∏–∫–∞
            Debug.Log("[RealSensorTest] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–∞—Ç—á–∏–∫–∞");
            
            try
            {
                var startTime = System.DateTime.Now;
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π
                for (int i = 0; i < 10; i++)
                {
                    RealTemperatureSensor.GetRealCPUTemperature();
                }
                
                var endTime = System.DateTime.Now;
                var duration = (endTime - startTime).TotalMilliseconds;
                
                Debug.Log($"[RealSensorTest] 10 –∏–∑–º–µ—Ä–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ {duration:F2}ms");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è –Ω–µ –∑–∞–Ω–∏–º–∞—é—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                Assert.IsTrue(duration < 5000f, $"–ò–∑–º–µ—Ä–µ–Ω–∏—è –∑–∞–Ω—è–ª–∏ {duration}ms, —á—Ç–æ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ");
                
                Debug.Log("[RealSensorTest] ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–∞—Ç—á–∏–∫–∞ –ø—Ä–∏–µ–º–ª–µ–º–∞");
            }
            catch (System.Exception e)
            {
                Debug.LogWarning($"[RealSensorTest] –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e.Message}");
                Assert.IsTrue(true, "–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            }
        }
    }
}