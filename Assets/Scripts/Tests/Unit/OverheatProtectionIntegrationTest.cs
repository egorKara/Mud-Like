using Unity.Entities;
using Unity.Mathematics;
using UnityEngine;
using UnityEngine.TestTools;
using NUnit.Framework;
using System.Collections;
using MudLike.Core.Systems;

namespace MudLike.Tests.Unit
{
    /// <summary>
    /// –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ó–ê–©–ò–¢–´ –û–¢ –ü–ï–†–ï–ì–†–ï–í–ê
    /// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    /// </summary>
    public class OverheatProtectionIntegrationTest
    {
        private World _testWorld;
        private PerformanceManager _performanceManager;
        
        [SetUp]
        public void Setup()
        {
            Debug.Log("[IntegrationTest] üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
            
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π World
            _testWorld = new World("IntegrationTestWorld");
            
            // –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            _performanceManager = _testWorld.GetOrCreateSystemManaged<PerformanceManager>();
            
            Debug.Log("[IntegrationTest] ‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω");
        }
        
        [TearDown]
        public void TearDown()
        {
            Debug.Log("[IntegrationTest] üßπ –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
            
            // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
            if (_testWorld != null)
            {
                _testWorld.Dispose();
                _testWorld = null;
            }
            
            Debug.Log("[IntegrationTest] ‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
        }
        
        [Test]
        public void TestSystemIntegration()
        {
            // –¢–µ—Å—Ç: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
            Debug.Log("[IntegrationTest] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º");
            
            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–∑–¥–∞–Ω
                Assert.IsNotNull(_performanceManager, "–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å
                string status = _performanceManager.GetSystemStatus();
                Assert.IsNotNull(status, "–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å null");
                Assert.IsTrue(status.Length > 0, "–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
                
                Debug.Log($"[IntegrationTest] ‚úÖ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {status}");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                var performanceLevel = _performanceManager.GetCurrentPerformanceLevel();
                Assert.IsTrue(System.Enum.IsDefined(typeof(PerformanceManager.PerformanceLevel), performanceLevel), 
                    "–£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º");
                
                Debug.Log($"[IntegrationTest] ‚úÖ –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {performanceLevel}");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
                bool isEmergency = _performanceManager.IsEmergencyModeActive();
                Assert.IsFalse(isEmergency, "–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏");
                
                Debug.Log($"[IntegrationTest] ‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º: {isEmergency}");
            }
            catch (System.Exception e)
            {
                Assert.Fail($"–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º: {e.Message}");
            }
        }
        
        [Test]
        public void TestSafeSystemUpdate()
        {
            // –¢–µ—Å—Ç: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º
            Debug.Log("[IntegrationTest] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º");
            
            try
            {
                // –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã
                for (int i = 0; i < 5; i++)
                {
                    Debug.Log($"[IntegrationTest] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ #{i + 1}");
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º—ã –Ω–µ –ø–∞–¥–∞—é—Ç –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
                    string status = _performanceManager.GetSystemStatus();
                    Assert.IsNotNull(status, $"–°—Ç–∞—Ç—É—Å –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ {i + 1} –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å null");
                    
                    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
                    System.Threading.Thread.Sleep(10);
                    
                    Debug.Log($"[IntegrationTest] ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ #{i + 1} —É—Å–ø–µ—à–Ω–æ");
                }
            }
            catch (System.Exception e)
            {
                Assert.Fail($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º: {e.Message}");
            }
        }
        
        [Test]
        public void TestSystemStability()
        {
            // –¢–µ—Å—Ç: –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º
            Debug.Log("[IntegrationTest] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º");
            
            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π
                var initialStatus = _performanceManager.GetSystemStatus();
                var initialLevel = _performanceManager.GetCurrentPerformanceLevel();
                
                for (int i = 0; i < 10; i++)
                {
                    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
                    var currentStatus = _performanceManager.GetSystemStatus();
                    var currentLevel = _performanceManager.GetCurrentPerformanceLevel();
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ
                    Assert.IsNotNull(currentStatus, $"–°—Ç–∞—Ç—É—Å –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ {i + 1} –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å null");
                    Assert.IsTrue(System.Enum.IsDefined(typeof(PerformanceManager.PerformanceLevel), currentLevel), 
                        $"–£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ {i + 1} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º");
                    
                    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    System.Threading.Thread.Sleep(5);
                }
                
                Debug.Log("[IntegrationTest] ‚úÖ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞");
            }
            catch (System.Exception e)
            {
                Assert.Fail($"–û—à–∏–±–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º: {e.Message}");
            }
        }
        
        [Test]
        public void TestErrorRecovery()
        {
            // –¢–µ—Å—Ç: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫
            Debug.Log("[IntegrationTest] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫");
            
            try
            {
                // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
                try
                {
                    // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–∑–≤–∞—Ç—å –º–µ—Ç–æ–¥ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                    _performanceManager.ForceEmergencyMode();
                    Debug.Log("[IntegrationTest] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞");
                }
                catch (System.Exception e)
                {
                    Debug.LogWarning($"[IntegrationTest] –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: {e.Message}");
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                string status = _performanceManager.GetSystemStatus();
                Assert.IsNotNull(status, "–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏");
                
                Debug.Log("[IntegrationTest] ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç");
            }
            catch (System.Exception e)
            {
                Assert.Fail($"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e.Message}");
            }
        }
        
        [Test]
        public void TestMemoryManagement()
        {
            // –¢–µ—Å—Ç: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é
            Debug.Log("[IntegrationTest] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é");
            
            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
                long memoryBefore = System.GC.GetTotalMemory(false);
                
                // –°–æ–∑–¥–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ World'–æ–≤
                for (int i = 0; i < 5; i++)
                {
                    var tempWorld = new World($"TempWorld{i}");
                    tempWorld.Dispose();
                }
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
                System.GC.Collect();
                System.GC.WaitForPendingFinalizers();
                System.GC.Collect();
                
                long memoryAfter = System.GC.GetTotalMemory(false);
                long memoryDifference = memoryAfter - memoryBefore;
                
                Debug.Log($"[IntegrationTest] –ü–∞–º—è—Ç—å –¥–æ: {memoryBefore / 1024}KB, –ø–æ—Å–ª–µ: {memoryAfter / 1024}KB, —Ä–∞–∑–Ω–∏—Ü–∞: {memoryDifference / 1024}KB");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –ø–∞–º—è—Ç–∏ —Ä–∞–∑—É–º–Ω–∞
                Assert.IsTrue(memoryDifference < 1024 * 1024, $"–†–∞–∑–Ω–∏—Ü–∞ –≤ –ø–∞–º—è—Ç–∏ {memoryDifference / 1024}KB —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫–∞");
                
                Debug.Log("[IntegrationTest] ‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            }
            catch (System.Exception e)
            {
                Assert.Fail($"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é: {e.Message}");
            }
        }
        
        [Test]
        public void TestSystemShutdown()
        {
            // –¢–µ—Å—Ç: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º
            Debug.Log("[IntegrationTest] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã");
            
            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç
                string status = _performanceManager.GetSystemStatus();
                Assert.IsNotNull(status, "–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º");
                
                // –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
                _performanceManager = null;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –æ—á–∏—â–µ–Ω–∞
                Assert.IsNull(_performanceManager, "–°—Å—ã–ª–∫–∞ –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—á–∏—â–µ–Ω–∞");
                
                Debug.Log("[IntegrationTest] ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            }
            catch (System.Exception e)
            {
                Assert.Fail($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã: {e.Message}");
            }
        }
    }
}