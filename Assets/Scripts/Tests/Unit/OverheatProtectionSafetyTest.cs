using Unity.Entities;
using Unity.Mathematics;
using UnityEngine;
using UnityEngine.TestTools;
using NUnit.Framework;
using System.Collections;
using MudLike.Core.Systems;

namespace MudLike.Tests.Unit
{
    /// <summary>
    /// –ë–ï–ó–û–ü–ê–°–ù–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ó–ê–©–ò–¢–´ –û–¢ –ü–ï–†–ï–ì–†–ï–í–ê
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –±–µ–∑ —Ä–∏—Å–∫–∞ –∑–∞–≤–∏—Å–∞–Ω–∏—è
    /// </summary>
    public class OverheatProtectionSafetyTest
    {
        private World _testWorld;
        private OverheatProtectionSystem _overheatSystem;
        private SystemResourceMonitor _resourceMonitor;
        private AdaptiveQualitySystem _adaptiveQualitySystem;
        
        [SetUp]
        public void Setup()
        {
            Debug.Log("[SafetyTest] üõ°Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
            
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π World
            _testWorld = new World("SafetyTestWorld");
            
            // –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—ã (—Ç–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –±–µ–∑ –∑–∞–ø—É—Å–∫–∞)
            _overheatSystem = _testWorld.GetOrCreateSystemManaged<OverheatProtectionSystem>();
            _resourceMonitor = _testWorld.GetOrCreateSystemManaged<SystemResourceMonitor>();
            _adaptiveQualitySystem = _testWorld.GetOrCreateSystemManaged<AdaptiveQualitySystem>();
            
            Debug.Log("[SafetyTest] ‚úÖ –°–∏—Å—Ç–µ–º—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ");
        }
        
        [TearDown]
        public void TearDown()
        {
            Debug.Log("[SafetyTest] üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è");
            
            // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
            if (_testWorld != null)
            {
                _testWorld.Dispose();
                _testWorld = null;
            }
            
            Debug.Log("[SafetyTest] ‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
        }
        
        [Test]
        public void TestSystemCreation()
        {
            // –¢–µ—Å—Ç: –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º –±–µ–∑ –æ—à–∏–±–æ–∫
            Debug.Log("[SafetyTest] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º");
            
            Assert.IsNotNull(_overheatSystem, "–°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –ø–µ—Ä–µ–≥—Ä–µ–≤–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞");
            Assert.IsNotNull(_resourceMonitor, "–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞");
            Assert.IsNotNull(_adaptiveQualitySystem, "–°–∏—Å—Ç–µ–º–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞");
            
            Debug.Log("[SafetyTest] ‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ");
        }
        
        [Test]
        public void TestSystemInitialization()
        {
            // –¢–µ—Å—Ç: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º –±–µ–∑ –æ—à–∏–±–æ–∫
            Debug.Log("[SafetyTest] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º");
            
            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º—ã –º–æ–≥—É—Ç –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
                var overheatState = _overheatSystem.GetCurrentState();
                var overheatTemp = _overheatSystem.GetCurrentTemperature();
                
                Assert.IsTrue(System.Enum.IsDefined(typeof(OverheatProtectionSystem.OverheatState), overheatState), 
                    "–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∑–∞—â–∏—Ç—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º");
                Assert.IsTrue(overheatTemp >= 0f, "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π");
                
                Debug.Log($"[SafetyTest] ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –°–æ—Å—Ç–æ—è–Ω–∏–µ: {overheatState}, –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {overheatTemp:F1}¬∞C");
            }
            catch (System.Exception e)
            {
                Assert.Fail($"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º: {e.Message}");
            }
        }
        
        [Test]
        public void TestSafeTemperatureSimulation()
        {
            // –¢–µ—Å—Ç: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
            Debug.Log("[SafetyTest] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã");
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
            var testTemperatures = new float[] { 50f, 65f, 75f, 85f };
            
            foreach (float temp in testTemperatures)
            {
                Debug.Log($"[SafetyTest] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã: {temp}¬∞C");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
                Assert.IsTrue(temp >= 0f, $"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temp}¬∞C –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π");
                Assert.IsTrue(temp <= 200f, $"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temp}¬∞C –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–∑—É–º–Ω–æ–π");
                
                // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
                var state = SimulateSafeStateFromTemperature(temp);
                Assert.IsTrue(System.Enum.IsDefined(typeof(OverheatProtectionSystem.OverheatState), state), 
                    $"–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã {temp}¬∞C –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º");
                
                Debug.Log($"[SafetyTest] ‚úÖ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temp}¬∞C -> {state}");
            }
        }
        
        [Test]
        public void TestSafeQualityLevels()
        {
            // –¢–µ—Å—Ç: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω–µ–π –∫–∞—á–µ—Å—Ç–≤–∞
            Debug.Log("[SafetyTest] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Ä–æ–≤–Ω–µ–π –∫–∞—á–µ—Å—Ç–≤–∞");
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            int originalQuality = QualitySettings.GetQualityLevel();
            
            try
            {
                // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ —É—Ä–æ–≤–Ω–∏
                var validLevels = new int[] { 0, 1, 2, 3 };
                
                foreach (int level in validLevels)
                {
                    Debug.Log($"[SafetyTest] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∫–∞—á–µ—Å—Ç–≤–∞: {level}");
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Ä–æ–≤–µ–Ω—å –≤–∞–ª–∏–¥–µ–Ω
                    Assert.IsTrue(level >= 0 && level <= 3, $"–£—Ä–æ–≤–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–∞ {level} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º");
                    
                    // –ù–ï –∏–∑–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
                    Debug.Log($"[SafetyTest] ‚úÖ –£—Ä–æ–≤–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–∞ {level} –≤–∞–ª–∏–¥–µ–Ω");
                }
            }
            finally
            {
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                QualitySettings.SetQualityLevel(originalQuality);
                Debug.Log($"[SafetyTest] –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–∞: {originalQuality}");
            }
        }
        
        [Test]
        public void TestSafeFPSValues()
        {
            // –¢–µ—Å—Ç: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π FPS
            Debug.Log("[SafetyTest] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π FPS");
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            int originalFPS = Application.targetFrameRate;
            
            try
            {
                // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è FPS
                var safeFPSValues = new int[] { 15, 30, 45, 60 };
                
                foreach (int fps in safeFPSValues)
                {
                    Debug.Log($"[SafetyTest] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FPS: {fps}");
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ FPS –≤–∞–ª–∏–¥–µ–Ω
                    Assert.IsTrue(fps > 0, $"FPS {fps} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º");
                    Assert.IsTrue(fps <= 120, $"FPS {fps} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑—É–º–Ω—ã–º");
                    
                    // –ù–ï –∏–∑–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
                    Debug.Log($"[SafetyTest] ‚úÖ FPS {fps} –≤–∞–ª–∏–¥–µ–Ω");
                }
            }
            finally
            {
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                Application.targetFrameRate = originalFPS;
                Debug.Log($"[SafetyTest] –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π FPS: {originalFPS}");
            }
        }
        
        [Test]
        public void TestErrorHandling()
        {
            // –¢–µ—Å—Ç: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            Debug.Log("[SafetyTest] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫");
            
            try
            {
                // –°–∏–º—É–ª–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ—à–∏–±–∫—É
                throw new System.Exception("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏");
            }
            catch (System.Exception e)
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                Assert.IsNotNull(e.Message, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å null");
                Assert.IsTrue(e.Message.Length > 0, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
                
                Debug.Log($"[SafetyTest] ‚úÖ –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {e.Message}");
            }
        }
        
        [Test]
        public void TestSystemDisposal()
        {
            // –¢–µ—Å—Ç: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º
            Debug.Log("[SafetyTest] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º");
            
            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
                Assert.IsNotNull(_overheatSystem, "–°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å");
                Assert.IsNotNull(_resourceMonitor, "–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å");
                Assert.IsNotNull(_adaptiveQualitySystem, "–°–∏—Å—Ç–µ–º–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å");
                
                // –°–∏–º—É–ª–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
                _overheatSystem = null;
                _resourceMonitor = null;
                _adaptiveQualitySystem = null;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Å—ã–ª–∫–∏ –æ—á–∏—â–µ–Ω—ã
                Assert.IsNull(_overheatSystem, "–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∏—Å—Ç–µ–º—É –∑–∞—â–∏—Ç—ã –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—á–∏—â–µ–Ω–∞");
                Assert.IsNull(_resourceMonitor, "–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—á–∏—â–µ–Ω–∞");
                Assert.IsNull(_adaptiveQualitySystem, "–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∏—Å—Ç–µ–º—É –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—á–∏—â–µ–Ω–∞");
                
                Debug.Log("[SafetyTest] ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ");
            }
            catch (System.Exception e)
            {
                Assert.Fail($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º: {e.Message}");
            }
        }
        
        [Test]
        public void TestMemorySafety()
        {
            // –¢–µ—Å—Ç: –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–∞–º—è—Ç–∏
            Debug.Log("[SafetyTest] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–∞–º—è—Ç–∏");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
            long memoryBefore = System.GC.GetTotalMemory(false);
            
            // –°–æ–∑–¥–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã
            for (int i = 0; i < 100; i++)
            {
                var tempWorld = new World($"TempWorld{i}");
                tempWorld.Dispose();
            }
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
            System.GC.Collect();
            System.GC.WaitForPendingFinalizers();
            System.GC.Collect();
            
            long memoryAfter = System.GC.GetTotalMemory(false);
            long memoryDifference = memoryAfter - memoryBefore;
            
            Debug.Log($"[SafetyTest] –ü–∞–º—è—Ç—å –¥–æ: {memoryBefore / 1024}KB, –ø–æ—Å–ª–µ: {memoryAfter / 1024}KB, —Ä–∞–∑–Ω–∏—Ü–∞: {memoryDifference / 1024}KB");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –ø–∞–º—è—Ç–∏ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞ (–¥–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ)
            Assert.IsTrue(memoryDifference < 1024 * 1024, $"–†–∞–∑–Ω–∏—Ü–∞ –≤ –ø–∞–º—è—Ç–∏ {memoryDifference / 1024}KB —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫–∞");
            
            Debug.Log("[SafetyTest] ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–∞–º—è—Ç–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞");
        }
        
        /// <summary>
        /// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ
        /// </summary>
        private OverheatProtectionSystem.OverheatState SimulateSafeStateFromTemperature(float temperature)
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
            if (float.IsNaN(temperature) || float.IsInfinity(temperature) || temperature < 0f)
            {
                return OverheatProtectionSystem.OverheatState.Safe;
            }
            
            // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if (temperature >= 85f)
                return OverheatProtectionSystem.OverheatState.Emergency;
            else if (temperature >= 75f)
                return OverheatProtectionSystem.OverheatState.Critical;
            else if (temperature >= 65f)
                return OverheatProtectionSystem.OverheatState.Warning;
            else
                return OverheatProtectionSystem.OverheatState.Safe;
        }
    }
}