using Unity.Entities;
using Unity.Mathematics;
using Unity.Transforms;
using UnityEngine;
using MudLike.Core.Components;
using MudLike.Core.Systems;

namespace MudLike.Core.Testing
{
    /// <summary>
    /// –¢–µ—Å—Ç–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã ECS –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞
    /// </summary>
    public class PrototypeTester : MonoBehaviour
    {
        [Header("Test Settings")]
        [SerializeField] private bool createTestPlayer = true;
        [SerializeField] private Vector3 playerPosition = Vector3.zero;
        
        private EntityManager entityManager;
        private Entity testPlayerEntity;
        
        void Start()
        {
            // –ü–æ–ª—É—á–∞–µ–º EntityManager
            entityManager = World.DefaultGameObjectInjectionWorld.EntityManager;
            
            if (createTestPlayer)
            {
                CreateTestPlayer();
            }
            
            // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–∞—Ö
            LogSystemInfo();
        }
        
        void Update()
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            if (testPlayerEntity != Entity.Null && entityManager.Exists(testPlayerEntity))
            {
                CheckPlayerState();
            }
        }
        
        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        /// </summary>
        private void CreateTestPlayer()
        {
            // –°–æ–∑–¥–∞–µ–º Entity
            testPlayerEntity = entityManager.CreateEntity();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            entityManager.AddComponent<PlayerTag>(testPlayerEntity);
            entityManager.AddComponent<PlayerInput>(testPlayerEntity);
            entityManager.AddComponent<Velocity>(testPlayerEntity);
            entityManager.AddComponent<Position>(testPlayerEntity);
            entityManager.AddComponent<MovementSpeed>(testPlayerEntity);
            entityManager.AddComponent<RotationSpeed>(testPlayerEntity);
            entityManager.AddComponent<LocalTransform>(testPlayerEntity);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            entityManager.SetComponentData(testPlayerEntity, new Position { Value = playerPosition });
            entityManager.SetComponentData(testPlayerEntity, new Velocity { Value = float3.zero });
            entityManager.SetComponentData(testPlayerEntity, new MovementSpeed 
            { 
                Value = 10f, 
                MaxSpeed = 10f, 
                Acceleration = 5f, 
                Deceleration = 8f 
            });
            entityManager.SetComponentData(testPlayerEntity, new RotationSpeed { Value = 180f });
            entityManager.SetComponentData(testPlayerEntity, new LocalTransform 
            { 
                Position = playerPosition, 
                Rotation = quaternion.identity, 
                Scale = 1f 
            });
            
            Debug.Log($"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∏–≥—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω: Entity {testPlayerEntity.Index}");
        }
        
        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
        /// </summary>
        private void CheckPlayerState()
        {
            if (entityManager.HasComponent<LocalTransform>(testPlayerEntity))
            {
                var transform = entityManager.GetComponentData<LocalTransform>(testPlayerEntity);
                var velocity = entityManager.GetComponentData<Velocity>(testPlayerEntity);
                var input = entityManager.GetComponentData<PlayerInput>(testPlayerEntity);
                
                // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–∞–∂–¥—ã–µ 60 –∫–∞–¥—Ä–æ–≤
                if (Time.frameCount % 60 == 0)
                {
                    Debug.Log($"üéÆ –ò–≥—Ä–æ–∫ - –ü–æ–∑–∏—Ü–∏—è: {transform.Position}, –°–∫–æ—Ä–æ—Å—Ç—å: {velocity.Value}, –í–≤–æ–¥: {input.Movement}");
                }
            }
        }
        
        /// <summary>
        /// –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–∞—Ö
        /// </summary>
        private void LogSystemInfo()
        {
            var world = World.DefaultGameObjectInjectionWorld;
            
            Debug.Log("üîß ECS –°–∏—Å—Ç–µ–º—ã:");
            Debug.Log($"   - InputSystem: {world.GetExistingSystem<InputSystem>() != null}");
            Debug.Log($"   - PlayerMovementSystem: {world.GetExistingSystem<PlayerMovementSystem>() != null}");
            Debug.Log($"   - PlayerRotationSystem: {world.GetExistingSystem<PlayerRotationSystem>() != null}");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
            var playerQuery = entityManager.CreateEntityQuery(typeof(PlayerTag));
            Debug.Log($"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤: {playerQuery.CalculateEntityCount()}");
        }
        
        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        /// </summary>
        [ContextMenu("Create Additional Player")]
        public void CreateAdditionalPlayer()
        {
            var newEntity = entityManager.CreateEntity();
            entityManager.AddComponent<PlayerTag>(newEntity);
            entityManager.AddComponent<PlayerInput>(newEntity);
            entityManager.AddComponent<Velocity>(newEntity);
            entityManager.AddComponent<Position>(newEntity);
            entityManager.AddComponent<MovementSpeed>(newEntity);
            entityManager.AddComponent<RotationSpeed>(newEntity);
            entityManager.AddComponent<LocalTransform>(newEntity);
            
            entityManager.SetComponentData(newEntity, new Position { Value = new float3(5, 0, 5) });
            entityManager.SetComponentData(newEntity, new Velocity { Value = float3.zero });
            entityManager.SetComponentData(newEntity, new MovementSpeed 
            { 
                Value = 8f, 
                MaxSpeed = 8f, 
                Acceleration = 4f, 
                Deceleration = 6f 
            });
            entityManager.SetComponentData(newEntity, new RotationSpeed { Value = 150f });
            entityManager.SetComponentData(newEntity, new LocalTransform 
            { 
                Position = new float3(5, 0, 5), 
                Rotation = quaternion.identity, 
                Scale = 1f 
            });
            
            Debug.Log($"‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∏–≥—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω: Entity {newEntity.Index}");
        }
        
        /// <summary>
        /// –£–¥–∞–ª—è–µ—Ç –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        /// </summary>
        [ContextMenu("Clear All Players")]
        public void ClearAllPlayers()
        {
            var playerQuery = entityManager.CreateEntityQuery(typeof(PlayerTag));
            entityManager.DestroyEntity(playerQuery);
            testPlayerEntity = Entity.Null;
            Debug.Log("üóëÔ∏è –í—Å–µ –∏–≥—Ä–æ–∫–∏ —É–¥–∞–ª–µ–Ω—ã");
        }
    }
}
