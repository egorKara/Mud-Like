using Unity.Entities;
using Unity.Profiling;
using UnityEngine;
using UnityEngine.Profiling;
using System.Collections.Generic;
using System.IO;

namespace MudLike.Profiler
{
    /// <summary>
    /// –°—Ç–∞—Ä—Ç–µ—Ä –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Mud-Like
    /// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç Unity Profiler
    /// </summary>
    public static class ProfilerStarter
    {
        private static readonly ProfilerMarker _profilerMarker = new ProfilerMarker("MudLike.Profiler");
        
        /// <summary>
        /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Unity Editor
        /// </summary>
        [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
        public static void StartProfiling()
        {
            Debug.Log("üöÄ Mud-Like Profiler Starter: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è");
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
            SetupProfilerSettings();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
            StartProfilerConnection();
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            SetupPerformanceMonitoring();
            
            Debug.Log("‚úÖ –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ");
        }
        
        /// <summary>
        /// –ó–∞–ø—É—Å–∫–∞–µ—Ç headless –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        /// </summary>
        public static void StartHeadlessProfiling()
        {
            Debug.Log("üöÄ Mud-Like Profiler Starter: Headless –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ");
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
            SetupProfilerSettings();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º headless –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
            StartHeadlessProfiler();
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            SetupPerformanceMonitoring();
            
            Debug.Log("‚úÖ Headless –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ");
        }
        
        /// <summary>
        /// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        /// </summary>
        private static void SetupProfilerSettings()
        {
            // –í–∫–ª—é—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
            Profiler.enabled = true;
            Profiler.logFile = Path.Combine(Application.dataPath, "..", "ProfilerData", "profiler_data.raw");
            
            // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            var profilerDataPath = Path.Combine(Application.dataPath, "..", "ProfilerData");
            if (!Directory.Exists(profilerDataPath))
            {
                Directory.CreateDirectory(profilerDataPath);
            }
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            Profiler.maxUsedMemory = 1024 * 1024 * 1024; // 1GB
            Profiler.enableBinaryLog = true;
            Profiler.enableAllocationCallstacks = true;
            
            Debug.Log($"üìä –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ. –î–∞–Ω–Ω—ã–µ: {profilerDataPath}");
        }
        
        /// <summary>
        /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤—â–∏–∫—É
        /// </summary>
        private static void StartProfilerConnection()
        {
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤—â–∏–∫—É
            Profiler.SetConnectionProfiling(true);
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
            Profiler.BeginThreadProfiling("MudLike", "MainThread");
            
            Debug.Log("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤—â–∏–∫—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
        }
        
        /// <summary>
        /// –ó–∞–ø—É—Å–∫–∞–µ—Ç headless –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        /// </summary>
        private static void StartHeadlessProfiler()
        {
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º headless –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
            Profiler.SetConnectionProfiling(false);
            Profiler.enableBinaryLog = true;
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
            Profiler.BeginThreadProfiling("MudLike", "MainThread");
            
            Debug.Log("üîó Headless –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ");
        }
        
        /// <summary>
        /// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        /// </summary>
        private static void SetupPerformanceMonitoring()
        {
            // –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            var world = World.DefaultGameObjectInjectionWorld;
            if (world != null)
            {
                world.GetOrCreateSystem<PerformanceMonitoringSystem>();
            }
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ FPS
            Application.targetFrameRate = 60;
            QualitySettings.vSyncCount = 1;
            
            Debug.Log("üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
        }
    }
    
    /// <summary>
    /// –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    /// </summary>
    [UpdateInGroup(typeof(SimulationSystemGroup))]
    public partial class PerformanceMonitoringSystem : SystemBase
    {
        private float _lastFPSCheck = 0f;
        private int _frameCount = 0;
        private float _currentFPS = 0f;
        private float _averageFPS = 0f;
        private List<float> _fpsHistory = new List<float>();
        
        private float _lastMemoryCheck = 0f;
        private long _currentMemory = 0;
        private long _peakMemory = 0;
        
        protected override void OnCreate()
        {
            Debug.Log("üìä PerformanceMonitoringSystem: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è");
        }
        
        protected override void OnUpdate()
        {
            using (_profilerMarker.Auto())
            {
                float currentTime = (float)SystemAPI.Time.ElapsedTime;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º FPS –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫—É–Ω–¥—ã
                if (currentTime - _lastFPSCheck >= 0.5f)
                {
                    CheckFPS();
                    _lastFPSCheck = currentTime;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å –∫–∞–∂–¥—ã–µ 1 —Å–µ–∫—É–Ω–¥—É
                if (currentTime - _lastMemoryCheck >= 1f)
                {
                    CheckMemory();
                    _lastMemoryCheck = currentTime;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ECS —Å–∏—Å—Ç–µ–º
                CheckECSSystemPerformance();
            }
        }
        
        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç FPS
        /// </summary>
        private void CheckFPS()
        {
            _currentFPS = 1f / Time.unscaledDeltaTime;
            _fpsHistory.Add(_currentFPS);
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ 100 –∑–∞–ø–∏—Å–µ–π
            if (_fpsHistory.Count > 100)
            {
                _fpsHistory.RemoveAt(0);
            }
            
            // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π FPS
            float totalFPS = 0f;
            foreach (float fps in _fpsHistory)
            {
                totalFPS += fps;
            }
            _averageFPS = totalFPS / _fpsHistory.Count;
            
            // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            if (_currentFPS < 30f)
            {
                Debug.LogWarning($"‚ö†Ô∏è –ù–∏–∑–∫–∏–π FPS: {_currentFPS:F1} (—Å—Ä–µ–¥–Ω–∏–π: {_averageFPS:F1})");
            }
            else if (_currentFPS < 50f)
            {
                Debug.LogWarning($"‚ö†Ô∏è –°—Ä–µ–¥–Ω–∏–π FPS: {_currentFPS:F1} (—Å—Ä–µ–¥–Ω–∏–π: {_averageFPS:F1})");
            }
        }
        
        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
        /// </summary>
        private void CheckMemory()
        {
            _currentMemory = Profiler.GetTotalAllocatedMemory(Profiler.Area.All);
            
            if (_currentMemory > _peakMemory)
            {
                _peakMemory = _currentMemory;
            }
            
            // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            if (_currentMemory > 1024 * 1024 * 1024) // 1GB
            {
                Debug.LogWarning($"‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {_currentMemory / (1024 * 1024):F1}MB");
            }
        }
        
        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ECS —Å–∏—Å—Ç–µ–º
        /// </summary>
        private void CheckECSSystemPerformance()
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
            var world = World.DefaultGameObjectInjectionWorld;
            if (world != null)
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º VehicleMovementSystem
                var vehicleSystem = world.GetExistingSystemManaged<MudLike.Vehicles.Systems.VehicleMovementSystem>();
                if (vehicleSystem != null)
                {
                    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º TerrainDeformationSystem
                var terrainSystem = world.GetExistingSystemManaged<MudLike.Terrain.Systems.TerrainDeformationSystem>();
                if (terrainSystem != null)
                {
                    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
                }
            }
        }
        
        protected override void OnDestroy()
        {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            SaveProfilerData();
        }
        
        /// <summary>
        /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        /// </summary>
        private void SaveProfilerData()
        {
            var profilerDataPath = Path.Combine(Application.dataPath, "..", "ProfilerData", "performance_data.json");
            
            var data = new
            {
                average_fps = _averageFPS,
                peak_memory_mb = _peakMemory / (1024 * 1024),
                current_memory_mb = _currentMemory / (1024 * 1024),
                fps_history = _fpsHistory.ToArray(),
                timestamp = System.DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")
            };
            
            string json = JsonUtility.ToJson(data, true);
            File.WriteAllText(profilerDataPath, json);
            
            Debug.Log($"üìä –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {profilerDataPath}");
        }
    }
}
