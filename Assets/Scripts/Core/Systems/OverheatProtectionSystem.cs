using Unity.Entities;
using Unity.Mathematics;
using UnityEngine;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace MudLike.Core.Systems
{
    /// <summary>
    /// –°–ò–°–¢–ï–ú–ê –ó–ê–©–ò–¢–´ –û–¢ –ü–ï–†–ï–ì–†–ï–í–ê –ù–û–£–¢–ë–£–ö–ê
    /// –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–≥—Ä–µ–≤–∞ IDE Cursor
    /// </summary>
    [UpdateInGroup(typeof(InitializationSystemGroup))]
    public partial class OverheatProtectionSystem : SystemBase
    {
        // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Ä–æ–≥–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        private const float CRITICAL_TEMP_THRESHOLD = 85f; // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU
        private const float WARNING_TEMP_THRESHOLD = 75f;  // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–≥—Ä–µ–≤–µ
        private const float SAFE_TEMP_THRESHOLD = 65f;     // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—â–∏—Ç—ã
        private const float TEMP_CHECK_INTERVAL = 1f;      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        private const float EMERGENCY_COOLDOWN_TIME = 5f;  // –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥
        private const int MAX_FPS_EMERGENCY = 15;          // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π FPS –≤ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
        private const int MAX_FPS_WARNING = 30;            // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π FPS –ø—Ä–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–∏
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        private float _lastTempCheck;
        private float _currentCPUTemp;
        private OverheatState _currentState;
        private float _emergencyStartTime;
        private bool _emergencyModeActive;
        
        // –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        private int _originalTargetFPS;
        private int _originalQualityLevel;
        private bool _originalVSync;
        
        public enum OverheatState
        {
            Safe,           // –ë–µ–∑–æ–ø–∞—Å–Ω–æ
            Warning,        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            Critical,       // –ö—Ä–∏—Ç–∏—á–Ω–æ
            Emergency       // –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
        }
        
        protected override void OnCreate()
        {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            _originalTargetFPS = Application.targetFrameRate;
            _originalQualityLevel = QualitySettings.GetQualityLevel();
            _originalVSync = QualitySettings.vSyncCount > 0;
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            SetConservativeSettings();
            
            Debug.Log("[OverheatProtection] –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –ø–µ—Ä–µ–≥—Ä–µ–≤–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!");
            Debug.Log($"[OverheatProtection] –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: FPS={_originalTargetFPS}, Quality={_originalQualityLevel}, VSync={_originalVSync}");
        }
        
        protected override void OnUpdate()
        {
            float currentTime = Time.time;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
            if (currentTime - _lastTempCheck >= TEMP_CHECK_INTERVAL)
            {
                CheckSystemTemperature();
                UpdateProtectionMeasures();
                _lastTempCheck = currentTime;
            }
            
            // –í —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É
            if (_emergencyModeActive)
            {
                EnforceEmergencyLimits();
            }
        }
        
        private void CheckSystemTemperature()
        {
            _currentCPUTemp = GetCPUTemperature();
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
            if (_currentCPUTemp >= CRITICAL_TEMP_THRESHOLD)
            {
                if (_currentState != OverheatState.Emergency)
                {
                    _currentState = OverheatState.Emergency;
                    _emergencyModeActive = true;
                    _emergencyStartTime = Time.time;
                    ActivateEmergencyMode();
                }
            }
            else if (_currentCPUTemp >= WARNING_TEMP_THRESHOLD)
            {
                if (_currentState != OverheatState.Critical)
                {
                    _currentState = OverheatState.Critical;
                    ActivateCriticalMode();
                }
            }
            else if (_currentCPUTemp >= SAFE_TEMP_THRESHOLD)
            {
                if (_currentState != OverheatState.Warning)
                {
                    _currentState = OverheatState.Warning;
                    ActivateWarningMode();
                }
            }
            else
            {
                if (_currentState != OverheatState.Safe)
                {
                    _currentState = OverheatState.Safe;
                    _emergencyModeActive = false;
                    RestoreNormalMode();
                }
            }
            
            // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            if (Time.time % 5f < 1f)
            {
                LogTemperatureStatus();
            }
        }
        
        private void UpdateProtectionMeasures()
        {
            switch (_currentState)
            {
                case OverheatState.Safe:
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    RestoreNormalMode();
                    break;
                    
                case OverheatState.Warning:
                    // –°–Ω–∏–∂–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏ FPS
                    SetQualityLevel(1);
                    SetTargetFPS(45);
                    break;
                    
                case OverheatState.Critical:
                    // –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —Å–Ω–∏–∂–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É
                    SetQualityLevel(0);
                    SetTargetFPS(30);
                    DisableVSync();
                    break;
                    
                case OverheatState.Emergency:
                    // –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –º–µ—Ä—ã
                    SetQualityLevel(0);
                    SetTargetFPS(MAX_FPS_EMERGENCY);
                    DisableVSync();
                    ForceGarbageCollection();
                    break;
            }
        }
        
        private void ActivateEmergencyMode()
        {
            Debug.LogError($"[OverheatProtection] üö® –≠–ö–°–¢–†–ï–ù–ù–´–ô –†–ï–ñ–ò–ú! –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU: {_currentCPUTemp:F1}¬∞C");
            Debug.LogError("[OverheatProtection] –ü—Ä–∏–º–µ–Ω—è—é—Ç—Å—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –º–µ—Ä—ã –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è!");
            
            // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            SetQualityLevel(0);
            SetTargetFPS(MAX_FPS_EMERGENCY);
            DisableVSync();
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
            ForceGarbageCollection();
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
            PauseNonEssentialSystems();
        }
        
        private void ActivateCriticalMode()
        {
            Debug.LogWarning($"[OverheatProtection] ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –¢–ï–ú–ü–ï–†–ê–¢–£–†–ê! CPU: {_currentCPUTemp:F1}¬∞C");
            
            SetQualityLevel(0);
            SetTargetFPS(MAX_FPS_WARNING);
            DisableVSync();
        }
        
        private void ActivateWarningMode()
        {
            Debug.Log($"[OverheatProtection] ‚ö° –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–≥—Ä–µ–≤–µ. CPU: {_currentCPUTemp:F1}¬∞C");
            
            SetQualityLevel(1);
            SetTargetFPS(45);
        }
        
        private void RestoreNormalMode()
        {
            if (_currentCPUTemp < SAFE_TEMP_THRESHOLD)
            {
                Debug.Log($"[OverheatProtection] ‚úÖ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–ª–∞—Å—å. CPU: {_currentCPUTemp:F1}¬∞C");
                
                // –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                SetQualityLevel(_originalQualityLevel);
                SetTargetFPS(_originalTargetFPS);
                if (_originalVSync) EnableVSync();
            }
        }
        
        private void EnforceEmergencyLimits()
        {
            // –í —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É
            if (Time.time - _emergencyStartTime > EMERGENCY_COOLDOWN_TIME)
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –≤—ã–π—Ç–∏ –∏–∑ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
                if (_currentCPUTemp < WARNING_TEMP_THRESHOLD)
                {
                    _emergencyModeActive = false;
                    Debug.Log("[OverheatProtection] –í—ã—Ö–æ–¥ –∏–∑ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞");
                }
            }
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º FPS
            Application.targetFrameRate = MAX_FPS_EMERGENCY;
            
            // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
            QualitySettings.SetQualityLevel(0);
        }
        
        private void SetConservativeSettings()
        {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            SetQualityLevel(1);
            SetTargetFPS(45);
            EnableVSync();
        }
        
        private void SetQualityLevel(int level)
        {
            level = math.clamp(level, 0, 3);
            QualitySettings.SetQualityLevel(level);
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
            switch (level)
            {
                case 0: // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                    QualitySettings.pixelLightCount = 1;
                    QualitySettings.shadowResolution = ShadowResolution.Low;
                    QualitySettings.shadowDistance = 20f;
                    QualitySettings.lodBias = 2f;
                    break;
                case 1: // –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                    QualitySettings.pixelLightCount = 2;
                    QualitySettings.shadowResolution = ShadowResolution.Low;
                    QualitySettings.shadowDistance = 50f;
                    QualitySettings.lodBias = 1.5f;
                    break;
            }
        }
        
        private void SetTargetFPS(int fps)
        {
            Application.targetFrameRate = fps;
        }
        
        private void EnableVSync()
        {
            QualitySettings.vSyncCount = 1;
        }
        
        private void DisableVSync()
        {
            QualitySettings.vSyncCount = 0;
        }
        
        private void ForceGarbageCollection()
        {
            System.GC.Collect();
            System.GC.WaitForPendingFinalizers();
            System.GC.Collect();
        }
        
        private void PauseNonEssentialSystems()
        {
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
            // –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–∏—Å—Ç–µ–º—ã —á–∞—Å—Ç–∏—Ü, –∞—É–¥–∏–æ, —ç—Ñ—Ñ–µ–∫—Ç—ã
        }
        
        private void LogTemperatureStatus()
        {
            string statusIcon = GetStatusIcon(_currentState);
            Debug.Log($"[OverheatProtection] {statusIcon} CPU: {_currentCPUTemp:F1}¬∞C | " +
                     $"FPS: {Application.targetFrameRate} | Quality: {QualitySettings.GetQualityLevel()} | " +
                     $"State: {_currentState}");
        }
        
        private string GetStatusIcon(OverheatState state)
        {
            switch (state)
            {
                case OverheatState.Safe: return "‚úÖ";
                case OverheatState.Warning: return "‚ö†Ô∏è";
                case OverheatState.Critical: return "üî•";
                case OverheatState.Emergency: return "üö®";
                default: return "‚ùì";
            }
        }
        
        private float GetCPUTemperature()
        {
            // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É CPU (—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ –Ω–∞ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º–∞—Ö)
            try
            {
                if (Application.platform == RuntimePlatform.WindowsEditor || 
                    Application.platform == RuntimePlatform.WindowsPlayer)
                {
                    return GetWindowsCPUTemperature();
                }
                else if (Application.platform == RuntimePlatform.LinuxEditor || 
                         Application.platform == RuntimePlatform.LinuxPlayer)
                {
                    return GetLinuxCPUTemperature();
                }
            }
            catch (System.Exception e)
            {
                Debug.LogWarning($"[OverheatProtection] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É CPU: {e.Message}");
            }
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            return 50f;
        }
        
        private float GetWindowsCPUTemperature()
        {
            // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è Windows
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å WMI –∏–ª–∏ –¥—Ä—É–≥–∏–µ API
            return 60f; // –ó–∞–≥–ª—É—à–∫–∞
        }
        
        private float GetLinuxCPUTemperature()
        {
            // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è Linux
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –º–æ–∂–Ω–æ —á–∏—Ç–∞—Ç—å /sys/class/thermal/
            return 55f; // –ó–∞–≥–ª—É—à–∫–∞
        }
        
        /// <summary>
        /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
        /// </summary>
        public void ForceEmergencyMode()
        {
            _currentState = OverheatState.Emergency;
            _emergencyModeActive = true;
            _emergencyStartTime = Time.time;
            ActivateEmergencyMode();
        }
        
        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        /// </summary>
        public OverheatState GetCurrentState()
        {
            return _currentState;
        }
        
        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É CPU
        /// </summary>
        public float GetCurrentTemperature()
        {
            return _currentCPUTemp;
        }
    }
}