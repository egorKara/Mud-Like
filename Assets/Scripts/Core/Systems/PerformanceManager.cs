using Unity.Entities;
using Unity.Mathematics;
using UnityEngine;

namespace MudLike.Core.Systems
{
    /// <summary>
    /// –ì–õ–ê–í–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨–Æ
    /// –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–≥—Ä–µ–≤–∞ –Ω–æ—É—Ç–±—É–∫–∞
    /// </summary>
    [UpdateInGroup(typeof(InitializationSystemGroup))]
    public partial class PerformanceManager : SystemBase
    {
        // –°—Å—ã–ª–∫–∏ –Ω–∞ —Å–∏—Å—Ç–µ–º—ã
        private OverheatProtectionSystem _overheatProtection;
        private SystemResourceMonitor _resourceMonitor;
        private AdaptiveQualitySystem _adaptiveQuality;
        private PerformanceMonitorSystem _performanceMonitor;
        private FrameRateLimiterSystem _frameRateLimiter;
        private GPUOptimizationSystem _gpuOptimizer;
        private MemoryOptimizationSystem _memoryOptimizer;
        private CPUOptimizationSystem _cpuOptimizer;
        private PerformanceUISystem _performanceUI;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        private const float COORDINATION_INTERVAL = 1f;  // –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        private float _lastCoordinationTime;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        private bool _allSystemsInitialized;
        private bool _emergencyModeActive;
        private PerformanceLevel _currentPerformanceLevel;
        
        public enum PerformanceLevel
        {
            Emergency,  // –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
            Critical,   // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º - –æ—á–µ–Ω—å –Ω–∏–∑–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
            Low,        // –ù–∏–∑–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - –Ω–∏–∑–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
            Medium,     // –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - —Å—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞
            High        // –í—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - –≤—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
        }
        
        protected override void OnCreate()
        {
            Debug.Log("[PerformanceManager] üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é");
            Debug.Log("[PerformanceManager] ‚ö†Ô∏è –ü–†–ò–û–†–ò–¢–ï–¢: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø–µ—Ä–µ–≥—Ä–µ–≤–∞ –Ω–æ—É—Ç–±—É–∫–∞!");
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            InitializeSystems();
        }
        
        protected override void OnUpdate()
        {
            if (!_allSystemsInitialized) return;
            
            float currentTime = Time.time;
            
            // –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
            if (currentTime - _lastCoordinationTime >= COORDINATION_INTERVAL)
            {
                CoordinateSystems();
                _lastCoordinationTime = currentTime;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏
            CheckEmergencyConditions();
        }
        
        private void InitializeSystems()
        {
            try
            {
                // 1. –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                _overheatProtection = World.GetOrCreateSystemManaged<OverheatProtectionSystem>();
                _resourceMonitor = World.GetOrCreateSystemManaged<SystemResourceMonitor>();
                _performanceMonitor = World.GetOrCreateSystemManaged<PerformanceMonitorSystem>();
                
                // 2. –ó–∞—Ç–µ–º —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                _adaptiveQuality = World.GetOrCreateSystemManaged<AdaptiveQualitySystem>();
                _frameRateLimiter = World.GetOrCreateSystemManaged<FrameRateLimiterSystem>();
                _gpuOptimizer = World.GetOrCreateSystemManaged<GPUOptimizationSystem>();
                _memoryOptimizer = World.GetOrCreateSystemManaged<MemoryOptimizationSystem>();
                _cpuOptimizer = World.GetOrCreateSystemManaged<CPUOptimizationSystem>();
                
                // 3. –ù–∞–∫–æ–Ω–µ—Ü UI
                _performanceUI = World.GetOrCreateSystemManaged<PerformanceUISystem>();
                
                _allSystemsInitialized = true;
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                SetConservativeSettings();
                
                Debug.Log("[PerformanceManager] ‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");
                LogSystemStatus();
            }
            catch (System.Exception e)
            {
                Debug.LogError($"[PerformanceManager] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e.Message}");
            }
        }
        
        private void CoordinateSystems()
        {
            if (_resourceMonitor == null) return;
            
            var stats = _resourceMonitor.GetCurrentStats();
            var loadLevel = stats.LoadLevel;
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            PerformanceLevel newLevel = DeterminePerformanceLevel(stats);
            
            if (newLevel != _currentPerformanceLevel)
            {
                _currentPerformanceLevel = newLevel;
                ApplyPerformanceLevel(newLevel);
                LogPerformanceLevelChange(newLevel);
            }
            
            // –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
            CoordinateBasedOnLevel(newLevel, stats);
        }
        
        private PerformanceLevel DeterminePerformanceLevel(SystemResourceMonitor.SystemResourceStats stats)
        {
            // –ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if (stats.LoadLevel == SystemResourceMonitor.ResourceLoadLevel.Overloaded ||
                stats.CPUUsage > 90f || stats.RAMUsage > 95f || stats.GPUUsage > 95f)
            {
                return PerformanceLevel.Emergency;
            }
            
            if (stats.LoadLevel == SystemResourceMonitor.ResourceLoadLevel.Critical ||
                stats.CPUUsage > 80f || stats.RAMUsage > 85f || stats.GPUUsage > 90f)
            {
                return PerformanceLevel.Critical;
            }
            
            if (stats.LoadLevel == SystemResourceMonitor.ResourceLoadLevel.High ||
                stats.CPUUsage > 70f || stats.RAMUsage > 75f || stats.GPUUsage > 80f)
            {
                return PerformanceLevel.Low;
            }
            
            if (stats.LoadLevel == SystemResourceMonitor.ResourceLoadLevel.Medium ||
                stats.CPUUsage > 50f || stats.RAMUsage > 60f || stats.GPUUsage > 60f)
            {
                return PerformanceLevel.Medium;
            }
            
            return PerformanceLevel.High;
        }
        
        private void ApplyPerformanceLevel(PerformanceLevel level)
        {
            switch (level)
            {
                case PerformanceLevel.Emergency:
                    ApplyEmergencySettings();
                    break;
                case PerformanceLevel.Critical:
                    ApplyCriticalSettings();
                    break;
                case PerformanceLevel.Low:
                    ApplyLowSettings();
                    break;
                case PerformanceLevel.Medium:
                    ApplyMediumSettings();
                    break;
                case PerformanceLevel.High:
                    ApplyHighSettings();
                    break;
            }
        }
        
        private void ApplyEmergencySettings()
        {
            Debug.LogError("[PerformanceManager] üö® –≠–ö–°–¢–†–ï–ù–ù–´–ô –†–ï–ñ–ò–ú –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!");
            
            // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            Application.targetFrameRate = 15;
            QualitySettings.SetQualityLevel(0);
            QualitySettings.vSyncCount = 0;
            
            // –û—Ç–∫–ª—é—á–∞–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
            if (_performanceUI != null)
                _performanceUI.SetUIEnabled(false);
            
            _emergencyModeActive = true;
        }
        
        private void ApplyCriticalSettings()
        {
            Debug.LogWarning("[PerformanceManager] ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –†–ï–ñ–ò–ú –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!");
            
            Application.targetFrameRate = 30;
            QualitySettings.SetQualityLevel(0);
            QualitySettings.vSyncCount = 0;
            
            _emergencyModeActive = false;
        }
        
        private void ApplyLowSettings()
        {
            Debug.Log("[PerformanceManager] üî∂ –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏");
            
            Application.targetFrameRate = 45;
            QualitySettings.SetQualityLevel(1);
            QualitySettings.vSyncCount = 0;
            
            _emergencyModeActive = false;
        }
        
        private void ApplyMediumSettings()
        {
            Debug.Log("[PerformanceManager] üî∑ –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏");
            
            Application.targetFrameRate = 60;
            QualitySettings.SetQualityLevel(2);
            QualitySettings.vSyncCount = 1;
            
            _emergencyModeActive = false;
        }
        
        private void ApplyHighSettings()
        {
            Debug.Log("[PerformanceManager] üîµ –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏");
            
            Application.targetFrameRate = 90;
            QualitySettings.SetQualityLevel(3);
            QualitySettings.vSyncCount = 1;
            
            _emergencyModeActive = false;
        }
        
        private void CoordinateBasedOnLevel(PerformanceLevel level, SystemResourceMonitor.SystemResourceStats stats)
        {
            // –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            switch (level)
            {
                case PerformanceLevel.Emergency:
                    CoordinateEmergencyMode(stats);
                    break;
                case PerformanceLevel.Critical:
                    CoordinateCriticalMode(stats);
                    break;
                case PerformanceLevel.Low:
                    CoordinateLowMode(stats);
                    break;
                case PerformanceLevel.Medium:
                    CoordinateMediumMode(stats);
                    break;
                case PerformanceLevel.High:
                    CoordinateHighMode(stats);
                    break;
            }
        }
        
        private void CoordinateEmergencyMode(SystemResourceMonitor.SystemResourceStats stats)
        {
            // –í —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–Ω–∏–∂–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É
            if (_memoryOptimizer != null)
            {
                _memoryOptimizer.ClearAllCaches();
                System.GC.Collect();
            }
            
            if (_gpuOptimizer != null)
            {
                _gpuOptimizer.SetRenderQuality(0);
            }
        }
        
        private void CoordinateCriticalMode(SystemResourceMonitor.SystemResourceStats stats)
        {
            // –í –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ –∞–∫—Ç–∏–≤–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º
            if (_adaptiveQuality != null)
            {
                _adaptiveQuality.SetQualityLevel(0);
            }
            
            if (_frameRateLimiter != null)
            {
                _frameRateLimiter.SetTargetFrameRate(30);
                _frameRateLimiter.SetAdaptiveFPS(true);
            }
        }
        
        private void CoordinateLowMode(SystemResourceMonitor.SystemResourceStats stats)
        {
            // –í –Ω–∏–∑–∫–æ–º —Ä–µ–∂–∏–º–µ —É–º–µ—Ä–µ–Ω–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º
            if (_adaptiveQuality != null)
            {
                _adaptiveQuality.SetQualityLevel(1);
            }
            
            if (_frameRateLimiter != null)
            {
                _frameRateLimiter.SetTargetFrameRate(45);
            }
        }
        
        private void CoordinateMediumMode(SystemResourceMonitor.SystemResourceStats stats)
        {
            // –í —Å—Ä–µ–¥–Ω–µ–º —Ä–µ–∂–∏–º–µ –±–∞–ª–∞–Ω—Å–∏—Ä—É–µ–º
            if (_frameRateLimiter != null)
            {
                _frameRateLimiter.SetTargetFrameRate(60);
            }
        }
        
        private void CoordinateHighMode(SystemResourceMonitor.SystemResourceStats stats)
        {
            // –í –≤—ã—Å–æ–∫–æ–º —Ä–µ–∂–∏–º–µ –º–æ–∂–µ–º –ø–æ–∑–≤–æ–ª–∏—Ç—å –±–æ–ª—å—à–µ
            if (_frameRateLimiter != null)
            {
                _frameRateLimiter.SetTargetFrameRate(90);
            }
        }
        
        private void CheckEmergencyConditions()
        {
            if (_overheatProtection != null)
            {
                var overheatState = _overheatProtection.GetCurrentState();
                if (overheatState == OverheatProtectionSystem.OverheatState.Emergency)
                {
                    if (!_emergencyModeActive)
                    {
                        Debug.LogError("[PerformanceManager] üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø! –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∑–∞—â–∏—Ç—É!");
                        ApplyEmergencySettings();
                    }
                }
            }
        }
        
        private void SetConservativeSettings()
        {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            Application.targetFrameRate = 45;
            QualitySettings.SetQualityLevel(1);
            QualitySettings.vSyncCount = 1;
            
            Debug.Log("[PerformanceManager] üõ°Ô∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø–µ—Ä–µ–≥—Ä–µ–≤–∞");
        }
        
        private void LogSystemStatus()
        {
            Debug.Log("[PerformanceManager] üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º:");
            Debug.Log($"  - –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–≥—Ä–µ–≤–∞: {(_overheatProtection != null ? "‚úÖ" : "‚ùå")}");
            Debug.Log($"  - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤: {(_resourceMonitor != null ? "‚úÖ" : "‚ùå")}");
            Debug.Log($"  - –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {(_adaptiveQuality != null ? "‚úÖ" : "‚ùå")}");
            Debug.Log($"  - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ FPS: {(_frameRateLimiter != null ? "‚úÖ" : "‚ùå")}");
            Debug.Log($"  - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è GPU: {(_gpuOptimizer != null ? "‚úÖ" : "‚ùå")}");
            Debug.Log($"  - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏: {(_memoryOptimizer != null ? "‚úÖ" : "‚ùå")}");
            Debug.Log($"  - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è CPU: {(_cpuOptimizer != null ? "‚úÖ" : "‚ùå")}");
            Debug.Log($"  - UI –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {(_performanceUI != null ? "‚úÖ" : "‚ùå")}");
        }
        
        private void LogPerformanceLevelChange(PerformanceLevel level)
        {
            string levelName = GetPerformanceLevelName(level);
            string icon = GetPerformanceLevelIcon(level);
            Debug.Log($"[PerformanceManager] {icon} –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {levelName}");
        }
        
        private string GetPerformanceLevelName(PerformanceLevel level)
        {
            switch (level)
            {
                case PerformanceLevel.Emergency: return "–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π";
                case PerformanceLevel.Critical: return "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π";
                case PerformanceLevel.Low: return "–ù–∏–∑–∫–∏–π";
                case PerformanceLevel.Medium: return "–°—Ä–µ–¥–Ω–∏–π";
                case PerformanceLevel.High: return "–í—ã—Å–æ–∫–∏–π";
                default: return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
            }
        }
        
        private string GetPerformanceLevelIcon(PerformanceLevel level)
        {
            switch (level)
            {
                case PerformanceLevel.Emergency: return "üö®";
                case PerformanceLevel.Critical: return "üî•";
                case PerformanceLevel.Low: return "üî∂";
                case PerformanceLevel.Medium: return "üî∑";
                case PerformanceLevel.High: return "üîµ";
                default: return "‚ùì";
            }
        }
        
        /// <summary>
        /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
        /// </summary>
        public void ForceEmergencyMode()
        {
            Debug.LogError("[PerformanceManager] üö® –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ê–ö–¢–ò–í–ê–¶–ò–Ø –≠–ö–°–¢–†–ï–ù–ù–û–ì–û –†–ï–ñ–ò–ú–ê!");
            ApplyEmergencySettings();
        }
        
        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        /// </summary>
        public PerformanceLevel GetCurrentPerformanceLevel()
        {
            return _currentPerformanceLevel;
        }
        
        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
        /// </summary>
        public bool IsEmergencyModeActive()
        {
            return _emergencyModeActive;
        }
        
        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
        /// </summary>
        public string GetSystemStatus()
        {
            return $"–£—Ä–æ–≤–µ–Ω—å: {GetPerformanceLevelName(_currentPerformanceLevel)} | " +
                   $"–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º: {(_emergencyModeActive ? "–î–ê" : "–ù–ï–¢")} | " +
                   $"FPS: {Application.targetFrameRate} | " +
                   $"–ö–∞—á–µ—Å—Ç–≤–æ: {QualitySettings.GetQualityLevel()}";
        }
    }
}