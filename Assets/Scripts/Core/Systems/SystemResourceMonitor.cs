using Unity.Entities;
using Unity.Mathematics;
using UnityEngine;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Collections.Generic;

namespace MudLike.Core.Systems
{
    /// <summary>
    /// –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–∏—Å—Ç–µ–º—ã
    /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç CPU, RAM, GPU –Ω–∞–≥—Ä—É–∑–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–≥—Ä–µ–≤–∞
    /// </summary>
    [UpdateInGroup(typeof(InitializationSystemGroup))]
    public partial class SystemResourceMonitor : SystemBase
    {
        // –ü–æ—Ä–æ–≥–∏ –Ω–∞–≥—Ä—É–∑–∫–∏
        private const float HIGH_CPU_USAGE = 80f;      // –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ CPU
        private const float HIGH_RAM_USAGE = 85f;      // –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ RAM
        private const float HIGH_GPU_USAGE = 90f;      // –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ GPU
        
        // –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
        private const float RESOURCE_CHECK_INTERVAL = 0.5f;  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 500ms
        private const float DETAILED_CHECK_INTERVAL = 2f;    // –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        private float _lastResourceCheck;
        private float _lastDetailedCheck;
        private SystemResourceStats _currentStats;
        private List<float> _cpuHistory = new List<float>();
        private List<float> _ramHistory = new List<float>();
        private const int HISTORY_SIZE = 10;
        
        // –ü—Ä–æ—Ü–µ—Å—Å Unity
        private Process _unityProcess;
        private PerformanceCounter _cpuCounter;
        private PerformanceCounter _ramCounter;
        
        public struct SystemResourceStats
        {
            public float CPUUsage;
            public float RAMUsage;
            public float GPUUsage;
            public long TotalRAM;
            public long UsedRAM;
            public float Temperature;
            public bool IsOverloaded;
            public ResourceLoadLevel LoadLevel;
        }
        
        public enum ResourceLoadLevel
        {
            Low,        // < 50%
            Medium,     // 50-70%
            High,       // 70-85%
            Critical,   // 85-95%
            Overloaded  // > 95%
        }
        
        protected override void OnCreate()
        {
            InitializeMonitoring();
            Debug.Log("[SystemResourceMonitor] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–∏—Å—Ç–µ–º—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω");
        }
        
        protected override void OnDestroy()
        {
            CleanupMonitoring();
        }
        
        protected override void OnUpdate()
        {
            float currentTime = Time.time;
            
            // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
            if (currentTime - _lastResourceCheck >= RESOURCE_CHECK_INTERVAL)
            {
                UpdateResourceStats();
                _lastResourceCheck = currentTime;
            }
            
            // –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            if (currentTime - _lastDetailedCheck >= DETAILED_CHECK_INTERVAL)
            {
                PerformDetailedCheck();
                _lastDetailedCheck = currentTime;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–≥—Ä—É–∑–∫—É
            CheckForOverload();
        }
        
        private void InitializeMonitoring()
        {
            try
            {
                // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å Unity
                _unityProcess = Process.GetCurrentProcess();
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (Windows)
                if (Application.platform == RuntimePlatform.WindowsEditor || 
                    Application.platform == RuntimePlatform.WindowsPlayer)
                {
                    _cpuCounter = new PerformanceCounter("Process", "% Processor Time", _unityProcess.ProcessName);
                    _ramCounter = new PerformanceCounter("Process", "Working Set", _unityProcess.ProcessName);
                }
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                _currentStats = new SystemResourceStats();
            }
            catch (System.Exception e)
            {
                Debug.LogWarning($"[SystemResourceMonitor] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e.Message}");
            }
        }
        
        private void CleanupMonitoring()
        {
            _cpuCounter?.Dispose();
            _ramCounter?.Dispose();
        }
        
        private void UpdateResourceStats()
        {
            try
            {
                // CPU –Ω–∞–≥—Ä—É–∑–∫–∞
                float cpuUsage = GetCPUUsage();
                _currentStats.CPUUsage = cpuUsage;
                AddToHistory(_cpuHistory, cpuUsage);
                
                // RAM –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
                long ramUsage = GetRAMUsage();
                _currentStats.UsedRAM = ramUsage;
                _currentStats.TotalRAM = SystemInfo.systemMemorySize * 1024 * 1024; // MB to bytes
                _currentStats.RAMUsage = (float)ramUsage / _currentStats.TotalRAM * 100f;
                AddToHistory(_ramHistory, _currentStats.RAMUsage);
                
                // GPU –Ω–∞–≥—Ä—É–∑–∫–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
                _currentStats.GPUUsage = GetGPUUsage();
                
                // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
                _currentStats.Temperature = GetSystemTemperature();
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –Ω–∞–≥—Ä—É–∑–∫–∏
                _currentStats.LoadLevel = DetermineLoadLevel();
                _currentStats.IsOverloaded = _currentStats.LoadLevel >= ResourceLoadLevel.Critical;
            }
            catch (System.Exception e)
            {
                Debug.LogWarning($"[SystemResourceMonitor] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e.Message}");
            }
        }
        
        private void PerformDetailedCheck()
        {
            // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            LogDetailedStats();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–Ω–¥—ã
            CheckResourceTrends();
            
            // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è
            RecommendActions();
        }
        
        private void CheckForOverload()
        {
            if (_currentStats.IsOverloaded)
            {
                Debug.LogError($"[SystemResourceMonitor] üö® –ü–ï–†–ï–ì–†–£–ó–ö–ê –°–ò–°–¢–ï–ú–´! " +
                              $"CPU: {_currentStats.CPUUsage:F1}% | " +
                              $"RAM: {_currentStats.RAMUsage:F1}% | " +
                              $"GPU: {_currentStats.GPUUsage:F1}%");
                
                // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –º–µ—Ä—ã
                ActivateEmergencyMeasures();
            }
        }
        
        private float GetCPUUsage()
        {
            try
            {
                if (_cpuCounter != null)
                {
                    return _cpuCounter.NextValue();
                }
                
                // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ Process
                return _unityProcess.TotalProcessorTime.TotalMilliseconds / 
                       (System.Environment.TickCount - _unityProcess.StartTime.Ticks) * 100f;
            }
            catch
            {
                return 0f;
            }
        }
        
        private long GetRAMUsage()
        {
            try
            {
                if (_ramCounter != null)
                {
                    return (long)_ramCounter.NextValue();
                }
                
                // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
                return _unityProcess.WorkingSet64;
            }
            catch
            {
                return 0;
            }
        }
        
        private float GetGPUUsage()
        {
            // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ GPU –Ω–∞–≥—Ä—É–∑–∫–∏
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPU profiling API
            return QualitySettings.GetQualityLevel() * 25f; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        }
        
        private float GetSystemTemperature()
        {
            // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ API
            return 50f + (_currentStats.CPUUsage * 0.3f); // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        }
        
        private ResourceLoadLevel DetermineLoadLevel()
        {
            float maxUsage = math.max(_currentStats.CPUUsage, _currentStats.RAMUsage);
            maxUsage = math.max(maxUsage, _currentStats.GPUUsage);
            
            if (maxUsage >= 95f) return ResourceLoadLevel.Overloaded;
            if (maxUsage >= 85f) return ResourceLoadLevel.Critical;
            if (maxUsage >= 70f) return ResourceLoadLevel.High;
            if (maxUsage >= 50f) return ResourceLoadLevel.Medium;
            return ResourceLoadLevel.Low;
        }
        
        private void AddToHistory(List<float> history, float value)
        {
            history.Add(value);
            if (history.Count > HISTORY_SIZE)
            {
                history.RemoveAt(0);
            }
        }
        
        private void CheckResourceTrends()
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–Ω–¥—ã CPU
            if (_cpuHistory.Count >= 3)
            {
                float cpuTrend = CalculateTrend(_cpuHistory);
                if (cpuTrend > 10f) // –†–∞—Å—Ç—É—â–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
                {
                    Debug.LogWarning($"[SystemResourceMonitor] ‚ö†Ô∏è –†–∞—Å—Ç—É—â–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ CPU: +{cpuTrend:F1}%");
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–Ω–¥—ã RAM
            if (_ramHistory.Count >= 3)
            {
                float ramTrend = CalculateTrend(_ramHistory);
                if (ramTrend > 5f) // –†–∞—Å—Ç—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM
                {
                    Debug.LogWarning($"[SystemResourceMonitor] ‚ö†Ô∏è –†–∞—Å—Ç—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM: +{ramTrend:F1}%");
                }
            }
        }
        
        private float CalculateTrend(List<float> history)
        {
            if (history.Count < 2) return 0f;
            
            float sum = 0f;
            for (int i = 1; i < history.Count; i++)
            {
                sum += history[i] - history[i - 1];
            }
            return sum / (history.Count - 1);
        }
        
        private void RecommendActions()
        {
            if (_currentStats.LoadLevel >= ResourceLoadLevel.High)
            {
                string recommendations = GetRecommendations();
                Debug.Log($"[SystemResourceMonitor] üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {recommendations}");
            }
        }
        
        private string GetRecommendations()
        {
            List<string> recommendations = new List<string>();
            
            if (_currentStats.CPUUsage > HIGH_CPU_USAGE)
            {
                recommendations.Add("–°–Ω–∏–∑–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –≥—Ä–∞—Ñ–∏–∫–∏");
                recommendations.Add("–£–º–µ–Ω—å—à–∏—Ç—å FPS");
            }
            
            if (_currentStats.RAMUsage > HIGH_RAM_USAGE)
            {
                recommendations.Add("–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à");
                recommendations.Add("–ó–∞–∫—Ä—ã—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è");
            }
            
            if (_currentStats.GPUUsage > HIGH_GPU_USAGE)
            {
                recommendations.Add("–û—Ç–∫–ª—é—á–∏—Ç—å VSync");
                recommendations.Add("–°–Ω–∏–∑–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ");
            }
            
            return string.Join(", ", recommendations);
        }
        
        private void ActivateEmergencyMeasures()
        {
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –∑–∞—â–∏—Ç—ã –æ—Ç –ø–µ—Ä–µ–≥—Ä–µ–≤–∞
            var overheatProtection = World.GetExistingSystemManaged<OverheatProtectionSystem>();
            if (overheatProtection != null)
            {
                overheatProtection.ForceEmergencyMode();
            }
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –º–µ—Ä—ã
            Application.targetFrameRate = 15;
            QualitySettings.SetQualityLevel(0);
            QualitySettings.vSyncCount = 0;
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
            System.GC.Collect();
        }
        
        private void LogDetailedStats()
        {
            string statusIcon = GetLoadLevelIcon(_currentStats.LoadLevel);
            Debug.Log($"[SystemResourceMonitor] {statusIcon} " +
                     $"CPU: {_currentStats.CPUUsage:F1}% | " +
                     $"RAM: {_currentStats.RAMUsage:F1}% ({_currentStats.UsedRAM / (1024 * 1024)}MB) | " +
                     $"GPU: {_currentStats.GPUUsage:F1}% | " +
                     $"Temp: {_currentStats.Temperature:F1}¬∞C | " +
                     $"Level: {_currentStats.LoadLevel}");
        }
        
        private string GetLoadLevelIcon(ResourceLoadLevel level)
        {
            switch (level)
            {
                case ResourceLoadLevel.Low: return "üü¢";
                case ResourceLoadLevel.Medium: return "üü°";
                case ResourceLoadLevel.High: return "üü†";
                case ResourceLoadLevel.Critical: return "üî¥";
                case ResourceLoadLevel.Overloaded: return "üö®";
                default: return "‚ùì";
            }
        }
        
        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤
        /// </summary>
        public SystemResourceStats GetCurrentStats()
        {
            return _currentStats;
        }
        
        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ —Å–∏—Å—Ç–µ–º–∞
        /// </summary>
        public bool IsSystemOverloaded()
        {
            return _currentStats.IsOverloaded;
        }
        
        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –Ω–∞–≥—Ä—É–∑–∫–∏
        /// </summary>
        public ResourceLoadLevel GetLoadLevel()
        {
            return _currentStats.LoadLevel;
        }
    }
}