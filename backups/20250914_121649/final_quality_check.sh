#!/bin/bash

# –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ Unity

echo "üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê –ö–û–î–ê"
echo "===================================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo ""
echo "üîç –ü–†–û–í–ï–†–ö–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ê–°–ü–ï–ö–¢–û–í"
echo "================================"

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
echo -n "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏... "
if tail -100 /home/egor/.config/unity3d/Editor.log | grep -E "CS[0-9]+" | wc -l | grep -q "^0$"; then
    echo -e "${GREEN}‚úÖ –ü–†–û–ô–î–ï–ù–ê${NC}"
    compilation_ok=true
else
    echo -e "${RED}‚ùå –û–®–ò–ë–ö–ê${NC}"
    compilation_ok=false
fi

# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–Ω—Ç–µ—Ä–∞
echo -n "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–Ω—Ç–µ—Ä–∞... "
if [ -f "Assets/Scripts/Vehicles/Systems/OptimizedVehicleMovementSystem.cs" ]; then
    echo -e "${GREEN}‚úÖ –ü–†–û–ô–î–ï–ù–ê${NC}"
    linter_ok=true
else
    echo -e "${RED}‚ùå –û–®–ò–ë–ö–ê${NC}"
    linter_ok=false
fi

# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∏–º–µ–Ω
echo -n "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∏–º–µ–Ω... "
if ./check_duplicate_class_names.sh | grep -q "–í–°–ï –ò–ú–ï–ù–ê –ö–õ–ê–°–°–û–í –£–ù–ò–ö–ê–õ–¨–ù–´"; then
    echo -e "${GREEN}‚úÖ –ü–†–û–ô–î–ï–ù–ê${NC}"
    duplicates_ok=true
else
    echo -e "${RED}‚ùå –û–®–ò–ë–ö–ê${NC}"
    duplicates_ok=false
fi

# 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–ª–æ–∫–∞—Ç–æ—Ä–æ–≤
echo -n "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–ª–æ–∫–∞—Ç–æ—Ä–æ–≤ –ø–∞–º—è—Ç–∏... "
if grep -r "= new.*Allocator\.TempJob" Assets/Scripts --include="*.cs" | wc -l | grep -q "^0$"; then
    echo -e "${GREEN}‚úÖ –ü–†–û–ô–î–ï–ù–ê${NC}"
    allocators_ok=true
else
    echo -e "${RED}‚ùå –û–®–ò–ë–ö–ê${NC}"
    allocators_ok=false
fi

# 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
echo -n "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º... "
critical_issues=0

# –ü—Ä–æ–≤–µ—Ä—è–µ–º foreach –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö
if [ $(grep -r "foreach" Assets/Scripts/Vehicles/Systems --include="*.cs" | grep -v "OnDestroy" | wc -l) -gt 0 ]; then
    critical_issues=$((critical_issues + 1))
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º LINQ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö
if [ $(grep -r "\.Where(\|\.Select(\|\.First(\|\.Last(\|\.Any(\|\.All(" Assets/Scripts/Vehicles/Systems --include="*.cs" | wc -l) -gt 0 ]; then
    critical_issues=$((critical_issues + 1))
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º string concatenation –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö
if [ $(grep -r "string.*+" Assets/Scripts/Vehicles/Systems --include="*.cs" | wc -l) -gt 0 ]; then
    critical_issues=$((critical_issues + 1))
fi

if [ $critical_issues -eq 0 ]; then
    echo -e "${GREEN}‚úÖ –ü–†–û–ô–î–ï–ù–ê${NC}"
    performance_ok=true
else
    echo -e "${RED}‚ùå –û–®–ò–ë–ö–ê ($critical_issues –ø—Ä–æ–±–ª–µ–º)${NC}"
    performance_ok=false
fi

echo ""
echo "üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´"
echo "====================="

# –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
total_checks=5
passed_checks=0

if [ "$compilation_ok" = true ]; then passed_checks=$((passed_checks + 1)); fi
if [ "$linter_ok" = true ]; then passed_checks=$((passed_checks + 1)); fi
if [ "$duplicates_ok" = true ]; then passed_checks=$((passed_checks + 1)); fi
if [ "$allocators_ok" = true ]; then passed_checks=$((passed_checks + 1)); fi
if [ "$performance_ok" = true ]; then passed_checks=$((passed_checks + 1)); fi

echo -e "–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${BLUE}$total_checks${NC}"
echo -e "–ü—Ä–æ–π–¥–µ–Ω–æ: ${GREEN}$passed_checks${NC}"
echo -e "–ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: ${RED}$((total_checks - passed_checks))${NC}"

echo ""
echo "üéØ –°–¢–ê–¢–£–° –ö–ê–ß–ï–°–¢–í–ê –ü–†–û–ï–ö–¢–ê"
echo "=========================="

if [ $passed_checks -eq $total_checks ]; then
    echo -e "${GREEN}üèÜ –û–¢–õ–ò–ß–ù–û–ï –ö–ê–ß–ï–°–¢–í–û –ö–û–î–ê${NC}"
    echo -e "${GREEN}‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã${NC}"
    echo -e "${GREEN}‚úÖ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É${NC}"
    echo -e "${GREEN}‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª—É—á—à–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º Unity DOTS${NC}"
    echo -e "${GREEN}‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞${NC}"
    echo -e "${GREEN}‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ${NC}"
    exit 0
elif [ $passed_checks -ge 4 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  –•–û–†–û–®–ï–ï –ö–ê–ß–ï–°–¢–í–û –ö–û–î–ê${NC}"
    echo -e "${GREEN}‚úÖ –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  –ï—Å—Ç—å $((total_checks - passed_checks)) –ø—Ä–æ–±–ª–µ–º –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è${NC}"
    echo -e "${BLUE}üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ–±–ª–µ–º—ã${NC}"
    exit 0
else
    echo -e "${RED}‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –û–ë–ù–ê–†–£–ñ–ï–ù–´${NC}"
    echo -e "${RED}‚ùå $((total_checks - passed_checks)) –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º —Ç—Ä–µ–±—É—é—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è${NC}"
    echo -e "${RED}‚ùå –ü—Ä–æ–µ–∫—Ç –ù–ï –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É${NC}"
    echo -e "${BLUE}üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º${NC}"
    exit 1
fi

