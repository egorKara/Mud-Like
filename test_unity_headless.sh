#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Unity –ø—Ä–æ–µ–∫—Ç–∞ –≤ headless —Ä–µ–∂–∏–º–µ
# –ë–µ–∑ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –æ–±–æ–ª–æ—á–∫–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤

echo "üéÆ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï UNITY –ü–†–û–ï–ö–¢–ê –í HEADLESS –†–ï–ñ–ò–ú–ï"
echo "=============================================="
echo "–í—Ä–µ–º—è: $(date)"
echo ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Unity
UNITY_PATH=""
if command -v unity &> /dev/null; then
    UNITY_PATH="unity"
elif [ -f "/Applications/Unity/Hub/Editor/*/Unity.app/Contents/MacOS/Unity" ]; then
    UNITY_PATH="/Applications/Unity/Hub/Editor/*/Unity.app/Contents/MacOS/Unity"
elif [ -f "/opt/Unity/Editor/Unity" ]; then
    UNITY_PATH="/opt/Unity/Editor/Unity"
else
    echo "‚ùå Unity –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ"
    echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É Unity –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –≤—Ä—É—á–Ω—É—é"
    exit 1
fi

echo "‚úÖ Unity –Ω–∞–π–¥–µ–Ω: $UNITY_PATH"

# –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
PROJECT_PATH="/workspace"
echo "üìÅ –ü—Ä–æ–µ–∫—Ç: $PROJECT_PATH"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
mkdir -p logs
LOG_FILE="logs/unity_headless_test_$(date +%Y%m%d_%H%M%S).log"

echo "üìù –õ–æ–≥ —Ñ–∞–π–ª: $LOG_FILE"
echo ""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Unity —Ç–µ—Å—Ç–æ–≤
run_unity_tests() {
    echo "üß™ –ó–∞–ø—É—Å–∫ Unity Test Framework..."
    
    $UNITY_PATH \
        -batchmode \
        -nographics \
        -projectPath "$PROJECT_PATH" \
        -runTests \
        -testResults "logs/test_results.xml" \
        -logFile "$LOG_FILE" \
        -quit
    
    local exit_code=$?
    
    if [ $exit_code -eq 0 ]; then
        echo "‚úÖ –¢–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
    else
        echo "‚ùå –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: $exit_code)"
    fi
    
    return $exit_code
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
run_custom_tests() {
    echo "üîß –ó–∞–ø—É—Å–∫ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤..."
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    cat > "TempTestScript.cs" << 'EOF'
using UnityEngine;
using Unity.Entities;
using Unity.Collections;
using Unity.Mathematics;
using Unity.Transforms;
using Unity.Burst;

public class HeadlessTestRunner : MonoBehaviour
{
    [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterSceneLoad)]
    static void RunHeadlessTests()
    {
        Debug.Log("üöÄ –ó–∞–ø—É—Å–∫ headless —Ç–µ—Å—Ç–æ–≤...");
        
        // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ ECS —Å–∏—Å—Ç–µ–º
        TestECSSystems();
        
        // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≥—Ä—É–∑–æ–≤–∏–∫–∞
        TestTruckComponents();
        
        // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∑–∞—â–∏—Ç—ã –æ—Ç –ø–µ—Ä–µ–≥—Ä–µ–≤–∞
        TestOverheatProtection();
        
        Debug.Log("‚úÖ –í—Å–µ headless —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã");
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º Unity
        #if UNITY_EDITOR
        UnityEditor.EditorApplication.Exit(0);
        #endif
    }
    
    static void TestECSSystems()
    {
        Debug.Log("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ECS —Å–∏—Å—Ç–µ–º...");
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã ECS —Å–∏—Å—Ç–µ–º
        // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Entity —Å TruckData
        
        Debug.Log("‚úÖ ECS —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    }
    
    static void TestTruckComponents()
    {
        Debug.Log("üöõ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≥—Ä—É–∑–æ–≤–∏–∫–∞...");
        
        // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è TruckData
        var truckData = new TruckData
        {
            Mass = 15000f,
            EnginePower = 400f,
            MaxTorque = 1200f,
            EngineRPM = 0f,
            CurrentGear = 1,
            MaxSpeed = 80f,
            CurrentSpeed = 0f,
            SteeringAngle = 0f,
            MaxSteeringAngle = 35f,
            TractionCoefficient = 0.8f,
            FuelLevel = 1f,
            EngineRunning = false,
            HandbrakeOn = true,
            LockFrontDifferential = false,
            LockMiddleDifferential = false,
            LockRearDifferential = false,
            LockCenterDifferential = false
        };
        
        Debug.Log($"‚úÖ TruckData —Å–æ–∑–¥–∞–Ω: –ú–∞—Å—Å–∞={truckData.Mass}–∫–≥, –ú–æ—â–Ω–æ—Å—Ç—å={truckData.EnginePower}–ª.—Å.");
    }
    
    static void TestOverheatProtection()
    {
        Debug.Log("üõ°Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∑–∞—â–∏—Ç—ã –æ—Ç –ø–µ—Ä–µ–≥—Ä–µ–≤–∞...");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –ø–µ—Ä–µ–≥—Ä–µ–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
        var cpuLoad = SystemInfo.processorCount;
        var memoryUsage = SystemInfo.systemMemorySize;
        
        Debug.Log($"üìä –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã: CPU cores={cpuLoad}, RAM={memoryUsage}MB");
        
        if (cpuLoad > 0 && memoryUsage > 0)
        {
            Debug.Log("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –ø–µ—Ä–µ–≥—Ä–µ–≤–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å");
        }
        else
        {
            Debug.Log("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤");
        }
    }
}
EOF

    # –ó–∞–ø—É—Å–∫–∞–µ–º Unity —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ —Ç–µ—Å—Ç–∞–º–∏
    $UNITY_PATH \
        -batchmode \
        -nographics \
        -projectPath "$PROJECT_PATH" \
        -executeMethod "HeadlessTestRunner.RunHeadlessTests" \
        -logFile "$LOG_FILE" \
        -quit
    
    local exit_code=$?
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    rm -f "TempTestScript.cs"
    
    if [ $exit_code -eq 0 ]; then
        echo "‚úÖ –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
    else
        echo "‚ùå –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: $exit_code)"
    fi
    
    return $exit_code
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
check_results() {
    echo ""
    echo "üìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:"
    echo "======================"
    
    if [ -f "$LOG_FILE" ]; then
        echo "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –ª–æ–≥–∞:"
        tail -20 "$LOG_FILE" | sed 's/^/   /'
    fi
    
    if [ -f "logs/test_results.xml" ]; then
        echo ""
        echo "üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:"
        if command -v xmllint &> /dev/null; then
            xmllint --format "logs/test_results.xml" 2>/dev/null | head -30
        else
            cat "logs/test_results.xml" | head -20
        fi
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
echo "üöÄ –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Unity –ø—Ä–æ–µ–∫—Ç–∞..."
echo ""

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
echo "1Ô∏è‚É£ –ó–∞–ø—É—Å–∫ Unity Test Framework..."
run_unity_tests
UNITY_TESTS_EXIT=$?

echo ""
echo "2Ô∏è‚É£ –ó–∞–ø—É—Å–∫ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤..."
run_custom_tests
CUSTOM_TESTS_EXIT=$?

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
check_results

echo ""
echo "üìà –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–°:"
echo "=================="

if [ $UNITY_TESTS_EXIT -eq 0 ] && [ $CUSTOM_TESTS_EXIT -eq 0 ]; then
    echo "‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!"
    echo "üéÆ Unity –ø—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
    exit 0
else
    echo "‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´"
    echo "üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π"
    exit 1
fi