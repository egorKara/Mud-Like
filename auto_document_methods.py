#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫ –º–µ—Ç–æ–¥–∞–º C#
–°–æ–∑–¥–∞–Ω: 14 —Å–µ–Ω—Ç—è–±—Ä—è 2025
–¶–µ–ª—å: –£–ª—É—á—à–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ MudRunner-like
"""

import os
import re
import sys

def analyze_csharp_file(file_path):
    """–ê–Ω–∞–ª–∏–∑ C# —Ñ–∞–π–ª–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –º–µ—Ç–æ–¥–æ–≤ –±–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ü–æ–∏—Å–∫ –ø—É–±–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    method_pattern = r'public\s+[^{]+\s+(\w+)\s*\('
    methods = re.findall(method_pattern, content)
    
    # –ü–æ–∏—Å–∫ –º–µ—Ç–æ–¥–æ–≤ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π
    documented_pattern = r'/// <summary>.*?/// </summary>'
    documented_methods = re.findall(documented_pattern, content, re.DOTALL)
    
    return len(methods), len(documented_methods)

def generate_documentation_template(method_name, file_path):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –º–µ—Ç–æ–¥–∞"""
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if 'Vehicle' in file_path or 'vehicle' in file_path:
        context = "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞"
        remarks = "–ö—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π —Ñ–∏–∑–∏–∫–∏ MudRunner-like"
    elif 'Terrain' in file_path or 'terrain' in file_path:
        context = "–¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç–µ—Ä—Ä–µ–π–Ω–∞"
        remarks = "–ö—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ MudRunner-like"
    elif 'Network' in file_path or 'network' in file_path:
        context = "–º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞"
        remarks = "–ö—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞ MudRunner-like"
    elif 'Physics' in file_path or 'physics' in file_path:
        context = "—Ñ–∏–∑–∏–∫–∏"
        remarks = "–ö—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è Unity Physics (DOTS)"
    else:
        context = "—Å–∏—Å—Ç–µ–º—ã"
        remarks = "–í–∞–∂–Ω–æ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ MudRunner-like"
    
    template = f"""/// <summary>
/// –û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ {method_name} –¥–ª—è {context}
/// </summary>
/// <returns>–û–ø–∏—Å–∞–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è</returns>
/// <remarks>
/// {remarks}
/// </remarks>"""
    
    return template

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üìö –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –£–õ–£–ß–®–ï–ù–ò–ï –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò")
    print("======================================")
    
    # –ü–æ–∏—Å–∫ C# —Ñ–∞–π–ª–æ–≤
    csharp_files = []
    for root, dirs, files in os.walk('Assets'):
        for file in files:
            if file.endswith('.cs'):
                csharp_files.append(os.path.join(root, file))
    
    total_methods = 0
    total_documented = 0
    
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(csharp_files)} C# —Ñ–∞–π–ª–æ–≤")
    
    for file_path in csharp_files:
        methods, documented = analyze_csharp_file(file_path)
        total_methods += methods
        total_documented += documented
        
        if methods > 0:
            percentage = (documented / methods * 100) if methods > 0 else 0
            print(f"  üìÑ {os.path.basename(file_path)}: {methods} –º–µ—Ç–æ–¥–æ–≤, {documented} –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö ({percentage:.1f}%)")
    
    print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"  üìù –í—Å–µ–≥–æ –º–µ—Ç–æ–¥–æ–≤: {total_methods}")
    print(f"  ‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {total_documented}")
    print(f"  ‚ùå –ù–µ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {total_methods - total_documented}")
    
    if total_methods > 0:
        percentage = (total_documented / total_methods * 100)
        print(f"  üìà –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {percentage:.1f}%")

if __name__ == "__main__":
    main()
