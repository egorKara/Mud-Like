#!/bin/bash

# –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è MudRunner-like
# –°–æ–∑–¥–∞–Ω: 14 —Å–µ–Ω—Ç—è–±—Ä—è 2025
# –¶–µ–ª—å: –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–µ–∫—Ç–∞

echo "üìä –ù–ï–ü–†–ï–†–´–í–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì –ö–ê–ß–ï–°–¢–í–ê MUD-LIKE"
echo "==========================================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
QUALITY_LOG="quality_monitor.log"
MONITOR_INTERVAL=60  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
log_quality() {
    local message="$1"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] $message" | tee -a "$QUALITY_LOG"
}

# –§—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
monitor_code_quality() {
    echo "üîç –ú–û–ù–ò–¢–û–†–ò–ù–ì –ö–ê–ß–ï–°–¢–í–ê –ö–û–î–ê"
    echo "============================"
    
    # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    local compilation_errors=$(tail -50 /home/egor/.config/unity3d/Editor.log 2>/dev/null | grep -c "CS[0-9]\+" 2>/dev/null | head -1 || echo "0")
    local cs_files=$(find Assets -name "*.cs" | wc -l | tr -d ' ')
    local total_lines=$(find Assets -name "*.cs" -exec wc -l {} + 2>/dev/null | tail -1 | awk '{print $1}' || echo "0")
    
    echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–¥–∞:"
    echo "  üìÅ –§–∞–π–ª–æ–≤ C#: $cs_files"
    echo "  üìù –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: $total_lines"
    echo "  ‚ùå –û—à–∏–±–æ–∫ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏: $compilation_errors"
    
    # –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º MudRunner-like
    local vehicle_files=$(find Assets -path "*/Vehicles/*" -name "*.cs" | wc -l | tr -d ' ')
    local terrain_files=$(find Assets -path "*/Terrain/*" -name "*.cs" | wc -l | tr -d ' ')
    local network_files=$(find Assets -path "*/Networking/*" -name "*.cs" | wc -l | tr -d ' ')
    
    echo "üéØ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã MudRunner-like:"
    echo "  üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞: $vehicle_files —Ñ–∞–π–ª–æ–≤"
    echo "  üèîÔ∏è  –î–µ—Ñ–æ—Ä–º–∞—Ü–∏—è —Ç–µ—Ä—Ä–µ–π–Ω–∞: $terrain_files —Ñ–∞–π–ª–æ–≤"
    echo "  üåê –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä: $network_files —Ñ–∞–π–ª–æ–≤"
    
    # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    if [ "$compilation_errors" -eq 0 ] && [ "$cs_files" -gt 100 ]; then
        echo -e "  ${GREEN}‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞${NC}"
        log_quality "QUALITY: –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ - $cs_files —Ñ–∞–π–ª–æ–≤, $total_lines —Å—Ç—Ä–æ–∫"
    elif [ "$compilation_errors" -eq 0 ]; then
        echo -e "  ${YELLOW}‚ö†Ô∏è  –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞${NC}"
        log_quality "QUALITY: –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ - $cs_files —Ñ–∞–π–ª–æ–≤, $total_lines —Å—Ç—Ä–æ–∫"
    else
        echo -e "  ${RED}‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞${NC}"
        log_quality "ERROR: –¢—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ - $compilation_errors –æ—à–∏–±–æ–∫"
    fi
    
    return $compilation_errors
}

# –§—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
monitor_performance() {
    echo ""
    echo "‚ö° –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò"
    echo "================================"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Unity –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    local unity_processes=$(ps aux | grep Unity | grep -v grep | wc -l | head -1 || echo "0")
    local memory_usage=$(ps aux | grep Unity | grep -v grep | awk '{sum+=$6} END {print sum/1024}' | cut -d. -f1 || echo "0")
    
    echo "üñ•Ô∏è  –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:"
    echo "  üîÑ Unity –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: $unity_processes"
    echo "  üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${memory_usage}MB"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ECS
    local burst_systems=$(find Assets -name "*.cs" -exec grep -c "BurstCompile" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
    local job_systems=$(find Assets -name "*.cs" -exec grep -c "IJob" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
    local native_collections=$(find Assets -name "*.cs" -exec grep -c "NativeArray\|NativeList" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
    
    echo "‚ö° ECS –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:"
    echo "  üöÄ Burst —Å–∏—Å—Ç–µ–º: $burst_systems"
    echo "  üîÑ Job —Å–∏—Å—Ç–µ–º: $job_systems"
    echo "  üì¶ Native Collections: $native_collections"
    
    # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if [ "$burst_systems" -gt 50 ] && [ "$job_systems" -gt 10 ] && [ "$memory_usage" -lt 1000 ]; then
        echo -e "  ${GREEN}‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å${NC}"
        log_quality "PERFORMANCE: –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - $burst_systems Burst, $job_systems Jobs"
    elif [ "$burst_systems" -gt 20 ] && [ "$memory_usage" -lt 1500 ]; then
        echo -e "  ${YELLOW}‚ö†Ô∏è  –•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å${NC}"
        log_quality "PERFORMANCE: –•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - $burst_systems Burst, $job_systems Jobs"
    else
        echo -e "  ${RED}‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏${NC}"
        log_quality "WARNING: –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ - $memory_usage MB –ø–∞–º—è—Ç–∏"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ü–µ–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞
monitor_project_alignment() {
    echo ""
    echo "üéØ –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø –¶–ï–õ–ò –ü–†–û–ï–ö–¢–ê"
    echo "======================================="
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ (MudRunner-like)
    local vehicle_physics=$(find Assets -name "*.cs" -exec grep -l "VehiclePhysics\|WheelPhysics" {} \; 2>/dev/null | wc -l | tr -d ' ')
    local realistic_physics=$(find Assets -name "*.cs" -exec grep -c "realistic\|Realistic\|mud\|Mud" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
    
    echo "üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ (MudRunner-like):"
    echo "  ‚ö° –§–∏–∑–∏–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤: $vehicle_physics —Ñ–∞–π–ª–æ–≤"
    echo "  üèîÔ∏è  –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —Ñ–∏–∑–∏–∫–∞: $realistic_physics —É–ø–æ–º–∏–Ω–∞–Ω–∏–π"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç–µ—Ä—Ä–µ–π–Ω–∞
    local terrain_deformation=$(find Assets -name "*.cs" -exec grep -l "deformation\|Deformation\|Terrain" {} \; 2>/dev/null | wc -l | tr -d ' ')
    local mud_systems=$(find Assets -name "*.cs" -exec grep -c "MudManager\|mud\|Mud" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
    
    echo "üèîÔ∏è  –î–µ—Ñ–æ—Ä–º–∞—Ü–∏—è —Ç–µ—Ä—Ä–µ–π–Ω–∞:"
    echo "  üîß –°–∏—Å—Ç–µ–º—ã –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏: $terrain_deformation —Ñ–∞–π–ª–æ–≤"
    echo "  üèîÔ∏è  –°–∏—Å—Ç–µ–º—ã –≥—Ä—è–∑–∏: $mud_systems —É–ø–æ–º–∏–Ω–∞–Ω–∏–π"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞
    local network_systems=$(find Assets -name "*.cs" -exec grep -l "Network\|network\|Netcode" {} \; 2>/dev/null | wc -l | tr -d ' ')
    local deterministic=$(find Assets -name "*.cs" -exec grep -c "deterministic\|Deterministic\|fixedDeltaTime" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
    
    echo "üåê –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä:"
    echo "  üîÑ –°–µ—Ç–µ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã: $network_systems —Ñ–∞–π–ª–æ–≤"
    echo "  üéØ –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã: $deterministic —É–ø–æ–º–∏–Ω–∞–Ω–∏–π"
    
    # –û—Ü–µ–Ω–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ü–µ–ª–∏
    local total_score=$((vehicle_physics + terrain_deformation + network_systems + realistic_physics + mud_systems + deterministic))
    
    if [ "$total_score" -gt 100 ]; then
        echo -e "  ${GREEN}‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–µ–ª–∏ MudRunner-like${NC}"
        log_quality "ALIGNMENT: –û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–µ–ª–∏ - $total_score –±–∞–ª–ª–æ–≤"
    elif [ "$total_score" -gt 50 ]; then
        echo -e "  ${YELLOW}‚ö†Ô∏è  –•–æ—Ä–æ—à–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–µ–ª–∏${NC}"
        log_quality "ALIGNMENT: –•–æ—Ä–æ—à–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–µ–ª–∏ - $total_score –±–∞–ª–ª–æ–≤"
    else
        echo -e "  ${RED}‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ü–µ–ª–∏${NC}"
        log_quality "WARNING: –¢—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ü–µ–ª–∏ - $total_score –±–∞–ª–ª–æ–≤"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
continuous_monitoring() {
    echo "üîÑ –ù–ï–ü–†–ï–†–´–í–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì –ö–ê–ß–ï–°–¢–í–ê"
    echo "=================================="
    echo "‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: $MONITOR_INTERVAL —Å–µ–∫—É–Ω–¥"
    echo "üìù –õ–æ–≥ —Ñ–∞–π–ª: $QUALITY_LOG"
    echo "üõë –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"
    echo ""
    
    log_quality "MONITOR: –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞—á–µ—Å—Ç–≤–∞"
    
    local monitor_count=0
    local quality_issues=0
    
    while true; do
        monitor_count=$((monitor_count + 1))
        local current_time=$(date '+%H:%M:%S')
        
        echo -n "[$current_time] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ #$monitor_count... "
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        monitor_code_quality
        local code_errors=$?
        
        monitor_performance
        monitor_project_alignment
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if [ "$code_errors" -eq 0 ]; then
            echo -e "${GREEN}‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–ª–∏—á–Ω–æ–µ${NC}"
            if [ "$quality_issues" -gt 0 ]; then
                log_quality "IMPROVEMENT: –ö–∞—á–µ—Å—Ç–≤–æ —É–ª—É—á—à–∏–ª–æ—Å—å - –ø—Ä–æ–±–ª–µ–º—ã —Ä–µ—à–µ–Ω—ã"
                quality_issues=0
            fi
        else
            echo -e "${YELLOW}‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –∫–∞—á–µ—Å—Ç–≤–∞${NC}"
            quality_issues=$((quality_issues + code_errors))
            log_quality "ISSUE: –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –∫–∞—á–µ—Å—Ç–≤–∞ - $code_errors –æ—à–∏–±–æ–∫"
        fi
        
        echo "‚è≥ –°–ª–µ–¥—É—é—â–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ $MONITOR_INTERVAL —Å–µ–∫—É–Ω–¥..."
        sleep $MONITOR_INTERVAL
    done
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
show_quality_statistics() {
    echo "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ê–ß–ï–°–¢–í–ê"
    echo "======================"
    
    if [ -f "$QUALITY_LOG" ]; then
        echo "üìù –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–µ: $(wc -l < "$QUALITY_LOG")"
        echo "‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: $(grep -c "QUALITY: –û—Ç–ª–∏—á–Ω–æ–µ\|PERFORMANCE: –û—Ç–ª–∏—á–Ω–∞—è\|ALIGNMENT: –û—Ç–ª–∏—á–Ω–æ–µ" "$QUALITY_LOG" 2>/dev/null || echo "0")"
        echo "‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: $(grep -c "WARNING:\|ISSUE:" "$QUALITY_LOG" 2>/dev/null || echo "0")"
        echo "üîß –£–ª—É—á—à–µ–Ω–∏–π: $(grep -c "IMPROVEMENT:" "$QUALITY_LOG" 2>/dev/null || echo "0")"
        echo ""
        echo "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π:"
        tail -5 "$QUALITY_LOG" | sed 's/^/  /'
    else
        echo "üìä –õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
case "$1" in
    "--continuous"|"-c")
        continuous_monitoring
        ;;
    "--stats"|"-s")
        show_quality_statistics
        ;;
    "--monitor"|"-m")
        monitor_code_quality
        monitor_performance
        monitor_project_alignment
        ;;
    *)
        echo "üìä –ù–ï–ü–†–ï–†–´–í–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì –ö–ê–ß–ï–°–¢–í–ê MUD-LIKE"
        echo "==========================================="
        echo ""
        echo "üí° –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:"
        echo "  $0 --continuous    # –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
        echo "  $0 --stats         # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
        echo "  $0 --monitor       # –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"
        echo ""
        echo "üéØ –¶–ï–õ–¨ –ü–†–û–ï–ö–¢–ê: –°–æ–∑–¥–∞–Ω–∏–µ MudRunner-like –∏–≥—Ä—ã"
        echo "üöó –§–æ–∫—É—Å: –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —Ñ–∏–∑–∏–∫–∞ –∏ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏—è —Ç–µ—Ä—Ä–µ–π–Ω–∞"
        echo ""
        echo "‚úÖ –ú–û–ù–ò–¢–û–†–ò–ù–ì –ö–ê–ß–ï–°–¢–í–ê –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï"
        ;;
esac
